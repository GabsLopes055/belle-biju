{"version":3,"file":"revolist-angular-datagrid.mjs","sources":["../../../projects/angular-datagrid/src/lib/angular-component-lib/utils.ts","../../../projects/angular-datagrid/src/lib/components.ts","../../../projects/angular-datagrid/src/lib/renderer.ts","../../../projects/angular-datagrid/src/lib/editor.adapter.ts","../../../projects/angular-datagrid/src/lib/editor.ts","../../../projects/angular-datagrid/src/public-api.ts","../../../projects/angular-datagrid/src/revolist-angular-datagrid.ts"],"sourcesContent":["/* eslint-disable */\n/* tslint:disable */\nimport { fromEvent } from 'rxjs';\n\nexport const proxyInputs = (Cmp: any, inputs: string[]) => {\n  const Prototype = Cmp.prototype;\n  inputs.forEach((item) => {\n    Object.defineProperty(Prototype, item, {\n      get() {\n        return this.el[item];\n      },\n      set(val: any) {\n        this.z.runOutsideAngular(() => (this.el[item] = val));\n      },\n      /**\n       * In the event that proxyInputs is called\n       * multiple times re-defining these inputs\n       * will cause an error to be thrown. As a result\n       * we set configurable: true to indicate these\n       * properties can be changed.\n       */\n      configurable: true,\n    });\n  });\n};\n\nexport const proxyMethods = (Cmp: any, methods: string[]) => {\n  const Prototype = Cmp.prototype;\n  methods.forEach((methodName) => {\n    Prototype[methodName] = function () {\n      const args = arguments;\n      return this.z.runOutsideAngular(() => this.el[methodName].apply(this.el, args));\n    };\n  });\n};\n\nexport const proxyOutputs = (instance: any, el: any, events: string[]) => {\n  events.forEach((eventName) => (instance[eventName] = fromEvent(el, eventName)));\n};\n\nexport const defineCustomElement = (tagName: string, customElement: any) => {\n  if (customElement !== undefined && typeof customElements !== 'undefined' && !customElements.get(tagName)) {\n    customElements.define(tagName, customElement);\n  }\n};\n\n// tslint:disable-next-line: only-arrow-functions\nexport function ProxyCmp(opts: { defineCustomElementFn?: () => void; inputs?: any; methods?: any }) {\n  const decorator = function (cls: any) {\n    const { defineCustomElementFn, inputs, methods } = opts;\n\n    if (defineCustomElementFn !== undefined) {\n      defineCustomElementFn();\n    }\n\n    if (inputs) {\n      proxyInputs(cls, inputs);\n    }\n    if (methods) {\n      proxyMethods(cls, methods);\n    }\n    return cls;\n  };\n  return decorator;\n}\n","/* tslint:disable */\n/* auto-generated angular directive proxies */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, NgZone } from '@angular/core';\n\nimport { ProxyCmp, proxyOutputs } from './angular-component-lib/utils';\n\nimport type { Components } from '@revolist/revogrid/standalone';\n\nimport { defineCustomElement as defineRevoGrid } from '@revolist/revogrid/standalone/revo-grid.js';\n@ProxyCmp({\n  defineCustomElementFn: defineRevoGrid,\n  inputs: ['accessible', 'additionalData', 'applyOnClose', 'autoSizeColumn', 'canFocus', 'canMoveColumns', 'colSize', 'columnTypes', 'columns', 'disableVirtualX', 'disableVirtualY', 'editors', 'exporting', 'filter', 'focusTemplate', 'frameSize', 'grouping', 'hideAttribution', 'jobsBeforeRender', 'pinnedBottomSource', 'pinnedTopSource', 'plugins', 'range', 'readonly', 'registerVNode', 'resize', 'rowClass', 'rowDefinitions', 'rowHeaders', 'rowSize', 'sorting', 'source', 'stretch', 'theme', 'trimmedRows', 'useClipboard'],\n  methods: ['refresh', 'setDataAt', 'scrollToRow', 'scrollToColumnIndex', 'scrollToColumnProp', 'updateColumns', 'addTrimmed', 'scrollToCoordinate', 'setCellEdit', 'setCellsFocus', 'getSource', 'getVisibleSource', 'getSourceStore', 'getColumnStore', 'updateColumnSorting', 'clearSorting', 'getColumns', 'clearFocus', 'getPlugins', 'getFocused', 'getContentSize', 'getSelectedRange', 'refreshExtraElements']\n})\n@Component({\n  selector: 'revo-grid',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n  inputs: ['accessible', 'additionalData', 'applyOnClose', 'autoSizeColumn', 'canFocus', 'canMoveColumns', 'colSize', 'columnTypes', 'columns', 'disableVirtualX', 'disableVirtualY', 'editors', 'exporting', 'filter', 'focusTemplate', 'frameSize', 'grouping', 'hideAttribution', 'jobsBeforeRender', 'pinnedBottomSource', 'pinnedTopSource', 'plugins', 'range', 'readonly', 'registerVNode', 'resize', 'rowClass', 'rowDefinitions', 'rowHeaders', 'rowSize', 'sorting', 'source', 'stretch', 'theme', 'trimmedRows', 'useClipboard'],\n  standalone: true\n})\nexport class RevoGrid {\n  protected el: HTMLElement;\n  constructor(c: ChangeDetectorRef, r: ElementRef, protected z: NgZone) {\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['contentsizechanged', 'beforeedit', 'beforerangeedit', 'afteredit', 'beforeautofill', 'beforerange', 'afterfocus', 'roworderchanged', 'beforesortingapply', 'beforesorting', 'rowdragstart', 'headerclick', 'beforecellfocus', 'beforefocuslost', 'beforesourceset', 'beforeanysource', 'aftersourceset', 'afteranysource', 'beforecolumnsset', 'beforecolumnapplied', 'aftercolumnsset', 'beforefilterapply', 'beforefiltertrimmed', 'beforetrimmed', 'aftertrimmed', 'viewportscroll', 'beforeexport', 'beforeeditstart', 'aftercolumnresize', 'beforerowdefinition', 'filterconfigchanged', 'sortingconfigchanged', 'rowheaderschanged', 'beforegridrender', 'aftergridrender', 'aftergridinit', 'additionaldatachanged', 'afterthemechanged', 'created']);\n  }\n}\n\n\nimport type { MultiDimensionType as IRevoGridMultiDimensionType } from '@revolist/revogrid/standalone';\nimport type { BeforeSaveDataDetails as IRevoGridBeforeSaveDataDetails } from '@revolist/revogrid/standalone';\nimport type { BeforeRangeSaveDataDetails as IRevoGridBeforeRangeSaveDataDetails } from '@revolist/revogrid/standalone';\nimport type { AfterEditEvent as IRevoGridAfterEditEvent } from '@revolist/revogrid/standalone';\nimport type { ChangedRange as IRevoGridChangedRange } from '@revolist/revogrid/standalone';\nimport type { FocusAfterRenderEvent as IRevoGridFocusAfterRenderEvent } from '@revolist/revogrid/standalone';\nimport type { ColumnRegular as IRevoGridColumnRegular } from '@revolist/revogrid/standalone';\nimport type { RowDragStartDetails as IRevoGridRowDragStartDetails } from '@revolist/revogrid/standalone';\nimport type { FocusedData as IRevoGridFocusedData } from '@revolist/revogrid/standalone';\nimport type { DimensionRows as IRevoGridDimensionRows } from '@revolist/revogrid/standalone';\nimport type { DataType as IRevoGridDataType } from '@revolist/revogrid/standalone';\nimport type { ColumnCollection as IRevoGridColumnCollection } from '@revolist/revogrid/standalone';\nimport type { ColumnProp as IRevoGridColumnProp } from '@revolist/revogrid/standalone';\nimport type { FilterCollectionItem as IRevoGridFilterCollectionItem } from '@revolist/revogrid/standalone';\nimport type { ViewPortScrollEvent as IRevoGridViewPortScrollEvent } from '@revolist/revogrid/standalone';\nimport type { DataInput as IRevoGridDataInput } from '@revolist/revogrid/standalone';\nimport type { SortingConfig as IRevoGridSortingConfig } from '@revolist/revogrid/standalone';\nimport type { Theme as IRevoGridTheme } from '@revolist/revogrid/standalone';\n\nexport declare interface RevoGrid extends Components.RevoGrid {\n  /**\n   * New content size has been applied. The size excludes the header.\nCurrently, the event responsible for applying the new content size does not provide the actual size.\nTo retrieve the actual content size, you can utilize the `getContentSize` function after the event has been triggered.\n   */\n  contentsizechanged: EventEmitter<CustomEvent<IRevoGridMultiDimensionType>>;\n  /**\n   * Before the data is edited.\nTo prevent the default behavior of editing data and use your own implementation, call `e.preventDefault()`.\nTo override the edit result with your own value, set the `e.val` property to your desired value.\n   */\n  beforeedit: EventEmitter<CustomEvent<IRevoGridBeforeSaveDataDetails>>;\n  /**\n   * Before applying range data, specifically when a range selection occurs.\nTo customize the data and prevent the default edit data from being set, you can call `e.preventDefault()`.\n   */\n  beforerangeedit: EventEmitter<CustomEvent<IRevoGridBeforeRangeSaveDataDetails>>;\n  /**\n   * After data applied or range changed.\n   */\n  afteredit: EventEmitter<CustomEvent<IRevoGridAfterEditEvent>>;\n  /**\n   * Before autofill is applied.\nTo prevent the default behavior of applying the edit data, you can call `e.preventDefault()`.\n   */\n  beforeautofill: EventEmitter<CustomEvent<IRevoGridChangedRange>>;\n  /**\n   * Before autofill is applied. Runs before beforeautofill event.\nUse e.preventDefault() to prevent range.\n   */\n  beforerange: EventEmitter<CustomEvent<IRevoGridChangedRange>>;\n  /**\n   * After focus render finished.\nCan be used to access a focus element through `event.target`.\nThis is just a duplicate of `afterfocus` from `revogr-focus.tsx`.\n   */\n  afterfocus: EventEmitter<CustomEvent<IRevoGridFocusAfterRenderEvent>>;\n  /**\n   * Before the order of `rgRow` is applied.\nTo prevent the default behavior of changing the order of `rgRow`, you can call `e.preventDefault()`.\n   */\n  roworderchanged: EventEmitter<CustomEvent<{ from: number; to: number }>>;\n  /**\n   * By sorting.plugin.ts\nBefore sorting apply.\nUse e.preventDefault() to prevent sorting data change.\n   */\n  beforesortingapply: EventEmitter<CustomEvent<{ column: IRevoGridColumnRegular; order: 'desc' | 'asc'; additive: boolean; }>>;\n  /**\n   * By sorting.plugin.ts\nBefore sorting event.\nInitial sorting triggered, if this event stops no other event called.\nUse e.preventDefault() to prevent sorting.\n   */\n  beforesorting: EventEmitter<CustomEvent<{ column: IRevoGridColumnRegular; order: 'desc' | 'asc'; additive: boolean; }>>;\n  /**\n   * This event is triggered when the row order change is started.\nTo prevent the default behavior of changing the row order, you can call `e.preventDefault()`.\nTo change the item name at the start of the row order change, you can set `e.text` to the desired new name.\n   */\n  rowdragstart: EventEmitter<CustomEvent<IRevoGridRowDragStartDetails>>;\n  /**\n   * On header click.\n   */\n  headerclick: EventEmitter<CustomEvent<IRevoGridColumnRegular>>;\n  /**\n   * Before the cell focus is changed.\nTo prevent the default behavior of changing the cell focus, you can call `e.preventDefault()`.\n   */\n  beforecellfocus: EventEmitter<CustomEvent<IRevoGridBeforeSaveDataDetails>>;\n  /**\n   * Before the grid focus is lost.\nTo prevent the default behavior of changing the cell focus, you can call `e.preventDefault()`.\n   */\n  beforefocuslost: EventEmitter<CustomEvent<IRevoGridFocusedData | null>>;\n  /**\n   * Before main source/rows data apply.\nYou can override data source here\n   */\n  beforesourceset: EventEmitter<CustomEvent<{ type: IRevoGridDimensionRows; source: IRevoGridDataType[]; }>>;\n  /**\n   * Before data apply on any source type. Can be source from pinned and main viewport.\nYou can override data source here\n   */\n  beforeanysource: EventEmitter<CustomEvent<{ type: IRevoGridDimensionRows; source: IRevoGridDataType[]; }>>;\n  /**\n   * After main source/rows updated\n   */\n  aftersourceset: EventEmitter<CustomEvent<{ type: IRevoGridDimensionRows; source: IRevoGridDataType[]; }>>;\n  /**\n   * Emitted after each source update, whether from the pinned or main viewport.\nUseful for tracking all changes originating from sources in both the pinned and main viewports.\n   */\n  afteranysource: EventEmitter<CustomEvent<{ type: IRevoGridDimensionRows; source: IRevoGridDataType[]; }>>;\n  /**\n   * Emitted before a column update is applied.\nListeners can use this event to perform any necessary actions or modifications before the column update is finalized.\n   */\n  beforecolumnsset: EventEmitter<CustomEvent<IRevoGridColumnCollection>>;\n  /**\n   * Emitted before a column update is applied, after the column set is gathered and the viewport is updated.\nUseful for performing actions or modifications before the final application of the column update.\n   */\n  beforecolumnapplied: EventEmitter<CustomEvent<IRevoGridColumnCollection>>;\n  /**\n   * Column updated\n   */\n  aftercolumnsset: EventEmitter<CustomEvent<{ columns: IRevoGridColumnCollection; order: Record<IRevoGridColumnProp, 'asc' | 'desc' | undefined>; }>>;\n  /**\n   * Emitted before applying a filter to the data source.\nUse e.preventDefault() to prevent cell focus change.\nModify if you need to change filters.\n   */\n  beforefilterapply: EventEmitter<CustomEvent<{ collection: Record<IRevoGridColumnProp, IRevoGridFilterCollectionItem> }>>;\n  /**\n   * Emitted before applying a filter to the data source.\nUse e.preventDefault() to prevent the default behavior of trimming values and applying the filter.\nModify the `collection` property if you want to change the filters.\nModify the `itemsToFilter` property if you want to filter the indexes for trimming.\n   */\n  beforefiltertrimmed: EventEmitter<CustomEvent<{ collection: Record<IRevoGridColumnProp, IRevoGridFilterCollectionItem>; itemsToFilter: Record<number, boolean>; }>>;\n  /**\n   * Emitted before trimming values.\nUse e.preventDefault() to prevent the default behavior of trimming values.\nModify the `trimmed` property if you want to filter the indexes for trimming.\n   */\n  beforetrimmed: EventEmitter<CustomEvent<{ trimmed: Record<number, boolean>; trimmedType: string; type: string; }>>;\n  /**\n   * Emitted after trimmed values have been applied.\nUseful for notifying when trimming of values has taken place.\n   */\n  aftertrimmed: EventEmitter<CustomEvent<any>>;\n  /**\n   * Emitted when the viewport is scrolled.\nUseful for tracking viewport scrolling events.\n   */\n  viewportscroll: EventEmitter<CustomEvent<IRevoGridViewPortScrollEvent>>;\n  /**\n   * Before export\nUse e.preventDefault() to prevent export\nReplace data in Event in case you want to modify it in export\n   */\n  beforeexport: EventEmitter<CustomEvent<IRevoGridDataInput>>;\n  /**\n   * Emitted before editing starts.\nUse e.preventDefault() to prevent the default edit behavior.\n   */\n  beforeeditstart: EventEmitter<CustomEvent<IRevoGridBeforeSaveDataDetails>>;\n  /**\n   * Emitted after column resizing.\nUseful for retrieving the resized columns.\n   */\n  aftercolumnresize: EventEmitter<CustomEvent<{ [index: number]: IRevoGridColumnRegular; }>>;\n  /**\n   * Emitted before the row definition is applied.\nUseful for modifying or preventing the default row definition behavior.\n   */\n  beforerowdefinition: EventEmitter<CustomEvent<{ vals: any; oldVals: any }>>;\n  /**\n   * Emitted when the filter configuration is changed\n   */\n  filterconfigchanged: EventEmitter<CustomEvent<any>>;\n  /**\n   * Emitted when the sorting configuration is changed\n   */\n  sortingconfigchanged: EventEmitter<CustomEvent<IRevoGridSortingConfig>>;\n  /**\n   * Emmited when the row headers are changed.\n   */\n  rowheaderschanged: EventEmitter<CustomEvent<any>>;\n  /**\n   * Emmited before the grid is rendered.\n   */\n  beforegridrender: EventEmitter<CustomEvent<any>>;\n  /**\n   * Emmited after the grid is rendered.\n   */\n  aftergridrender: EventEmitter<CustomEvent<any>>;\n  /**\n   * Emmited after the grid is initialized. Connected to the DOM.\n   */\n  aftergridinit: EventEmitter<CustomEvent<any>>;\n  /**\n   * Emmited after the additional data is changed\n   */\n  additionaldatachanged: EventEmitter<CustomEvent<any>>;\n  /**\n   * Emmited after the theme is changed\n   */\n  afterthemechanged: EventEmitter<CustomEvent<IRevoGridTheme>>;\n  /**\n   * Emmited after grid created\n   */\n  created: EventEmitter<CustomEvent<any>>;\n}\n\n\n","/**\n * Angular Adapter Function:\n * Handles the rendering and lifecycle of Angular components within StencilJS using updated Angular APIs.\n */\nimport { Injector, ComponentRef, Type, ApplicationRef, createComponent, EnvironmentInjector, inject } from '@angular/core';\nimport { ColumnDataSchemaModel, ColumnTemplateProp } from '@revolist/revogrid';\n\nexport interface AngularElement extends HTMLElement {\n  componentRef?: ComponentRef<any>;  // Reference to the Angular component\n}\n\nexport interface RenderedComponent<T> {\n  update: (newProps: T) => void;     // Function to update component with new props\n  destroy: () => void;               // Function to destroy the component\n}\n\nfunction updateProps<T>(el: AngularElement, newProps: T) {\n  if (!el.componentRef?.instance) {\n    return;\n  }\n  el.componentRef.instance.props = newProps;\n  el.componentRef.instance.ngOnChanges?.({\n    props: {\n      currentValue: newProps,\n      previousValue: el.componentRef.instance.props,\n      firstChange: false,\n      isFirstChange: () => false,\n    },\n  });\n}\n\nexport function TemplateConstructor<T extends Object>(\n  el: AngularElement | null,\n  AngularComponent: Type<any>,\n  initialProps: T = {} as T,\n  injector: Injector,\n  lastEl: RenderedComponent<T> | null = null,\n): RenderedComponent<T> | null {\n  if (!el) {\n    lastEl?.destroy?.();  // Destroy last component if element is null\n    return null;\n  }\n\n  if (!el.componentRef) {\n    const applicationRef = injector.get(ApplicationRef);\n    const environmentInjector = injector.get(EnvironmentInjector);\n    const componentRef = createComponent(AngularComponent, { environmentInjector });\n    applicationRef.attachView(componentRef.hostView);\n    componentRef.instance.props = initialProps;\n    componentRef.changeDetectorRef.detectChanges();\n    el.componentRef = componentRef;  // Store the component reference\n    el.appendChild(componentRef.location.nativeElement);\n  } else if (el.componentRef.instance) {\n    updateProps(el, initialProps);\n  }\n\n  // Function to update component props\n  const update = (newProps: T) => updateProps(el, newProps);\n\n  // Function to destroy the component\n  const destroy = () => {\n    el.componentRef?.destroy();\n    el.componentRef = undefined;\n  };\n\n  return { update, destroy };\n}\n\n// Function to create template for Angular component\nexport const Template = (\n  AngularComponent: Type<any>,\n  customProps?: any,\n  injector = inject(Injector)\n) => {\n  return (h: any, p: ColumnDataSchemaModel | ColumnTemplateProp, addition?: any) => {\n    const props = customProps ? { ...customProps, ...p } : p;\n    props.addition = addition;\n    let lastEl: RenderedComponent<any> | null = null;\n    return h('span', {\n      key: `${p.prop}-${p.rowIndex || 0}`,\n      ref: (el: AngularElement | null) => {\n        lastEl = TemplateConstructor(el, AngularComponent, props, injector, lastEl);\n      }\n    });\n  };\n};\n","import type { EditCell, ColumnDataSchemaModel, HyperFunc, VNode, EditorBase } from '@revolist/revogrid';\nimport { Injector, Type } from '@angular/core';\nimport { TemplateConstructor, RenderedComponent, AngularElement } from './renderer';\n/**\n * Data passed to editor\n */\nexport type EditorType = {\n  column: ColumnDataSchemaModel;\n  save: (value: any, preventFocus?: boolean) => void;\n  close: (focusNext?: boolean) => void;\n} & Partial<EditCell>;\n\nexport class EditorAdapter implements EditorBase  {\n  public element: AngularElement | null = null;\n  public editCell?: EditCell;\n  private renderedComponent: RenderedComponent<any> | null = null;\n\n  constructor(\n    private EditorComponent: Type<any>,\n    private injector: Injector,\n    public column: ColumnDataSchemaModel,\n    private save: (value: any, preventFocus?: boolean) => void,\n    private close: (focusNext?: boolean) => void,\n  ) {}\n\n  // optional, called after editor rendered\n  componentDidRender() {}\n\n  // optional, called after editor destroyed\n  disconnectedCallback() {\n    this.renderedComponent?.destroy();\n    this.renderedComponent = null;\n  }\n\n  render(h: HyperFunc<VNode>) {\n    return h('span', {\n      key: `${this.column.prop}-${this.editCell?.rowIndex || 0}`,\n      ref: (el: AngularElement) => \n        this.renderedComponent = TemplateConstructor(\n          el,\n          this.EditorComponent,\n          {\n            ...this.editCell,\n            column: this.column,\n            save: this.save,\n            close: this.close,\n          },\n          this.injector,\n        ),\n      });\n  }\n}\n","import type { ColumnDataSchemaModel, EditorCtr } from '@revolist/revogrid';\nimport { Injector, Type, inject } from '@angular/core';\nimport { EditorAdapter } from './editor.adapter';\n/**\n * Create editor constructor.\n * This function creates editor constructor by wrapping it with EditorAdapter\n * which is responsible for connecting editor with grid.\n */\nexport const Editor = (\n  EditorComponent: Type<any>,\n  injector = inject(Injector),\n): EditorCtr => {\n  /**\n   * Editor constructor wrapper\n   * @param column column data to which editor is bound\n   * @param save function to save data\n   * @param close function to close editor\n   * @returns editor instance\n   */\n  return function (\n    column: ColumnDataSchemaModel,\n    save: (value: any, preventFocus?: boolean) => void,\n    close: (focusNext?: boolean) => void,\n  ) {\n    return new EditorAdapter(EditorComponent, injector, column, save, close);\n  };\n};\n","/*\n * Public API Surface of angular-datagrid\n */\nimport { defineCustomElement as defineFilterPanel } from '@revolist/revogrid/standalone/revogr-filter-panel.js';\n// Filter is defined as a standalone component plugin and should be imported here\ndefineFilterPanel?.();\n\nexport * from '@revolist/revogrid';\nexport * from './lib/components';\nexport * from './lib/editor.adapter';\nexport * from './lib/editor';\nexport * from './lib/renderer';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["defineRevoGrid","defineFilterPanel"],"mappings":"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"}