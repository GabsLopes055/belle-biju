/**
 * Angular Adapter Function:
 * Handles the rendering and lifecycle of Angular components within StencilJS using updated Angular APIs.
 */
import { Injector, ApplicationRef, createComponent, EnvironmentInjector, inject } from '@angular/core';
function updateProps(el, newProps) {
    if (!el.componentRef?.instance) {
        return;
    }
    el.componentRef.instance.props = newProps;
    el.componentRef.instance.ngOnChanges?.({
        props: {
            currentValue: newProps,
            previousValue: el.componentRef.instance.props,
            firstChange: false,
            isFirstChange: () => false,
        },
    });
}
export function TemplateConstructor(el, AngularComponent, initialProps = {}, injector, lastEl = null) {
    if (!el) {
        lastEl?.destroy?.(); // Destroy last component if element is null
        return null;
    }
    if (!el.componentRef) {
        const applicationRef = injector.get(ApplicationRef);
        const environmentInjector = injector.get(EnvironmentInjector);
        const componentRef = createComponent(AngularComponent, { environmentInjector });
        applicationRef.attachView(componentRef.hostView);
        componentRef.instance.props = initialProps;
        componentRef.changeDetectorRef.detectChanges();
        el.componentRef = componentRef; // Store the component reference
        el.appendChild(componentRef.location.nativeElement);
    }
    else if (el.componentRef.instance) {
        updateProps(el, initialProps);
    }
    // Function to update component props
    const update = (newProps) => updateProps(el, newProps);
    // Function to destroy the component
    const destroy = () => {
        el.componentRef?.destroy();
        el.componentRef = undefined;
    };
    return { update, destroy };
}
// Function to create template for Angular component
export const Template = (AngularComponent, customProps, injector = inject(Injector)) => {
    return (h, p, addition) => {
        const props = customProps ? { ...customProps, ...p } : p;
        props.addition = addition;
        let lastEl = null;
        return h('span', {
            key: `${p.prop}-${p.rowIndex || 0}`,
            ref: (el) => {
                lastEl = TemplateConstructor(el, AngularComponent, props, injector, lastEl);
            }
        });
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWRhdGFncmlkL3NyYy9saWIvcmVuZGVyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsT0FBTyxFQUFFLFFBQVEsRUFBc0IsY0FBYyxFQUFFLGVBQWUsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFZM0gsU0FBUyxXQUFXLENBQUksRUFBa0IsRUFBRSxRQUFXO0lBQ3JELElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxDQUFDO1FBQy9CLE9BQU87SUFDVCxDQUFDO0lBQ0QsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztJQUMxQyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyQyxLQUFLLEVBQUU7WUFDTCxZQUFZLEVBQUUsUUFBUTtZQUN0QixhQUFhLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSztZQUM3QyxXQUFXLEVBQUUsS0FBSztZQUNsQixhQUFhLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSztTQUMzQjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLEVBQXlCLEVBQ3pCLGdCQUEyQixFQUMzQixlQUFrQixFQUFPLEVBQ3pCLFFBQWtCLEVBQ2xCLFNBQXNDLElBQUk7SUFFMUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ1IsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBRSw0Q0FBNEM7UUFDbEUsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNyQixNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sbUJBQW1CLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzlELE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBQztRQUNoRixjQUFjLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqRCxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUM7UUFDM0MsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQy9DLEVBQUUsQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUUsZ0NBQWdDO1FBQ2pFLEVBQUUsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN0RCxDQUFDO1NBQU0sSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3BDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELHFDQUFxQztJQUNyQyxNQUFNLE1BQU0sR0FBRyxDQUFDLFFBQVcsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUUxRCxvQ0FBb0M7SUFDcEMsTUFBTSxPQUFPLEdBQUcsR0FBRyxFQUFFO1FBQ25CLEVBQUUsQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLENBQUM7UUFDM0IsRUFBRSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUM7SUFDOUIsQ0FBQyxDQUFDO0lBRUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBRUQsb0RBQW9EO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUN0QixnQkFBMkIsRUFDM0IsV0FBaUIsRUFDakIsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFDM0IsRUFBRTtJQUNGLE9BQU8sQ0FBQyxDQUFNLEVBQUUsQ0FBNkMsRUFBRSxRQUFjLEVBQUUsRUFBRTtRQUMvRSxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxXQUFXLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pELEtBQUssQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQzFCLElBQUksTUFBTSxHQUFrQyxJQUFJLENBQUM7UUFDakQsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ2YsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsRUFBRTtZQUNuQyxHQUFHLEVBQUUsQ0FBQyxFQUF5QixFQUFFLEVBQUU7Z0JBQ2pDLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM5RSxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBbmd1bGFyIEFkYXB0ZXIgRnVuY3Rpb246XG4gKiBIYW5kbGVzIHRoZSByZW5kZXJpbmcgYW5kIGxpZmVjeWNsZSBvZiBBbmd1bGFyIGNvbXBvbmVudHMgd2l0aGluIFN0ZW5jaWxKUyB1c2luZyB1cGRhdGVkIEFuZ3VsYXIgQVBJcy5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0b3IsIENvbXBvbmVudFJlZiwgVHlwZSwgQXBwbGljYXRpb25SZWYsIGNyZWF0ZUNvbXBvbmVudCwgRW52aXJvbm1lbnRJbmplY3RvciwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2x1bW5EYXRhU2NoZW1hTW9kZWwsIENvbHVtblRlbXBsYXRlUHJvcCB9IGZyb20gJ0ByZXZvbGlzdC9yZXZvZ3JpZCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5ndWxhckVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbXBvbmVudFJlZj86IENvbXBvbmVudFJlZjxhbnk+OyAgLy8gUmVmZXJlbmNlIHRvIHRoZSBBbmd1bGFyIGNvbXBvbmVudFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlbmRlcmVkQ29tcG9uZW50PFQ+IHtcbiAgdXBkYXRlOiAobmV3UHJvcHM6IFQpID0+IHZvaWQ7ICAgICAvLyBGdW5jdGlvbiB0byB1cGRhdGUgY29tcG9uZW50IHdpdGggbmV3IHByb3BzXG4gIGRlc3Ryb3k6ICgpID0+IHZvaWQ7ICAgICAgICAgICAgICAgLy8gRnVuY3Rpb24gdG8gZGVzdHJveSB0aGUgY29tcG9uZW50XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVByb3BzPFQ+KGVsOiBBbmd1bGFyRWxlbWVudCwgbmV3UHJvcHM6IFQpIHtcbiAgaWYgKCFlbC5jb21wb25lbnRSZWY/Lmluc3RhbmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVsLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5wcm9wcyA9IG5ld1Byb3BzO1xuICBlbC5jb21wb25lbnRSZWYuaW5zdGFuY2UubmdPbkNoYW5nZXM/Lih7XG4gICAgcHJvcHM6IHtcbiAgICAgIGN1cnJlbnRWYWx1ZTogbmV3UHJvcHMsXG4gICAgICBwcmV2aW91c1ZhbHVlOiBlbC5jb21wb25lbnRSZWYuaW5zdGFuY2UucHJvcHMsXG4gICAgICBmaXJzdENoYW5nZTogZmFsc2UsXG4gICAgICBpc0ZpcnN0Q2hhbmdlOiAoKSA9PiBmYWxzZSxcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRlbXBsYXRlQ29uc3RydWN0b3I8VCBleHRlbmRzIE9iamVjdD4oXG4gIGVsOiBBbmd1bGFyRWxlbWVudCB8IG51bGwsXG4gIEFuZ3VsYXJDb21wb25lbnQ6IFR5cGU8YW55PixcbiAgaW5pdGlhbFByb3BzOiBUID0ge30gYXMgVCxcbiAgaW5qZWN0b3I6IEluamVjdG9yLFxuICBsYXN0RWw6IFJlbmRlcmVkQ29tcG9uZW50PFQ+IHwgbnVsbCA9IG51bGwsXG4pOiBSZW5kZXJlZENvbXBvbmVudDxUPiB8IG51bGwge1xuICBpZiAoIWVsKSB7XG4gICAgbGFzdEVsPy5kZXN0cm95Py4oKTsgIC8vIERlc3Ryb3kgbGFzdCBjb21wb25lbnQgaWYgZWxlbWVudCBpcyBudWxsXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIWVsLmNvbXBvbmVudFJlZikge1xuICAgIGNvbnN0IGFwcGxpY2F0aW9uUmVmID0gaW5qZWN0b3IuZ2V0KEFwcGxpY2F0aW9uUmVmKTtcbiAgICBjb25zdCBlbnZpcm9ubWVudEluamVjdG9yID0gaW5qZWN0b3IuZ2V0KEVudmlyb25tZW50SW5qZWN0b3IpO1xuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IGNyZWF0ZUNvbXBvbmVudChBbmd1bGFyQ29tcG9uZW50LCB7IGVudmlyb25tZW50SW5qZWN0b3IgfSk7XG4gICAgYXBwbGljYXRpb25SZWYuYXR0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5wcm9wcyA9IGluaXRpYWxQcm9wcztcbiAgICBjb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIGVsLmNvbXBvbmVudFJlZiA9IGNvbXBvbmVudFJlZjsgIC8vIFN0b3JlIHRoZSBjb21wb25lbnQgcmVmZXJlbmNlXG4gICAgZWwuYXBwZW5kQ2hpbGQoY29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpO1xuICB9IGVsc2UgaWYgKGVsLmNvbXBvbmVudFJlZi5pbnN0YW5jZSkge1xuICAgIHVwZGF0ZVByb3BzKGVsLCBpbml0aWFsUHJvcHMpO1xuICB9XG5cbiAgLy8gRnVuY3Rpb24gdG8gdXBkYXRlIGNvbXBvbmVudCBwcm9wc1xuICBjb25zdCB1cGRhdGUgPSAobmV3UHJvcHM6IFQpID0+IHVwZGF0ZVByb3BzKGVsLCBuZXdQcm9wcyk7XG5cbiAgLy8gRnVuY3Rpb24gdG8gZGVzdHJveSB0aGUgY29tcG9uZW50XG4gIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgZWwuY29tcG9uZW50UmVmPy5kZXN0cm95KCk7XG4gICAgZWwuY29tcG9uZW50UmVmID0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHJldHVybiB7IHVwZGF0ZSwgZGVzdHJveSB9O1xufVxuXG4vLyBGdW5jdGlvbiB0byBjcmVhdGUgdGVtcGxhdGUgZm9yIEFuZ3VsYXIgY29tcG9uZW50XG5leHBvcnQgY29uc3QgVGVtcGxhdGUgPSAoXG4gIEFuZ3VsYXJDb21wb25lbnQ6IFR5cGU8YW55PixcbiAgY3VzdG9tUHJvcHM/OiBhbnksXG4gIGluamVjdG9yID0gaW5qZWN0KEluamVjdG9yKVxuKSA9PiB7XG4gIHJldHVybiAoaDogYW55LCBwOiBDb2x1bW5EYXRhU2NoZW1hTW9kZWwgfCBDb2x1bW5UZW1wbGF0ZVByb3AsIGFkZGl0aW9uPzogYW55KSA9PiB7XG4gICAgY29uc3QgcHJvcHMgPSBjdXN0b21Qcm9wcyA/IHsgLi4uY3VzdG9tUHJvcHMsIC4uLnAgfSA6IHA7XG4gICAgcHJvcHMuYWRkaXRpb24gPSBhZGRpdGlvbjtcbiAgICBsZXQgbGFzdEVsOiBSZW5kZXJlZENvbXBvbmVudDxhbnk+IHwgbnVsbCA9IG51bGw7XG4gICAgcmV0dXJuIGgoJ3NwYW4nLCB7XG4gICAgICBrZXk6IGAke3AucHJvcH0tJHtwLnJvd0luZGV4IHx8IDB9YCxcbiAgICAgIHJlZjogKGVsOiBBbmd1bGFyRWxlbWVudCB8IG51bGwpID0+IHtcbiAgICAgICAgbGFzdEVsID0gVGVtcGxhdGVDb25zdHJ1Y3RvcihlbCwgQW5ndWxhckNvbXBvbmVudCwgcHJvcHMsIGluamVjdG9yLCBsYXN0RWwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufTtcbiJdfQ==