/**
 * Angular Adapter Function:
 * Handles the rendering and lifecycle of Angular components within StencilJS using updated Angular APIs.
 */
import { Injector, ApplicationRef, createComponent, EnvironmentInjector, inject } from '@angular/core';
function updateProps(el, newProps) {
    if (!el.componentRef?.instance) {
        return;
    }
    // Update both ways to ensure it works with different component implementations
    el.componentRef.instance.props = newProps;
    el.componentRef.setInput('props', newProps);
    // Handle ngOnChanges if component implements it
    if (el.componentRef.instance.ngOnChanges) {
        const previousValue = el.componentRef.instance.props;
        const simpleChanges = {
            props: {
                previousValue,
                currentValue: newProps,
                firstChange: previousValue === undefined,
                isFirstChange: () => previousValue === undefined
            }
        };
        el.componentRef.instance.ngOnChanges(simpleChanges);
    }
    // Force component to check for updates
    el.componentRef.changeDetectorRef.markForCheck();
    el.componentRef.changeDetectorRef.detectChanges();
}
export function TemplateConstructor(el, AngularComponent, initialProps = {}, injector, lastEl = null) {
    if (!el) {
        lastEl?.destroy?.(); // Destroy last component if element is null
        return null;
    }
    if (!el.componentRef) {
        const applicationRef = injector.get(ApplicationRef);
        const environmentInjector = injector.get(EnvironmentInjector);
        const componentRef = createComponent(AngularComponent, { environmentInjector });
        applicationRef.attachView(componentRef.hostView);
        componentRef.instance.props = initialProps;
        componentRef.changeDetectorRef.detectChanges();
        el.componentRef = componentRef; // Store the component reference
        el.appendChild(componentRef.location.nativeElement);
    }
    else if (el.componentRef.instance) {
        updateProps(el, initialProps);
    }
    // Function to update component props
    const update = (newProps) => updateProps(el, newProps);
    // Function to destroy the component
    const destroy = () => {
        el.componentRef?.destroy();
        el.componentRef = undefined;
    };
    return { update, destroy };
}
// Function to create template for Angular component
export const Template = (AngularComponent, customProps, injector = inject(Injector)) => {
    return (h, p, addition) => {
        const props = customProps ? { ...customProps, ...p } : p;
        props.addition = addition;
        let lastEl = null;
        return h('span', {
            key: `${p.prop}-${p.rowIndex || 0}`,
            ref: (el) => {
                lastEl = TemplateConstructor(el, AngularComponent, props, injector, lastEl);
            }
        });
    };
};
//# sourceMappingURL=data:application/json;base64,