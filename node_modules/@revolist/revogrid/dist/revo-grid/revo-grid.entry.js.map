{"version":3,"names":["ThemeCompact","constructor","this","defaultRowSize","ThemeDefault","ThemeMaterial","DEFAULT_THEME","allowedThemes","ThemeService","theme","currentTheme","rowSize","customRowSize","size","cfg","register","parsedTheme","getTheme","indexOf","ColumnDataProvider","order","sorting","Object","keys","forEach","prop","stores","dataSources","collection","columnTypes","reduce","sources","k","DataStore","column","c","type","getColumn","virtualIndex","getSourceItem","store","getRawColumns","result","item","get","rgCol","colPinStart","colPinEnd","getColumns","columnsByType","r","t","getColumnIndexByProp","getSourceItemVirtualIndexByProp","getColumnByProp","_a","columnByProp","refreshByType","refresh","setColumns","data","updateData","columns","depth","maxLevel","groups","columnGrouping","res","g","level","push","sort","updateColumns","updatedColumns","columnByKey","getColumnType","colByIndex","hasOwnProperty","colsToUpdate","sourceItems","i","length","colToUpdateIfExists","setSourceByPhysicalIndex","updateColumn","index","setSourceByVirtualIndex","updateColumnSorting","additive","clearSorting","types","each","_","cols","undefined","setData","source","DataProvider","dimensionProvider","rowTypes","disableVirtualRows","grouping","silent","noVirtual","getModel","changeOrder","rowType","from","to","storeService","newItemsOrder","prevItems","toMove","splice","proxyItems","newItems","updateSizesPositionByNewDataIndexes","setCellData","rowIndex","val","mutate","model","setSourceData","setRangeData","items","oldModel","parseInt","isRowType","refreshItems","setGrouping","groupingDepth","setTrimmed","trimmed","addTrimmed","getVisibleSourceItem","DimensionProvider","viewports","config","sizeChanged","debounce","realSizeChanged","RESIZE_INTERVAL","DimensionStore","onChange","clearSize","count","drop","setOriginalSizes","setItemCount","setCustomSizes","sizes","keepOld","newSizes","oldSizes","assign","setDimensionSize","setViewPortCoordinate","coordinate","lastCoordinate","force","realCount","setViewport","setStore","allTrimmed","gatherTrimmedItems","dimStoreType","itemCount","dimension","getCurrentState","virtualSize","realSize","applyNewColumns","disableVirtualX","getColumnSizes","vpUpdate","getFullSize","x","y","_b","getViewPortPos","e","getItemByIndex","start","setSettings","dimensionType","s","prevItemsOrder","updateSizesPositionByIndexes","ViewportProvider","ViewportStore","gatherColumnData","colDimension","dimensions","colType","realWidth","contentWidth","class","contentHeight","key","onResizeviewport","style","fixWidth","minWidth","headerProp","colData","colStore","dimensionCol","resizeHandler","onHeaderresize","position","viewportCol","ViewportService","selectionStoreConnector","beforeUpdate","columnProvider","viewportProvider","rowStores","dataProvider","onColumnResize","vpState","clientSize","detail","disableVirtualY","columnSelectionStore","registerCol","dataPorts","dataViewPort","rgRow","segmentSelection","registerSegment","setLastCell","lastCell","rowSelectionStore","registerRow","rowDef","selectionStore","ref","registerSection","onSetrange","setRangeArea","onSettemprange","setTempArea","onFocuscell","clearFocus","focus","scrollingService","unregister","changedItems","entries","resize","registerColumn","slots","rowPinStart","HEADER_SLOT","CONTENT_SLOT","rowPinEnd","FOOTER_SLOT","isPresent","EMPTY_INDEX","partition","viewportDataPartition","scrollToCell","cell","proxyScroll","clearFocused","clearAll","clearEdit","setEdit","getFocused","focused","focusedStore","storesXToType","storesYToType","getStoreCoordinateByType","storesByType","setFocus","end","focusByCell","getSelectedRange","selectedRange","colIndex","setEditByCell","GridScrollingService","elements","newEventPromise","event","elKey","isPinnedColumn","delta","el","changeScroll","setScroll","call","newEvent","scrollSilentService","includes","registerElements","els","registerElement","OrdererService","parentY","parent","pos","text","top","getBoundingClientRect","innerText","move","moveTip","classList","remove","add","moveElement","draggable","left","transform","OrderRenderer","service","h","rowDefinitionByType","newVal","v","rowDefs","rowDefinitionRemoveByType","oldVal","isMobileDevice","test","navigator","userAgent","maxTouchPoints","WCAGPlugin","BasePlugin","revogrid","providers","super","setAttribute","addEventListener","columnProperties","cellProperties","args","role","wcagProps","columnProps","node","$attrs$","itemIndex","async","defaultPrevented","querySelector","HTMLElement","PluginService","internalPlugins","plugin","addUserPluginsAndCreate","element","plugins","prevPlugins","pluginData","pluginsToRemove","filter","prevPlugin","some","userPlugin","findIndex","createdPlugin","destroy","existingPlugin","find","getByClass","pluginClass","p","revoGridStyleCss","RevoGridStyle0","RevoGridComponent","extraElements","pluginService","viewport","isInited","Error","setDataAt","row","col","skipDataUpdate","columnProp","dataElement","updateCell","scrollToRow","scrollToCoordinate","scrollToColumnIndex","scrollToColumnProp","trimmedType","beforetrimmed","emit","aftertrimmed","setCellEdit","rowSource","timeout","colGroup","pin","setCellsFocus","cellStart","cellEnd","getSource","getVisibleSource","getSourceStore","getColumnStore","beforefocuslost","getPlugins","getContentSize","refreshExtraElements","extraService","mousedownHandle","screenX","getPropertyFromEvent","screenY","clickTrackForFocusClear","mouseupHandle","Math","abs","path","composedPath","shadowRoot","onRowDragStarted","dragStart","rowdragstart","preventDefault","orderService","onRowDragEnd","onRowOrderChange","onRowDrag","onRowMouseMove","onCellEdit","beforeedit","afteredit","onRangeEdit","beforerangeedit","onRangeChanged","beforeange","beforerange","beforeFill","beforeautofill","onRowDropped","roworderchanged","onHeaderClick","headerclick","originalEvent","onCellFocus","beforecellfocus","canFocus","columnTypesChanged","columnChanged","_prevVal","__watchName","init","columnGather","beforeSetEvent","beforecolumnsset","beforeApplyEvent","beforecolumnapplied","aftercolumnsset","disableVirtualXChanged","prevVal","rowSizeChanged","originItemSize","rowDefChanged","rowDefinitions","themeChanged","__","themeService","colSize","afterthemechanged","dataSourceChanged","watchName","beforesourceset","beforeanysource","newSource","aftersourceset","afteranysource","disableVirtualYChanged","after","before","_watchName","forceUpdate","vals","oldVals","beforerowdefinition","newRows","sourceLength","trimmedRowsChanged","groupingChanged","GroupingRowPlugin","applyStretch","isStretch","getPluginData","stretch","StretchColumn","isStretchPlugin","applyFilter","filterconfigchanged","applySorting","sortingconfigchanged","rowHeadersChange","rowHeaders","rowheaderschanged","registerOutsideVNodes","additionalDataChanged","additionaldatachanged","pluginsChanged","setPlugins","removePlugins","setCorePlugins","accessible","autoSizeColumn","AutoSizeColumnPlugin","FilterPlugin","exporting","ExportFilePlugin","SortingPlugin","canMoveColumns","ColumnMovePlugin","selection","connectedCallback","created","componentWillLoad","contentsizechanged","SelectionStoreConnector","registerVNode","pinnedTopSource","pinnedBottomSource","trimmedRows","viewportscroll","aftergridinit","componentWillRender","beforegridrender","Promise","all","jobsBeforeRender","componentDidRender","aftergridrender","render","aftercolumnresize","viewportSections","anyView","additionalData","height","rowClass","rowHeaderColumn","onScrollview","onRef","isMobile","viewPortHtml","view","headerProperties","canResize","readonly","columnFilter","dataViews","slot","dataView","onSelectall","selectAll","editors","range","useClipboard","applyChangesOnClose","applyOnClose","onBeforenextvpfocus","beforeNextFocusCell","onCanceledit","onSetedit","beforeeditstart","DATA_SLOT","name","dimensionRow","dataStore","focusTemplate","onScrollviewport","onScrollviewportsilent","typeRow","typeCol","Host","hideAttribution","onClick","currentTarget","target","viewportStore","dimensionStore","onScrollvirtual","nodes","disconnectedCallback"],"sources":["src/themeManager/theme.compact.ts","src/themeManager/theme.default.ts","src/themeManager/theme.material.ts","src/themeManager/theme.service.ts","src/services/column.data.provider.ts","src/services/data.provider.ts","src/services/dimension.provider.ts","src/services/viewport.provider.ts","src/components/revoGrid/viewport.service.ts","src/components/revoGrid/viewport.scrolling.service.ts","src/components/order/order-renderer.tsx","src/components/revoGrid/grid.helpers.ts","src/utils/mobile.ts","src/plugins/wcag/index.ts","src/components/revoGrid/plugin.service.ts","src/components/revoGrid/revo-grid-style.scss?tag=revo-grid","src/components/revoGrid/revo-grid.tsx"],"sourcesContent":["import { ThemePackage } from '../types/theme';\n\nexport class ThemeCompact implements ThemePackage {\n  defaultRowSize = 32;\n}\n","import { ThemePackage } from '../types/theme';\n\nexport class ThemeDefault implements ThemePackage {\n  defaultRowSize = 27;\n}\n","import { ThemePackage } from '../types/theme';\n\nexport class ThemeMaterial implements ThemePackage {\n  defaultRowSize = 42;\n}\n","import type { Theme, ThemeConfig, ThemePackage } from '../types/theme';\nimport { ThemeCompact } from './theme.compact';\nimport { ThemeDefault } from './theme.default';\nimport { ThemeMaterial } from './theme.material';\n\nexport const DEFAULT_THEME = 'default';\n\nexport const allowedThemes: Theme[] = [\n  DEFAULT_THEME,\n  'material',\n  'compact',\n  'darkMaterial',\n  'darkCompact',\n];\nexport default class ThemeService {\n  private currentTheme: ThemePackage;\n  private customRowSize = 0;\n\n  get theme() {\n    return this.currentTheme;\n  }\n\n  get rowSize() {\n    return this.customRowSize || this.currentTheme.defaultRowSize;\n  }\n\n  set rowSize(size: number) {\n    this.customRowSize = size;\n  }\n\n  constructor(cfg: ThemeConfig) {\n    this.customRowSize = cfg.rowSize;\n    this.register('default');\n  }\n\n  register(theme: Theme) {\n    const parsedTheme = getTheme(theme);\n    switch (parsedTheme) {\n      case 'material':\n      case 'darkMaterial':\n        this.currentTheme = new ThemeMaterial();\n        break;\n      case 'compact':\n      case 'darkCompact':\n        this.currentTheme = new ThemeCompact();\n        break;\n      default:\n        this.currentTheme = new ThemeDefault();\n        break;\n    }\n  }\n}\n\n\nexport function getTheme(theme?: string | null): Theme {\n  if (theme && allowedThemes.indexOf(theme as Theme) > -1) {\n    return theme as Theme;\n  }\n  return DEFAULT_THEME;\n}","import reduce from 'lodash/reduce';\nimport each from 'lodash/each';\n\nimport {\n  columnTypes,\n  DataStore,\n  getSourceItem,\n  getSourceItemVirtualIndexByProp,\n  Groups,\n  setSourceByPhysicalIndex,\n  setSourceByVirtualIndex,\n} from '@store';\nimport type {\n  ColumnProp,\n  ColumnRegular,\n  DimensionCols,\n} from '@type';\nimport { ColumnCollection, getColumnType } from '../utils/column.utils';\n\nexport type ColumnDataSources = Record<\n  DimensionCols,\n  DataStore<ColumnRegular, DimensionCols>\n>;\ntype Sorting = Record<ColumnProp, ColumnRegular>;\ntype SortingOrder = Record<ColumnProp, 'asc' | 'desc' | undefined>;\n\nexport default class ColumnDataProvider {\n  readonly dataSources: ColumnDataSources;\n  sorting: Sorting | null = null;\n  collection: ColumnCollection | null = null;\n\n  get order() {\n    const order: SortingOrder = {};\n    const sorting = this.sorting;\n    if (sorting) {\n      Object.keys(sorting).forEach(prop => {\n        order[prop] = sorting[prop].order;\n      });\n    }\n    return order;\n  }\n\n  get stores() {\n    return this.dataSources;\n  }\n  constructor() {\n    this.dataSources = columnTypes.reduce(\n      (sources: ColumnDataSources, k: DimensionCols) => {\n        sources[k] = new DataStore(k);\n        return sources;\n      },\n      {} as ColumnDataSources,\n    );\n  }\n\n  column(c: number, type: DimensionCols = 'rgCol'): ColumnRegular | undefined {\n    return this.getColumn(c, type);\n  }\n\n  getColumn(\n    virtualIndex: number,\n    type: DimensionCols,\n  ): ColumnRegular | undefined {\n    return getSourceItem(this.dataSources[type].store, virtualIndex);\n  }\n\n  getRawColumns(): Record<DimensionCols, ColumnRegular[]> {\n    return reduce(\n      this.dataSources,\n      (\n        result: Record<DimensionCols, ColumnRegular[]>,\n        item,\n        type: DimensionCols,\n      ) => {\n        result[type] = item.store.get('source');\n        return result;\n      },\n      {\n        rgCol: [],\n        colPinStart: [],\n        colPinEnd: [],\n      },\n    );\n  }\n\n  getColumns(type: DimensionCols | 'all' = 'all'): ColumnRegular[] {\n    const columnsByType = this.getRawColumns();\n    if (type !== 'all') {\n      return columnsByType[type];\n    }\n    return columnTypes.reduce((r: ColumnRegular[], t) => [...r, ...columnsByType[t]], []);\n  }\n\n  getColumnIndexByProp(prop: ColumnProp, type: DimensionCols): number {\n    return getSourceItemVirtualIndexByProp(this.dataSources[type].store, prop);\n  }\n\n  getColumnByProp(prop: ColumnProp) {\n    return this.collection?.columnByProp[prop];\n  }\n\n  refreshByType(type: DimensionCols) {\n    this.dataSources[type].refresh();\n  }\n\n  /**\n   * Main method to set columns\n   */\n  setColumns(data: ColumnCollection): ColumnCollection {\n    columnTypes.forEach(k => {\n      // set columns data\n      this.dataSources[k].updateData(data.columns[k], {\n        // max depth level\n        depth: data.maxLevel,\n\n        // groups\n        groups: data.columnGrouping[k].reduce((res: Groups, g) => {\n          if (!res[g.level]) {\n            res[g.level] = [];\n          }\n          res[g.level].push(g);\n          return res;\n        }, {}),\n      });\n    });\n    this.sorting = data.sort;\n    this.collection = data;\n    return data;\n  }\n\n  /**\n   * Used in plugins\n   * Modify columns in store\n   */\n  updateColumns(updatedColumns: ColumnRegular[]) {\n    // collect column by type and propert\n    const columnByKey = updatedColumns.reduce(\n      (\n        res: Partial<Record<DimensionCols, Record<ColumnProp, ColumnRegular>>>,\n        c,\n      ) => {\n        const type = getColumnType(c);\n        if (!res[type]) {\n          res[type] = {};\n        }\n        res[type][c.prop] = c;\n        return res;\n      },\n      {},\n    );\n\n    // find indexes in source\n    const colByIndex: Partial<\n      Record<DimensionCols, Record<number, ColumnRegular>>\n    > = {};\n    for (const t in columnByKey) {\n      if (!columnByKey.hasOwnProperty(t)) {\n        continue;\n      }\n      const type = t as DimensionCols;\n      const colsToUpdate = columnByKey[type];\n      const sourceItems = this.dataSources[type].store.get('source');\n      colByIndex[type] = {};\n      for (let i = 0; i < sourceItems.length; i++) {\n        const column = sourceItems[i];\n        const colToUpdateIfExists = colsToUpdate?.[column.prop];\n\n        // update column if exists in source\n        if (colToUpdateIfExists) {\n          colByIndex[type][i] = colToUpdateIfExists;\n        }\n      }\n    }\n    for (const t in colByIndex) {\n      if (!colByIndex.hasOwnProperty(t)) {\n        continue;\n      }\n      const type = t as DimensionCols;\n      setSourceByPhysicalIndex(\n        this.dataSources[type].store,\n        colByIndex[type] || {},\n      );\n    }\n  }\n\n  updateColumn(column: ColumnRegular, index: number) {\n    const type = getColumnType(column);\n    setSourceByVirtualIndex(this.dataSources[type].store, { [index]: column });\n  }\n\n  updateColumnSorting(\n    column: ColumnRegular,\n    index: number,\n    sorting: 'asc' | 'desc' | undefined,\n    additive: boolean,\n  ): ColumnRegular {\n    if (!additive) {\n      this.clearSorting();\n    }\n    column.order = sorting;\n    if (!this.sorting) {\n      this.sorting = {};\n    }\n    this.sorting[column.prop] = column;\n    this.updateColumn(column, index);\n    return column;\n  }\n\n  clearSorting() {\n    const types = reduce(\n      this.sorting,\n      (r: { [key in Partial<DimensionCols>]: boolean }, c: ColumnRegular) => {\n        const k = getColumnType(c);\n        r[k] = true;\n        return r;\n      },\n      {} as { [key in Partial<DimensionCols>]: boolean },\n    );\n    each(types, (_, type: DimensionCols) => {\n      const cols = this.dataSources[type].store.get('source');\n      each(cols, (c: ColumnRegular) => (c.order = undefined));\n      this.dataSources[type].setData({ source: [...cols] });\n    });\n\n    this.sorting = {};\n  }\n}\n","import reduce from 'lodash/reduce';\n\nimport {\n  isRowType,\n  rowTypes,\n  DataStore,\n  getSourceItem,\n  getVisibleSourceItem,\n  Groups,\n  Trimmed,\n} from '@store';\nimport DimensionProvider from './dimension.provider';\nimport type { GroupLabelTemplateFunc } from '../plugins/groupingRow/grouping.row.types';\nimport type {\n  DataLookup,\n  DimensionRows,\n  DataType,\n  BeforeSaveDataDetails,\n} from '@type';\n\nexport type RowDataSources = {\n  [T in DimensionRows]: DataStore<DataType, DimensionRows>;\n};\n\n/**\n * Data source provider\n * \n * @dependsOn DimensionProvider\n */\n\nexport class DataProvider {\n  public readonly stores: RowDataSources;\n  constructor(private dimensionProvider: DimensionProvider) {\n    this.stores = reduce(\n      rowTypes,\n      (sources: Partial<RowDataSources>, k: DimensionRows) => {\n        sources[k] = new DataStore(k);\n        return sources;\n      },\n      {},\n    ) as RowDataSources;\n  }\n\n  setData(\n    data: DataType[],\n    type: DimensionRows = 'rgRow',\n    disableVirtualRows = false,\n    grouping?: {\n      depth: number;\n      groups?: Groups;\n      customRenderer?: GroupLabelTemplateFunc;\n    },\n    silent = false,\n  ): DataType[] {\n    // set rgRow data\n    this.stores[type].updateData([...data], grouping, silent);\n\n    // for pinned row no need virtual data\n    const noVirtual = type !== 'rgRow' || disableVirtualRows;\n    this.dimensionProvider.setData(data.length, type, noVirtual);\n    return data;\n  }\n\n  getModel(virtualIndex: number, type: DimensionRows = 'rgRow') {\n    const store = this.stores[type].store;\n    return getSourceItem(store, virtualIndex);\n  }\n\n  changeOrder({ rowType = 'rgRow', from, to }: { rowType: DimensionRows, from: number; to: number }) {\n    const storeService = this.stores[rowType];\n\n    // take currently visible row indexes\n    const newItemsOrder = [...storeService.store.get('proxyItems')];\n    const prevItems = storeService.store.get('items');\n\n    // take out\n    const toMove = newItemsOrder.splice(\n      newItemsOrder.indexOf(prevItems[from]), // get index in proxy\n      1\n    );\n    // insert before\n    newItemsOrder.splice(\n      newItemsOrder.indexOf(prevItems[to]),  // get index in proxy\n      0,\n      ...toMove\n    );\n    storeService.setData({\n      proxyItems: newItemsOrder,\n    });\n\n    // take currently visible row indexes\n    const newItems = storeService.store.get('items');\n    this.dimensionProvider.updateSizesPositionByNewDataIndexes(\n      rowType,\n      newItems,\n      prevItems\n    );\n  }\n\n  setCellData(\n    { type, rowIndex, prop, val }: Pick<BeforeSaveDataDetails, 'type' | 'rowIndex' | 'prop' | 'val'>, \n    mutate = true,\n  ) {\n    const model = this.getModel(rowIndex, type);\n    model[prop] = val;\n    this.stores[type].setSourceData({ [rowIndex]: model }, mutate);\n  }\n\n  setRangeData(data: DataLookup, type: DimensionRows) {\n    const items: Record<number, DataType> = {};\n    for (let rowIndex in data) {\n      const oldModel = (items[rowIndex] = getSourceItem(\n        this.stores[type].store,\n        parseInt(rowIndex, 10),\n      ));\n      if (!oldModel) {\n        continue;\n      }\n      for (let prop in data[rowIndex]) {\n        oldModel[prop] = data[rowIndex][prop];\n      }\n    }\n    this.stores[type].setSourceData(items);\n  }\n\n  refresh(type: DimensionRows | 'all' = 'all') {\n    if (isRowType(type)) {\n      this.refreshItems(type);\n    }\n    rowTypes.forEach((t: DimensionRows) => this.refreshItems(t));\n  }\n\n  refreshItems(type: DimensionRows = 'rgRow') {\n    const items = this.stores[type].store.get('items');\n    this.stores[type].setData({ items: [...items] });\n  }\n\n  setGrouping({ depth }: { depth: number }, type: DimensionRows = 'rgRow') {\n    this.stores[type].setData({ groupingDepth: depth });\n  }\n\n  setTrimmed(trimmed: Trimmed, type: DimensionRows = 'rgRow') {\n    const store = this.stores[type];\n    store.addTrimmed(trimmed);\n    this.dimensionProvider.setTrimmed(trimmed, type);\n    if (type === 'rgRow') {\n      this.dimensionProvider.setData(\n        getVisibleSourceItem(store.store).length,\n        type,\n      );\n    }\n  }\n}\n","import reduce from 'lodash/reduce';\nimport debounce from 'lodash/debounce';\nimport ViewportProvider from './viewport.provider';\nimport { RESIZE_INTERVAL } from '../utils/consts';\n\nimport {\n  columnTypes,\n  rowTypes,\n  getItemByIndex,\n  DimensionStore,\n  DimensionStoreCollection,\n  gatherTrimmedItems,\n  Trimmed,\n} from '@store';\nimport type {\n  DimensionCols,\n  DimensionType,\n  MultiDimensionType,\n  ColumnRegular,\n  DimensionSettingsState,\n  ViewPortScrollEvent,\n  ViewSettingSizeProp,\n  ViewportState,\n} from '@type';\nimport { getColumnSizes } from '../utils/column.utils';\n\nexport type DimensionConfig = {\n  realSizeChanged(k: MultiDimensionType): void;\n};\n/**\n * Dimension provider\n * Stores dimension information and custom sizes\n * \n * @dependsOn ViewportProvider\n */\nexport default class DimensionProvider {\n  readonly stores: DimensionStoreCollection;\n  constructor(\n    private viewports: ViewportProvider,\n    config: DimensionConfig,\n  ) {\n    const sizeChanged = debounce(\n      (k: MultiDimensionType) => config.realSizeChanged(k),\n      RESIZE_INTERVAL,\n    );\n    this.stores = reduce(\n      [...rowTypes, ...columnTypes],\n      (sources: Partial<DimensionStoreCollection>, t: MultiDimensionType) => {\n        sources[t] = new DimensionStore(t);\n        sources[t].store.onChange('realSize', () => sizeChanged(t));\n        return sources;\n      },\n      {},\n    ) as DimensionStoreCollection;\n  }\n\n  /**\n   * Clear old sizes from dimension and viewports\n   * @param type - dimension type\n   * @param count - count of items\n   */\n  clearSize(t: MultiDimensionType, count: number) {\n    this.stores[t].drop();\n    // after we done with drop trigger viewport recalculaction\n    this.viewports.stores[t].setOriginalSizes(\n      this.stores[t].store.get('originItemSize'),\n    );\n    this.setItemCount(count, t);\n  }\n\n  /**\n   * Apply new custom sizes to dimension and view port\n   * @param type - dimension type\n   * @param sizes - new custom sizes\n   * @param keepOld - keep old sizes merge new with old\n   */\n  setCustomSizes(\n    type: MultiDimensionType,\n    sizes: ViewSettingSizeProp,\n    keepOld = false,\n  ) {\n    let newSizes = sizes;\n    if (keepOld) {\n      const oldSizes = this.stores[type].store.get('sizes');\n      newSizes = {\n        ...oldSizes,\n        ...sizes,\n      };\n    }\n    this.stores[type].setDimensionSize(newSizes);\n    this.setViewPortCoordinate({\n      coordinate: this.viewports.stores[type].lastCoordinate,\n      type,\n      force: true,\n    });\n  }\n\n  setItemCount(realCount: number, type: MultiDimensionType) {\n    this.viewports.stores[type].setViewport({ realCount });\n    this.stores[type].setStore({ count: realCount });\n  }\n\n  /**\n   * Apply trimmed items\n   * @param trimmed - trimmed items\n   * @param type\n   */\n  setTrimmed(trimmed: Trimmed, type: MultiDimensionType) {\n    const allTrimmed = gatherTrimmedItems(trimmed);\n    const dimStoreType = this.stores[type];\n    dimStoreType.setStore({ trimmed: allTrimmed });\n    this.setViewPortCoordinate({\n      coordinate: this.viewports.stores[type].lastCoordinate,\n      type,\n      force: true,\n    });\n  }\n\n  /**\n   * Sets dimension data and viewport coordinate\n   * @param itemCount\n   * @param type - dimension type\n   * @param noVirtual - disable virtual data\n   */\n  setData(itemCount: number, type: MultiDimensionType, noVirtual = false) {\n    this.setItemCount(itemCount, type);\n\n    // Virtualization will get disabled\n    if (noVirtual) {\n      const dimension = this.stores[type].getCurrentState();\n      this.viewports.stores[type].setViewport({\n        virtualSize: dimension.realSize,\n      });\n    }\n    this.setViewPortCoordinate({\n      coordinate: this.viewports.stores[type].lastCoordinate,\n      type,\n    });\n  }\n\n  /**\n   * Applies new columns to the dimension provider\n   * @param columns - new columns data\n   * @param disableVirtualX - disable virtual data for X axis\n   */\n  applyNewColumns(\n    columns: Record<DimensionCols, ColumnRegular[]>,\n    disableVirtualX: boolean,\n    keepOld = false,\n  ) {\n    // Apply new columns to dimension provider\n    for (let type of columnTypes) {\n      if (!keepOld) {\n        // Clear existing data in the dimension provider\n        this.stores[type].drop();\n      }\n\n      // Get the new columns for the current type\n      const items = columns[type];\n\n      // Determine if virtual data should be disabled for the current type\n      const noVirtual = type !== 'rgCol' || disableVirtualX;\n\n      // Set the items count in the dimension provider\n      this.stores[type].setStore({ count: items.length });\n\n      // Set the custom sizes for the columns\n      const newSizes = getColumnSizes(items);\n      this.stores[type].setDimensionSize(newSizes);\n\n      // Update the viewport with new data\n      const vpUpdate: Partial<ViewportState> = {\n        // This triggers drop on realCount change\n        realCount: items.length,\n      };\n\n      // If virtual data is disabled, set the virtual size to the real size\n      if (noVirtual) {\n        vpUpdate.virtualSize = this.stores[type].getCurrentState().realSize;\n      }\n\n      // Update the viewport\n      this.viewports.stores[type].setViewport(vpUpdate);\n      this.setViewPortCoordinate({\n        coordinate: this.viewports.stores[type].lastCoordinate,\n        type,\n      });\n    }\n  }\n\n  /**\n   * Gets the full size of the grid by summing up the sizes of all dimensions\n   * Goes through all dimensions columnTypes (x) and rowTypes (y) and sums up their sizes\n   */\n\n  getFullSize(): { x: number; y: number } {\n    let x = 0;\n    let y = 0;\n    for (let type of columnTypes) {\n      x += this.stores[type]?.store.get('realSize') || 0;\n    }\n    for (let type of rowTypes) {\n      y += this.stores[type]?.store.get('realSize') || 0;\n    }\n    return { y, x };\n  }\n\n  setViewPortCoordinate({\n    coordinate,\n    type,\n    force = false,\n  }: {\n    coordinate: number;\n    type: MultiDimensionType;\n    force?: boolean;\n  }) {\n    const dimension = this.stores[type].getCurrentState();\n    this.viewports.stores[type].setViewPortCoordinate(\n      coordinate,\n      dimension,\n      force,\n    );\n  }\n\n  getViewPortPos(e: ViewPortScrollEvent): number {\n    const dimension = this.stores[e.dimension].getCurrentState();\n    const item = getItemByIndex(dimension, e.coordinate);\n\n    return item.start;\n  }\n\n  setSettings(\n    data: Partial<DimensionSettingsState>,\n    dimensionType: DimensionType,\n  ) {\n    let stores: MultiDimensionType[] = [];\n    switch (dimensionType) {\n      case 'rgCol':\n        stores = columnTypes;\n        break;\n      case 'rgRow':\n        stores = rowTypes;\n        break;\n    }\n    for (let s of stores) {\n      this.stores[s].setStore(data);\n    }\n  }\n\n  updateSizesPositionByNewDataIndexes(\n    type: MultiDimensionType,\n    newItemsOrder: number[],\n    prevItemsOrder: number[] = [],\n  ) {\n    // Move custom sizes to new order\n    this.stores[type].updateSizesPositionByIndexes(\n      newItemsOrder,\n      prevItemsOrder,\n    );\n    this.setViewPortCoordinate({\n      coordinate: this.viewports.stores[type].lastCoordinate,\n      type,\n      force: true,\n    });\n  }\n}\n","import reduce from 'lodash/reduce';\nimport { columnTypes, rowTypes, type ViewportStoreCollection, ViewportStore } from '@store';\nimport type { MultiDimensionType, ViewportState } from '@type';\n\n\nexport default class ViewportProvider {\n  readonly stores: ViewportStoreCollection;\n  constructor() {\n    this.stores = reduce(\n      [...rowTypes, ...columnTypes],\n      (sources: Partial<ViewportStoreCollection>, k: MultiDimensionType) => {\n        sources[k] = new ViewportStore(k);\n        return sources;\n      },\n      {},\n    ) as ViewportStoreCollection;\n  }\n\n  setViewport(type: MultiDimensionType, data: Partial<ViewportState>) {\n    this.stores[type].setViewport(data);\n  }\n}\n","import DimensionProvider from '../../services/dimension.provider';\nimport { type SelectionStoreConnector, EMPTY_INDEX } from '../../services/selection.store.connector';\nimport ViewportProvider from '../../services/viewport.provider';\nimport { columnTypes, DSourceState, getSourceItem, getVisibleSourceItem, rowTypes } from '@store';\nimport { OrdererService } from '../order/order-renderer';\nimport GridScrollingService from './viewport.scrolling.service';\nimport { CONTENT_SLOT, FOOTER_SLOT, HEADER_SLOT, viewportDataPartition, VPPartition } from './viewport.helpers';\n\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport type {\n  Cell,\n  ColumnRegular,\n  DimensionCols,\n  DimensionRows,\n  HeaderProperties,\n  RangeArea,\n  SlotType,\n  ViewportColumn,\n  ViewportData,\n  ViewportProperties,\n  ViewportProps,\n  ViewPortResizeEvent,\n  ViewportState,\n  ViewSettingSizeProp,\n} from '@type';\nimport { Observable } from '../../utils';\n\nexport type ResizeDetails = { [index: number]: ColumnRegular };\ntype Config = {\n  columnProvider: ColumnDataProvider;\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  viewportProvider: ViewportProvider;\n  scrollingService: GridScrollingService;\n  orderService: OrdererService;\n  selectionStoreConnector: SelectionStoreConnector;\n\n  disableVirtualX?: boolean;\n  disableVirtualY?: boolean;\n\n  resize(r: ResizeDetails): void;\n};\n\nexport type FocusedData = {\n  model: any;\n  cell: Cell;\n  colType: DimensionCols;\n  rowType: DimensionRows;\n  column?: ColumnRegular;\n};\n\n/** Collect Column data */\nfunction gatherColumnData(data: ViewportColumn) {\n  const colDimension = data.dimensions[data.colType].store;\n  const realWidth = colDimension.get('realSize');\n\n  const prop: ViewportProperties = {\n    contentWidth: realWidth,\n    class: data.colType,\n    contentHeight: data.contentHeight,\n    key: data.colType,\n    colType: data.colType,\n    onResizeviewport: data.onResizeviewport,\n    // set viewport size to real size\n    style: data.fixWidth ? { minWidth: `${realWidth}px` } : undefined,\n  };\n\n  const headerProp: HeaderProperties = {\n    colData: getVisibleSourceItem(data.colStore),\n    dimensionCol: colDimension,\n    type: data.colType,\n    groups: data.colStore.get('groups'),\n    groupingDepth: data.colStore.get('groupingDepth'),\n    resizeHandler: data.colType === 'colPinEnd' ? ['l'] : undefined,\n    onHeaderresize: data.onHeaderresize,\n  };\n\n  return {\n    prop,\n    type: data.colType,\n    position: data.position,\n    headerProp,\n    viewportCol: data.viewports[data.colType].store,\n  };\n}\n\nexport default class ViewportService {\n  readonly columns: ViewportProps[];\n  constructor(\n    private config: Config,\n    contentHeight: number,\n  ) {\n    this.config.selectionStoreConnector?.beforeUpdate();\n\n    // ----------- Handle columns ----------- //\n\n    // Transform data from stores and apply it to different components\n    const columns: ViewportProps[] = [];\n    let x = 0; // we increase x only if column present\n    columnTypes.forEach(val => {\n      const colStore = config.columnProvider.stores[val].store;\n      // only columns that have data show\n      if (!colStore.get('items').length) {\n        return;\n      }\n      const column: ViewportColumn = {\n        colType: val,\n        position: { x, y: 1 },\n\n        contentHeight,\n        // only central column has dynamic width\n        fixWidth: val !== 'rgCol',\n\n        viewports: config.viewportProvider.stores,\n        dimensions: config.dimensionProvider.stores,\n        rowStores: config.dataProvider.stores,\n\n        colStore,\n        onHeaderresize: e => this.onColumnResize(val, e, colStore),\n      };\n      if (val === 'rgCol') {\n        column.onResizeviewport = (e: CustomEvent<ViewPortResizeEvent>) => {\n          const vpState: Partial<ViewportState> = {\n            clientSize: e.detail.size,\n          };\n\n          // virtual size will be handled by dimension provider if disabled\n          if ((e.detail.dimension === 'rgRow' && !config.disableVirtualY)\n              || (e.detail.dimension === 'rgCol' && !config.disableVirtualX)) {\n                vpState.virtualSize = e.detail.size;\n          }\n          config.viewportProvider?.setViewport(e.detail.dimension, vpState);\n        };\n      }\n      const colData = gatherColumnData(column);\n      const columnSelectionStore = this.registerCol(colData.position.x, val);\n\n      // render per each column data collections vertically\n      const dataPorts = this.dataViewPort(column).reduce<ViewportData[]>(\n        (r, rgRow) => {\n          // register selection store for Segment\n          const segmentSelection = this.registerSegment(rgRow.position);\n          segmentSelection.setLastCell(rgRow.lastCell);\n\n          // register selection store for Row\n          const rowSelectionStore = this.registerRow(\n            rgRow.position.y,\n            rgRow.type,\n          );\n          const rowDef: ViewportData = {\n            colType: val,\n            ...rgRow,\n            rowSelectionStore,\n            selectionStore: segmentSelection.store,\n            ref: (e) =>\n              config.selectionStoreConnector.registerSection(e),\n            onSetrange: e => {\n              segmentSelection.setRangeArea(e.detail);\n            },\n            onSettemprange: e => segmentSelection.setTempArea(e.detail),\n            onFocuscell: e => {\n              // todo: multi focus\n              segmentSelection.clearFocus();\n              config.selectionStoreConnector.focus(segmentSelection, e.detail);\n            },\n          };\n          r.push(rowDef);\n          return r;\n        },\n        [],\n      );\n      columns.push({\n        ...colData,\n        columnSelectionStore,\n        dataPorts,\n      });\n      x++;\n    });\n    this.columns = columns;\n    // ----------- Handle columns end ----------- //\n\n    this.config.scrollingService?.unregister();\n  }\n\n  private onColumnResize(\n    type: DimensionCols,\n    { detail }: CustomEvent<ViewSettingSizeProp>,\n    store: Observable<DSourceState<ColumnRegular, DimensionCols>>,\n  ) {\n    // apply to dimension provider\n    this.config.dimensionProvider?.setCustomSizes(type, detail, true);\n\n    // set resize event\n    const changedItems: ResizeDetails = {};\n    for (const [i, size] of Object.entries(detail || {})) {\n      const virtualIndex = parseInt(i, 10);\n      const item = getSourceItem(store, virtualIndex);\n      if (item) {\n        changedItems[virtualIndex] = { ...item, size };\n      }\n    }\n    this.config.resize(changedItems);\n  }\n\n  /** register selection store for Segment */\n  private registerSegment(position: Cell) {\n    return this.config.selectionStoreConnector.register(position);\n  }\n\n  /** register selection store for Row */\n  private registerRow(y: number, type: DimensionRows) {\n    return this.config.selectionStoreConnector.registerRow(y, type).store;\n  }\n\n  /** register selection store for Column */\n  private registerCol(x: number, type: DimensionCols) {\n    return this.config.selectionStoreConnector.registerColumn(x, type).store;\n  }\n\n  /** Collect Row data */\n  private dataViewPort(data: ViewportColumn) {\n    const slots: { [key in DimensionRows]: SlotType } = {\n      rowPinStart: HEADER_SLOT,\n      rgRow: CONTENT_SLOT,\n      rowPinEnd: FOOTER_SLOT,\n    };\n\n    // y position for selection\n    let y = 0;\n    return rowTypes.reduce((result: VPPartition[], type) => {\n      // filter out empty sources, we still need to return source to keep slot working\n      const isPresent =\n        data.viewports[type].store.get('realCount') || type === 'rgRow';\n      const rgCol = {\n        ...data,\n        position: { ...data.position, y: isPresent ? y : EMPTY_INDEX },\n      };\n      const partition = viewportDataPartition(\n        rgCol,\n        type,\n        slots[type],\n        type !== 'rgRow', // is fixed row\n      );\n      result.push(partition);\n      if (isPresent) {\n        y++;\n      }\n      return result;\n    }, []);\n  }\n\n  scrollToCell(cell: Partial<Cell>) {\n    for (let key in cell) {\n      const coordinate = cell[key as keyof Cell];\n      if (typeof coordinate === 'number') {\n        this.config.scrollingService.proxyScroll({\n          dimension: key === 'x' ? 'rgCol' : 'rgRow',\n          coordinate,\n        });\n      }\n    }\n  }\n\n  /**\n   * Clear current grid focus\n   */\n  clearFocused() {\n    this.config.selectionStoreConnector.clearAll();\n  }\n\n  clearEdit() {\n    this.config.selectionStoreConnector.setEdit(false);\n  }\n\n  /**\n   * Collect focused element data\n   */\n  getFocused(): FocusedData | null {\n    const focused = this.config.selectionStoreConnector.focusedStore;\n    if (!focused) {\n      return null;\n    }\n    // get column data\n    const colType =\n      this.config.selectionStoreConnector.storesXToType[focused.position.x];\n    const column = this.config.columnProvider.getColumn(\n      focused.cell.x,\n      colType,\n    );\n\n    // get row data\n    const rowType =\n      this.config.selectionStoreConnector.storesYToType[focused.position.y];\n    const model = this.config.dataProvider.getModel(focused.cell.y, rowType);\n    return {\n      column,\n      model,\n      cell: focused.cell,\n      colType,\n      rowType,\n    };\n  }\n\n  getStoreCoordinateByType(colType: DimensionCols, rowType: DimensionRows): Cell | undefined {\n    const stores = this.config.selectionStoreConnector.storesByType;\n    if (typeof stores[colType] === 'undefined' || typeof stores[rowType] === 'undefined') {\n      return;\n    }\n    return {\n      x: stores[colType],\n      y: stores[rowType],\n    };\n  }\n\n  setFocus(colType: string, rowType: string, start: Cell, end: Cell) {\n    const coordinate = this.getStoreCoordinateByType(colType as DimensionCols, rowType as DimensionRows);\n    if (coordinate) {\n      this.config.selectionStoreConnector?.focusByCell(\n        coordinate,\n        start,\n        end,\n      );\n    }\n  }\n\n  getSelectedRange(): RangeArea | null | undefined {\n    return this.config.selectionStoreConnector.selectedRange;\n  }\n\n  setEdit(\n    rowIndex: number,\n    colIndex: number,\n    colType: DimensionCols,\n    rowType: DimensionRows,\n  ) {\n    const coordinate = this.getStoreCoordinateByType(colType as DimensionCols, rowType as DimensionRows);\n    if (coordinate) {\n      this.config.selectionStoreConnector?.setEditByCell(\n        coordinate,\n        { x: colIndex, y: rowIndex },\n      );\n    }\n  }\n}\n","import { columnTypes } from '@store';\nimport {\n  DimensionColPin,\n  ViewPortScrollEvent,\n  ElementsScroll,\n  ElementScroll,\n} from '@type';\n\nexport default class GridScrollingService {\n  private elements: ElementsScroll = {};\n  constructor(private setViewport: (e: ViewPortScrollEvent) => void) {}\n\n  async proxyScroll(e: ViewPortScrollEvent, key?: DimensionColPin | string) {\n    let newEventPromise: Promise<ViewPortScrollEvent | undefined> | undefined;\n    let event = e;\n    for (let elKey in this.elements) {\n      // skip\n      if (e.dimension === 'rgCol' && elKey === 'headerRow') {\n        continue;\n        // pinned column only\n      } else if (this.isPinnedColumn(key) && e.dimension === 'rgCol') {\n        if (elKey === key || !e.delta) {\n          continue;\n        }\n        for (let el of this.elements[elKey]) {\n          if (el.changeScroll) {\n            newEventPromise = el.changeScroll(e);\n          }\n        }\n      } else {\n        for (let el of this.elements[elKey]) {\n          await el.setScroll?.(e);\n        }\n      }\n    }\n    const newEvent = await newEventPromise;\n    if (newEvent) {\n      event = newEvent;\n    }\n    this.setViewport(event);\n  }\n\n  /**\n   * Silent scroll update for mobile devices when we have negative scroll top\n   */\n  async scrollSilentService(\n    e: ViewPortScrollEvent,\n    key?: DimensionColPin | string,\n  ) {\n    for (let elKey in this.elements) {\n      // skip same element update\n      if (elKey === key) {\n        continue;\n      }\n      if (\n        columnTypes.includes(key as DimensionColPin) &&\n        (elKey === 'headerRow' ||\n          columnTypes.includes(elKey as DimensionColPin))\n      ) {\n        for (let el of this.elements[elKey]) {\n          await el.changeScroll?.(e, true);\n        }\n        continue;\n      }\n    }\n  }\n\n  private isPinnedColumn(\n    key?: DimensionColPin | string,\n  ): key is DimensionColPin {\n    return !!key && ['colPinStart', 'colPinEnd'].indexOf(key) > -1;\n  }\n\n  registerElements(els: ElementsScroll) {\n    this.elements = els;\n  }\n\n  /**\n   * Register new element for farther scroll support\n   * @param el - can be null if holder removed\n   * @param key - element key\n   */\n  registerElement(el: ElementScroll | null | undefined, key: string) {\n    if (!this.elements[key]) {\n      this.elements[key] = [];\n    }\n    // new element added\n    if (el) {\n      this.elements[key].push(el);\n    } else if (this.elements[key]) {\n      // element removed\n      delete this.elements[key];\n    }\n  }\n\n  unregister() {\n    this.elements = {};\n  }\n}\n","import { h, type VNode } from '@stencil/core';\nimport { PositionItem } from '@type';\nimport { Cell } from '@type';\n\ntype Props = { ref: { (e: OrdererService): void } };\n\n/**\n * Draw drag\n */\nexport class OrdererService {\n  private parentY = 0;\n  el?: HTMLElement;\n  rgRow?: HTMLElement;\n  text?: HTMLElement;\n  draggable?: HTMLElement;\n\n  start(parent: HTMLElement, { pos, text, event }: { pos: PositionItem; text: string; event: MouseEvent }) {\n    const { top } = parent.getBoundingClientRect();\n    this.parentY = top;\n    if (this.text) {\n      this.text.innerText = text;\n    }\n    this.move(pos);\n    this.moveTip({ x: event.x, y: event.y });\n    this.el?.classList.remove('hidden');\n  }\n  end() {\n    this.el?.classList.add('hidden');\n  }\n  move(pos: PositionItem) {\n    this.moveElement(pos.end - this.parentY);\n  }\n  moveTip({ x, y }: Cell) {\n    if (!this.draggable) {\n      return;\n    }\n    this.draggable.style.left = `${x}px`;\n    this.draggable.style.top = `${y}px`;\n  }\n\n  private moveElement(y: number) {\n    if (!this.rgRow) {\n      return;\n    }\n    this.rgRow.style.transform = `translateY(${y}px)`;\n  }\n}\n\nconst OrderRenderer = ({ ref }: Props): VNode[] => {\n  const service = new OrdererService();\n  ref(service);\n  return (\n    <div class=\"draggable-wrapper hidden\" ref={e => (service.el = e)}>\n      <div class=\"draggable\" ref={el => (service.draggable = el)}>\n        <span class=\"revo-alt-icon\" />\n        <span ref={e => (service.text = e)} />\n      </div>\n      <div class=\"drag-position\" ref={e => (service.rgRow = e)} />\n    </div>\n  );\n};\nexport default OrderRenderer;\n","import { RowDefinition, DimensionRows } from '@type';\n\ntype Result = Partial<{\n  [T in DimensionRows]: { sizes?: Record<number, number>; };\n}>;\ntype RemoveResult = Partial<{\n  [T in DimensionRows]: number[];\n}>;\nexport const rowDefinitionByType = (newVal: RowDefinition[] = []) => {\n  const result: Result = {};\n  for (const v of newVal) {\n    let rowDefs = result[v.type];\n    if (!rowDefs) {\n      rowDefs = result[v.type] = {};\n    }\n    if (v.size) {\n      if (!rowDefs.sizes) {\n        rowDefs.sizes = {};\n      }\n      rowDefs.sizes[v.index] = v.size;\n    }\n  }\n  return result;\n};\n\nexport const rowDefinitionRemoveByType = (oldVal: RowDefinition[] = []) => {\n  const result: RemoveResult = {};\n  for (const v of oldVal) {\n    let rowDefs = result[v.type];\n    if (!rowDefs) {\n      rowDefs = result[v.type] = [];\n    }\n    if (v.size) {\n      rowDefs.push(v.index);\n    }\n  }\n  return result;\n};\n","export function isMobileDevice() {\n    return /Mobi/i.test(navigator.userAgent) || /Android/i.test(navigator.userAgent) || navigator.maxTouchPoints > 0;\n}\n","import { CellProps, PluginProviders } from '@type';\nimport { BasePlugin } from '../base.plugin';\nimport { ColumnCollection } from 'src/utils';\n\n/**\n * WCAG Plugin is responsible for enhancing the accessibility features of the RevoGrid component.\n * It ensures that the grid is fully compliant with Web Content Accessibility Guidelines (WCAG) 2.1.\n * This plugin should be the last plugin you add, as it modifies the grid's default behavior.\n *\n * The WCAG Plugin performs the following tasks:\n * - Sets the 'dir' attribute to 'ltr' for left-to-right text direction.\n * - Sets the 'role' attribute to 'treegrid' for treelike hierarchical structure.\n * - Sets the 'aria-keyshortcuts' attribute to 'Enter' and 'Esc' for keyboard shortcuts.\n * - Adds event listeners for keyboard navigation and editing.\n *\n * By default, the plugin adds ARIA roles and properties to the grid elements, providing semantic information\n * for assistive technologies. These roles include 'grid', 'row', and 'gridcell'. The plugin also sets\n * ARIA attributes such as 'aria-rowindex', 'aria-colindex', and 'aria-selected'.\n *\n * The WCAG Plugin ensures that the grid is fully functional and usable for users with various disabilities,\n * including visual impairments, deaf-blindness, and cognitive disabilities.\n *\n * Note: The WCAG Plugin should be added as the last plugin in the list of plugins, as it modifies the grid's\n * default behavior and may conflict with other plugins if added earlier.\n */\nexport class WCAGPlugin extends BasePlugin {\n  constructor(revogrid: HTMLRevoGridElement, providers: PluginProviders) {\n    super(revogrid, providers);\n\n    revogrid.setAttribute('dir', 'ltr');\n    revogrid.setAttribute('role', 'treegrid');\n    revogrid.setAttribute('aria-keyshortcuts', 'Enter');\n    revogrid.setAttribute('aria-multiselectable', 'true');\n    revogrid.setAttribute('tabindex', '0');\n\n    /**\n     * Before Columns Set Event\n     */\n    this.addEventListener(\n      'beforecolumnsset',\n      ({ detail }: CustomEvent<ColumnCollection>) => {\n        const columns = [\n          ...detail.columns.colPinStart,\n          ...detail.columns.rgCol,\n          ...detail.columns.colPinEnd,\n        ];\n\n        revogrid.setAttribute('aria-colcount', `${columns.length}`);\n\n        columns.forEach((column, index) => {\n          const { columnProperties, cellProperties } = column;\n\n          column.columnProperties = (...args) => {\n            const result = columnProperties?.(...args) || {};\n\n            result.role = 'columnheader';\n            result['aria-colindex'] = index;\n\n            return result;\n          };\n\n          column.cellProperties = (...args) => {\n            const wcagProps: CellProps = {\n              ['role']: 'gridcell',\n              ['aria-colindex']: index,\n              ['aria-rowindex']: args[0].rowIndex,\n              ['tabindex']: -1,\n            };\n            const columnProps: CellProps = cellProperties?.(...args) || {};\n\n            return {\n              ...wcagProps,\n              ...columnProps,\n            };\n          };\n        });\n      },\n    );\n\n    /**\n     * Before Row Set Event\n     */\n    this.addEventListener(\n      'beforesourceset',\n      ({\n        detail,\n      }: CustomEvent<HTMLRevoGridElementEventMap['beforesourceset']>) => {\n        revogrid.setAttribute('aria-rowcount', `${detail.source.length}`);\n      },\n    );\n    this.addEventListener(\n      'beforerowrender',\n      ({\n        detail,\n      }: CustomEvent<HTMLRevogrDataElementEventMap['beforerowrender']>) => {\n        detail.node.$attrs$ = {\n          ...detail.node.$attrs$,\n          role: 'row',\n          ['aria-rowindex']: detail.item.itemIndex,\n        };\n      },\n    );\n\n    // focuscell\n    this.addEventListener(\n      'afterfocus',\n      async (\n        e: CustomEvent<HTMLRevogrFocusElementEventMap['afterfocus']>,\n      ) => {\n        if (e.defaultPrevented) {\n          return;\n        }\n        const el = this.revogrid.querySelector(\n          `revogr-data[type=\"${e.detail.rowType}\"][col-type=\"${e.detail.colType}\"] [data-rgrow=\"${e.detail.rowIndex}\"][data-rgcol=\"${e.detail.colIndex}\"]`,\n        );\n        if (el instanceof HTMLElement) {\n          el.focus();\n        }\n      },\n    );\n  }\n}\n","import { PluginBaseComponent, PluginProviders, PluginServiceBase } from '@type';\nimport { GridPlugin } from 'src/plugins';\n\n/**\n * Plugin service\n * Manages plugins\n */\nexport class PluginService implements PluginServiceBase {\n  /**\n   * Plugins\n   * Define plugins collection\n   */\n  internalPlugins: PluginBaseComponent[] = [];\n\n  /**\n   * Get all plugins\n   */\n  get() {\n    return [...this.internalPlugins];\n  }\n\n  /**\n   * Add plugin to collection\n   */\n  add(plugin: PluginBaseComponent) {\n    this.internalPlugins.push(plugin);\n  }\n\n  /**\n   * Add user plugins and create\n   */\n  addUserPluginsAndCreate(\n    element: HTMLRevoGridElement,\n    plugins: GridPlugin[] = [],\n    prevPlugins?: GridPlugin[],\n    pluginData?: PluginProviders,\n  ) {\n    if (!pluginData) {\n      return;\n    }\n\n    // Step 1: Identify plugins to remove, compare new and old plugins\n    const pluginsToRemove =\n      prevPlugins?.filter(\n        prevPlugin => !plugins.some(userPlugin => userPlugin === prevPlugin),\n      ) || [];\n\n    // Step 2: Remove old plugins\n    pluginsToRemove.forEach(plugin => {\n      const index = this.internalPlugins.findIndex(\n        createdPlugin => createdPlugin instanceof plugin,\n      );\n      if (index !== -1) {\n        this.internalPlugins[index].destroy?.();\n        this.internalPlugins.splice(index, 1); // Remove the plugin\n      }\n    });\n\n    // Step 3: Register user plugins\n    plugins?.forEach(userPlugin => {\n      // check if plugin already exists, if so, skip\n      const existingPlugin = this.internalPlugins.find(\n        createdPlugin => createdPlugin instanceof userPlugin,\n      );\n      if (existingPlugin) {\n        return;\n      }\n      this.add(new userPlugin(element, pluginData));\n    });\n  }\n\n  /**\n   * Get plugin by class\n   */\n  getByClass<T extends PluginBaseComponent>(\n    pluginClass: new (...args: any[]) => T,\n  ): T | undefined {\n    return this.internalPlugins.find(p => p instanceof pluginClass) as\n      | T\n      | undefined;\n  }\n\n  /**\n   * Remove plugin\n   */\n  remove(plugin: PluginBaseComponent) {\n    const index = this.internalPlugins.indexOf(plugin);\n    if (index > -1) {\n      this.internalPlugins[index].destroy?.();\n      this.internalPlugins.splice(index, 1);\n    }\n  }\n\n  /**\n   * Remove all plugins\n   */\n\n  destroy() {\n    this.internalPlugins.forEach(p => p.destroy?.());\n    this.internalPlugins = [];\n  }\n}\n","@import './styles/revo-grid.mixin.scss';\n@import './styles/revo-grid.default.scss';\n@import './styles/revo-grid.material.scss';\n@import './styles/revo-grid.dark.material.scss';\n@import './styles/revo-grid.dark.compact.scss';\n@import './styles/revo-grid.compact.scss';\n\nrevo-grid {\n  display: block;\n  height: 100%;\n  /**\n  * In some cases the min-height is not enough for safari\n  * so setting up the grid  height works\n  */\n  min-height: 300px;\n  font-family: Helvetica, Arial, Sans-Serif, serif;\n  font-size: 14px;\n  position: relative;\n\n  @include noSelect;\n\n  .attribution {\n    $size: 4px;\n    $color: rgba(#266ae8, 0.9);\n\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 1000;\n    width: 0;\n    height: 0;\n    border-left: $size solid $color;\n    border-bottom: $size solid $color;\n    border-top: $size solid transparent;\n    border-right: $size solid transparent;\n    cursor: pointer;\n\n    .value {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      background-color: rgba(255, 255, 255, 0.9);\n      padding: 4px;\n      border-radius: 4px;\n      box-shadow: 0 1px 10px rgba(0, 0, 0, 0.2);\n      white-space: nowrap;\n      text-decoration: none;\n      color: black;\n      letter-spacing: 0.3px;\n      font-size: 11px;\n      opacity: 0;\n      width: $size;\n      overflow: hidden;\n      transition: opacity 0.5s ease-in-out, width 0.3s ease-in-out;\n    }\n\n    &:hover {\n      .value {\n        width: 63px;\n        opacity: 1;\n      }\n    }\n  }\n\n  &.column-draggable.column-drag-start {\n    &, * {\n      &:hover {\n        cursor: grabbing;\n      }\n    }\n  }\n\n  .footer-wrapper,\n  .header-wrapper {\n    width: 100%;\n\n    revogr-data {\n      z-index: 3;\n    }\n  }\n\n  revo-dropdown {\n    width: 100%;\n\n    .rv-dr-root {\n      max-height: 100%;\n    }\n    &.shrink label {\n      opacity: 0;\n    }\n  }\n\n  .viewports {\n    // max-height: 100%; // for safari\n    max-width: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    flex-grow: 1;\n  }\n\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n\n  .main-viewport {\n    flex-grow: 1;\n    height: 0;\n    display: flex;\n    justify-content: space-between;\n    flex-direction: row;\n  }\n\n  .draggable {\n    $s: 30px;\n    position: fixed;\n    height: $s;\n    line-height: $s;\n    background: #fff;\n    border-radius: 3px;\n    display: block;\n    z-index: 100;\n    margin-top: 5px;\n    margin-right: -20px;\n    box-shadow: 0 4px 20px 0 rgba(black, 0.15);\n    padding-left: 20px;\n    padding-right: 5px;\n\n    &.hidden {\n      display: none;\n    }\n\n    .revo-alt-icon {\n      $alt-icon-color: black;\n      background-color: $alt-icon-color;\n      position: absolute;\n      left: 5px;\n      top: 10px;\n    }\n  }\n\n  .draggable-wrapper {\n    &.hidden {\n      display: none;\n    }\n  }\n\n  .drag-position {\n    position: absolute;\n    left: 0;\n    right: 0;\n    height: 1px;\n    z-index: 2;\n    background: gray;\n    pointer-events: none;\n  }\n\n  .drag-position-y {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    z-index: 2;\n    background: gray;\n    pointer-events: none;\n  }\n\n  .drag-auto-scroll-y {\n    pointer-events: none;\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 50px;\n    width: 1px;\n  }\n\n  .clipboard {\n    position: absolute;\n    left: 0;\n    top: 0;\n  }\n\n  revogr-scroll-virtual {\n    position: relative;\n    &.vertical,\n    &.horizontal {\n      z-index: 3;\n    }\n  }\n}\n","import {\n  type VNode,\n  Component,\n  Prop,\n  h,\n  Watch,\n  Element,\n  Listen,\n  Event,\n  EventEmitter,\n  Method,\n  Host,\n} from '@stencil/core';\n\nimport type {\n  MultiDimensionType,\n  DimensionRows,\n  DimensionCols,\n  DimensionType,\n  DimensionTypeCol,\n  RowHeaders,\n  ColumnRegular,\n  ColumnGrouping,\n  DataType,\n  RowDefinition,\n  ColumnType,\n  FocusTemplateFunc,\n  PositionItem,\n  ColumnProp,\n  ViewPortScrollEvent,\n  InitialHeaderClick,\n  AllDimensionType,\n  Editors,\n  BeforeSaveDataDetails,\n  BeforeRangeSaveDataDetails,\n  Cell,\n  ChangedRange,\n  RangeArea,\n  AfterEditEvent,\n  Theme,\n  PluginBaseComponent,\n  HeaderProperties,\n  PluginProviders,\n  FocusAfterRenderEvent,\n  ExtraNodeFuncConfig,\n  RowDragStartDetails,\n} from '@type';\n\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport { DSourceState, getVisibleSourceItem, rowTypes } from '@store';\nimport DimensionProvider from '../../services/dimension.provider';\nimport ViewportProvider from '../../services/viewport.provider';\nimport ThemeService from '../../themeManager/theme.service';\nimport { timeout } from '../../utils';\nimport {\n  AutoSizeColumnPlugin,\n  type AutoSizeColumnConfig,\n} from '../../plugins/column.auto-size.plugin';\n\nimport {\n  FilterPlugin,\n} from '../../plugins/filter/filter.plugin';\nimport { SortingPlugin } from '../../plugins/sorting/sorting.plugin';\nimport { ExportFilePlugin } from '../../plugins/export/export.plugin';\nimport { DataInput } from '../../plugins/export/types';\nimport { GroupingRowPlugin } from '../../plugins/groupingRow/grouping.row.plugin';\nimport { GroupingOptions } from '../../plugins/groupingRow/grouping.row.types';\nimport ViewportService, { FocusedData } from './viewport.service';\nimport { DATA_SLOT, HEADER_SLOT } from './viewport.helpers';\nimport GridScrollingService from './viewport.scrolling.service';\nimport { SelectionStoreConnector } from '../../services/selection.store.connector';\nimport OrderRenderer, { OrdererService } from '../order/order-renderer';\nimport {\n  StretchColumn,\n  isStretchPlugin,\n} from '../../plugins/column.stretch.plugin';\nimport { rowDefinitionByType, rowDefinitionRemoveByType } from './grid.helpers';\nimport { ColumnMovePlugin } from '../../plugins/moveColumn/column.drag.plugin';\nimport { getPropertyFromEvent } from '../../utils/events';\nimport { isMobileDevice } from '../../utils/mobile';\nimport type { Observable } from '../../utils';\nimport type { GridPlugin } from '../../plugins/base.plugin';\nimport { ColumnCollection, getColumnByProp, getColumns } from '../../utils/column.utils';\nimport { WCAGPlugin } from '../../plugins/wcag';\nimport { ColumnFilterConfig, FilterCollectionItem } from '../../plugins/filter/filter.types';\nimport { PluginService } from './plugin.service';\nimport { SortingConfig } from 'src/plugins/sorting/sorting.types';\n\n\n/**\n * Revogrid - High-performance, customizable grid library for managing large datasets.\n *\n * :::tip\n * Read [type definition file](https://github.com/revolist/revogrid/blob/master/src/interfaces.d.ts) for the full interface information.\n * All complex property types such as `ColumnRegular`, `ColumnProp`, `ColumnDataSchemaModel` can be found there.\n * :::\n *\n * :::info\n * For a comprehensive events guide, check the [Events](./events.md).\n * All events propagate to the root level of the grid. [Dependency tree](#Dependencies).\n * :::\n *\n * @slot data-{column-type}-{row-type}. @example data-rgCol-rgRow - main data slot. Applies extra elements in <revogr-data />.\n * @slot focus-{column-type}-{row-type}. @example focus-rgCol-rgRow - focus layer for main data. Applies extra elements in <revogr-focus />.\n * @slot viewport - Viewport slot.\n * @slot header - Header slot.\n * @slot footer - Footer slot.\n*/\n@Component({\n  tag: 'revo-grid',\n  styleUrl: 'revo-grid-style.scss',\n})\nexport class RevoGridComponent {\n  // #region Properties\n  /** Excel like functionality.\n   * Show row numbers.\n   * Also can be used for custom row header render if object provided.\n   */\n  @Prop() rowHeaders: RowHeaders | boolean;\n\n  /**\n   * Defines how many rows/columns should be rendered outside visible area.\n   */\n  @Prop() frameSize = 1;\n\n  /**\n   * Indicates default rgRow size.\n   * By default 0, means theme package size will be applied\n   *\n   * Alternatively you can use `rowSize` to reset viewport\n   */\n  @Prop() rowSize = 0;\n\n  /** Indicates default column size. */\n  @Prop() colSize = 100;\n\n  /** When true, user can range selection. */\n  @Prop() range = false;\n\n  /** When true, grid in read only mode. */\n  @Prop() readonly = false;\n\n  /** When true, columns are resizable. */\n  @Prop() resize = false;\n\n  /** When true cell focus appear. */\n  @Prop() canFocus = true;\n\n  /** When true enable clipboard. */\n  @Prop() useClipboard = true;\n\n  /**\n   * Columns - defines an array of grid columns.\n   * Can be column or grouped column.\n   */\n  @Prop() columns: (ColumnRegular | ColumnGrouping)[] = [];\n  /**\n   * Source - defines main data source.\n   * Can be an Object or 2 dimensional array([][]);\n   * Keys/indexes referenced from columns Prop.\n   */\n  @Prop() source: DataType[] = [];\n\n  /** Pinned top Source: {[T in ColumnProp]: any} - defines pinned top rows data source. */\n  @Prop() pinnedTopSource: DataType[] = [];\n\n  /** Pinned bottom Source: {[T in ColumnProp]: any} - defines pinned bottom rows data source. */\n  @Prop() pinnedBottomSource: DataType[] = [];\n\n  /** Custom row properies to be applied. See `RowDefinition` for more info. */\n  @Prop() rowDefinitions: RowDefinition[] = [];\n\n  /** Custom editors register. */\n  @Prop() editors: Editors = {};\n\n  /**\n   * Apply changes in editor when closed except 'Escape' cases.\n   * If custom editor in use method getValue required.\n   * Check interfaces.d.ts `EditorBase` for more info.\n   */\n  @Prop() applyOnClose = false;\n\n  /**\n   * Custom grid plugins. Can be added or removed at runtime.\n   * Every plugin should be inherited from BasePlugin class.\n   * \n   * For more details check [Plugin guide](https://rv-grid.com/guide/plugin/)\n   */\n  @Prop() plugins: GridPlugin[] = [];\n\n  /**\n   * Column Types Format.\n   * Every type represent multiple column properties.\n   * Types will be merged but can be replaced with column properties.\n   * Types were made as separate objects to be reusable per multiple columns.\n   */\n  @Prop() columnTypes: { [name: string]: ColumnType } = {};\n\n  /** Theme name. */\n  @Prop({ reflect: true, mutable: true }) theme: Theme = 'default';\n\n  /**\n   * Row class property mapping.\n   * Map custom classes to rows from row object data.\n   * Define this property in rgRow object and this will be mapped as rgRow class.\n   */\n  @Prop({ reflect: true }) rowClass = '';\n\n  /**\n   * Autosize config.\n   * Enables columns autoSize.\n   * For more details check `autoSizeColumn` plugin.\n   * By default disabled, hence operation is not performance efficient.\n   * `true` to enable with default params (double header separator click for autosize).\n   * Or define config. See `AutoSizeColumnConfig` for more details.\n   */\n  @Prop() autoSizeColumn: boolean | AutoSizeColumnConfig = false;\n\n  /**\n   * Enables filter plugin.\n   * Can be boolean.\n   * Or can be filter collection See `FilterCollection` for more info.\n   */\n  @Prop() filter: boolean | ColumnFilterConfig = false;\n\n  /**\n   * Alternative way to set sorting.\n   * `{columns: [{prop: 'name', order: 'asc'}]}`\n   */\n  @Prop() sorting?: SortingConfig;\n\n  /**\n   * Apply changes typed in editor on editor close except Escape cases.\n   * If custom editor in use method `getValue` required.\n   * Check `interfaces.d.ts` `EditorBase` for more info.\n   */\n  @Prop() focusTemplate: FocusTemplateFunc;\n\n  /**\n   * Enable column move plugin.\n   */\n  @Prop() canMoveColumns = false;\n  /**\n   * Trimmed rows.\n   * Functionality which allows to hide rows from main data set.\n   * `trimmedRows` are physical `rgRow` indexes to hide.\n   */\n  @Prop() trimmedRows: Record<number, boolean> = {};\n\n  /**\n   * Enable export plugin.\n   */\n  @Prop() exporting = false;\n\n  /**\n   * Group rows based on this property.\n   * Define properties to be groped by grouping plugin See `GroupingOptions`.\n   */\n  @Prop() grouping: GroupingOptions;\n\n  /**\n   * Stretch strategy for columns by `StretchColumn` plugin.\n   * For example if there are more space on the right last column size would be increased.\n   */\n  @Prop() stretch: boolean | string = false;\n\n  /**\n   * Additional data to be passed to plugins, renders or editors.\n   * For example if you need to pass Vue component instance.\n   */\n  @Prop() additionalData: any = {};\n\n  /**\n   * Disable lazy rendering mode for the `X axis`.\n   * Use when not many columns present and you don't need rerenader cells during scroll.\n   * Can be used for initial rendering performance improvement.\n   */\n  @Prop() disableVirtualX = false;\n  /**\n   * Disable lazy rendering mode for the `Y axis`.\n   * Use when not many rows present and you don't need rerenader cells during scroll.\n   * Can be used for initial rendering performance improvement.\n   */\n  @Prop() disableVirtualY = false;\n\n  /**\n   * Please only hide the attribution if you are subscribed to Pro version\n   */\n  @Prop() hideAttribution = false;\n\n  /**\n   * Prevent rendering until job is done.\n   * Can be used for initial rendering performance improvement.\n   * When several plugins require initial rendering this will prevent double initial rendering.\n   */\n  @Prop() jobsBeforeRender: Promise<any>[] = [];\n\n  /**\n   * Register new virtual node inside of grid.\n   * Used for additional items creation such as plugin elements.\n   * Should be set before grid render inside of plugins.\n   * Can return VNode result of h() function or a function that returns VNode.\n   * Function can be used for performance improvement and additional renders.\n   */\n  @Prop() registerVNode: (\n    | VNode\n    | ((c: ExtraNodeFuncConfig) => VNode)\n  )[] = [];\n\n\n  /**\n   * Enable accessibility. If disabled, the grid will not be accessible.\n   * @default true\n   */\n  @Prop() accessible = true;\n\n  // #endregion\n\n  // #region Events\n  /**\n   * New content size has been applied. The size excludes the header.\n   * Currently, the event responsible for applying the new content size does not provide the actual size.\n   * To retrieve the actual content size, you can utilize the `getContentSize` function after the event has been triggered.\n   */\n  @Event() contentsizechanged: EventEmitter<MultiDimensionType>;\n\n  /**\n   * Before the data is edited.\n   * To prevent the default behavior of editing data and use your own implementation, call `e.preventDefault()`.\n   * To override the edit result with your own value, set the `e.val` property to your desired value.\n   */\n  @Event() beforeedit: EventEmitter<BeforeSaveDataDetails>;\n\n  /**\n   * Before applying range data, specifically when a range selection occurs.\n   * To customize the data and prevent the default edit data from being set, you can call `e.preventDefault()`.\n   */\n  @Event() beforerangeedit: EventEmitter<BeforeRangeSaveDataDetails>;\n\n  /**\n   * After data applied or range changed.\n   */\n  @Event() afteredit: EventEmitter<AfterEditEvent>;\n\n  /**\n   * Before autofill is applied.\n   * To prevent the default behavior of applying the edit data, you can call `e.preventDefault()`.\n   */\n  @Event() beforeautofill: EventEmitter<ChangedRange>;\n\n  /**\n   * Before autofill is applied. Runs before beforeautofill event.\n   * Use e.preventDefault() to prevent range.\n   */\n  @Event() beforerange: EventEmitter<ChangedRange>;\n\n  /**\n   * After focus render finished.\n   * Can be used to access a focus element through `event.target`.\n   * This is just a duplicate of `afterfocus` from `revogr-focus.tsx`.\n   */\n  @Event() afterfocus: EventEmitter<FocusAfterRenderEvent>;\n\n  /**\n   * Before the order of `rgRow` is applied.\n   * To prevent the default behavior of changing the order of `rgRow`, you can call `e.preventDefault()`.\n   */\n  @Event() roworderchanged: EventEmitter<{ from: number; to: number }>;\n\n  /**\n   * By sorting.plugin.ts\n   * Before sorting apply.\n   * Use e.preventDefault() to prevent sorting data change.\n   */\n  @Event() beforesortingapply: EventEmitter<{\n    column: ColumnRegular;\n    order: 'desc' | 'asc';\n    additive: boolean;\n  }>;\n\n  /**\n   * By sorting.plugin.ts\n   * Before sorting event.\n   * Initial sorting triggered, if this event stops no other event called.\n   * Use e.preventDefault() to prevent sorting.\n   */\n  @Event() beforesorting: EventEmitter<{\n    column: ColumnRegular;\n    order: 'desc' | 'asc';\n    additive: boolean;\n  }>;\n\n  /**\n   * This event is triggered when the row order change is started.\n   * To prevent the default behavior of changing the row order, you can call `e.preventDefault()`.\n   * To change the item name at the start of the row order change, you can set `e.text` to the desired new name.\n   */\n  @Event() rowdragstart: EventEmitter<RowDragStartDetails>;\n\n  /**\n   * On header click.\n   */\n  @Event() headerclick: EventEmitter<ColumnRegular>;\n\n  /**\n   * Before the cell focus is changed.\n   * To prevent the default behavior of changing the cell focus, you can call `e.preventDefault()`.\n   */\n  @Event() beforecellfocus: EventEmitter<BeforeSaveDataDetails>;\n\n  /**\n   * Before the grid focus is lost.\n   * To prevent the default behavior of changing the cell focus, you can call `e.preventDefault()`.\n   */\n  @Event() beforefocuslost: EventEmitter<FocusedData | null>;\n\n  /**\n   * Before main source/rows data apply.\n   * You can override data source here\n   */\n  @Event() beforesourceset: EventEmitter<{\n    type: DimensionRows;\n    source: DataType[];\n  }>;\n\n  /**\n   * Before data apply on any source type. Can be source from pinned and main viewport.\n   * You can override data source here\n   */\n  @Event() beforeanysource: EventEmitter<{\n    type: DimensionRows;\n    source: DataType[];\n  }>;\n\n  /**\n   * After main source/rows updated\n   */\n  @Event() aftersourceset: EventEmitter<{\n    type: DimensionRows;\n    source: DataType[];\n  }>;\n\n  /**\n   * Emitted after each source update, whether from the pinned or main viewport.\n   * Useful for tracking all changes originating from sources in both the pinned and main viewports.\n   */\n  @Event() afteranysource: EventEmitter<{\n    type: DimensionRows;\n    source: DataType[];\n  }>;\n\n  /**\n   * Emitted before a column update is applied.\n   * Listeners can use this event to perform any necessary actions or modifications before the column update is finalized.\n   */\n  @Event() beforecolumnsset: EventEmitter<ColumnCollection>;\n\n  /**\n   * Emitted before a column update is applied, after the column set is gathered and the viewport is updated.\n   * Useful for performing actions or modifications before the final application of the column update.\n   */\n  @Event() beforecolumnapplied: EventEmitter<ColumnCollection>;\n\n  /**  Column updated */\n  @Event() aftercolumnsset: EventEmitter<{\n    columns: ColumnCollection;\n    order: Record<ColumnProp, 'asc' | 'desc' | undefined>;\n  }>;\n\n  /**\n   * Emitted before applying a filter to the data source.\n   * Use e.preventDefault() to prevent cell focus change.\n   * Modify if you need to change filters.\n   */\n  @Event() beforefilterapply: EventEmitter<{ collection: Record<ColumnProp, FilterCollectionItem> }>;\n\n  /**\n   * Emitted before applying a filter to the data source.\n   * Use e.preventDefault() to prevent the default behavior of trimming values and applying the filter.\n   * Modify the `collection` property if you want to change the filters.\n   * Modify the `itemsToFilter` property if you want to filter the indexes for trimming.\n   */\n  @Event() beforefiltertrimmed: EventEmitter<{\n    collection: Record<ColumnProp, FilterCollectionItem>;\n    itemsToFilter: Record<number, boolean>;\n  }>;\n\n  /**\n   * Emitted before trimming values.\n   * Use e.preventDefault() to prevent the default behavior of trimming values.\n   * Modify the `trimmed` property if you want to filter the indexes for trimming.\n   */\n  @Event() beforetrimmed: EventEmitter<{\n    trimmed: Record<number, boolean>;\n    trimmedType: string;\n    type: string;\n  }>;\n\n  /**\n   * Emitted after trimmed values have been applied.\n   * Useful for notifying when trimming of values has taken place.\n   */\n  @Event() aftertrimmed: EventEmitter;\n\n  /**\n   * Emitted when the viewport is scrolled.\n   * Useful for tracking viewport scrolling events.\n   */\n  @Event() viewportscroll: EventEmitter<ViewPortScrollEvent>;\n\n  /**\n   * Before export\n   * Use e.preventDefault() to prevent export\n   * Replace data in Event in case you want to modify it in export\n   */\n  @Event() beforeexport: EventEmitter<DataInput>;\n\n  /**\n   * Emitted before editing starts.\n   * Use e.preventDefault() to prevent the default edit behavior.\n   */\n  @Event() beforeeditstart: EventEmitter<BeforeSaveDataDetails>;\n\n  /**\n   * Emitted after column resizing.\n   * Useful for retrieving the resized columns.\n   */\n  @Event() aftercolumnresize: EventEmitter<{\n    [index: number]: ColumnRegular;\n  }>;\n\n  /**\n   * Emitted before the row definition is applied.\n   * Useful for modifying or preventing the default row definition behavior.\n   */\n  @Event() beforerowdefinition: EventEmitter<{ vals: any; oldVals: any }>;\n\n  /**\n   * Emitted when the filter configuration is changed\n   */\n  @Event() filterconfigchanged: EventEmitter;\n\n  /**\n   * Emitted when the sorting configuration is changed\n   */\n  @Event() sortingconfigchanged: EventEmitter<SortingConfig>;\n\n  /**\n   * Emmited when the row headers are changed.\n   */\n  @Event() rowheaderschanged: EventEmitter;\n\n  /**\n   * Emmited before the grid is rendered.\n   */\n  @Event() beforegridrender: EventEmitter;\n\n\n  /**\n   * Emmited after the grid is rendered.\n   */\n  @Event() aftergridrender: EventEmitter;\n\n  /**\n   * Emmited after the grid is initialized. Connected to the DOM.\n   */\n  @Event() aftergridinit: EventEmitter;\n\n  /**\n   * Emmited after the additional data is changed\n   */\n  @Event() additionaldatachanged: EventEmitter<any>;\n\n  /**\n   * Emmited after the theme is changed\n   */\n  @Event() afterthemechanged: EventEmitter<Theme>;\n\n\n  /**\n   * Emmited after grid created\n   */\n  @Event() created: EventEmitter;\n\n  // #endregion\n\n  // #region Methods\n  /**\n   * Refreshes data viewport.\n   * Can be specific part as rgRow or pinned rgRow or 'all' by default.\n   */\n  @Method() async refresh(type: DimensionRows | 'all' = 'all') {\n    if (!this.dataProvider) {\n      throw new Error('Not connected');\n    }\n    this.dataProvider.refresh(type);\n  }\n\n  /**\n   * Refreshes data at specified cell.\n   * Useful for performance optimization.\n   * No viewport update will be triggered.\n   * \n   * @example\n   * const grid = document.querySelector('revo-grid');\n   * grid.setDataAt({ row: 0, col: 0, val: 'test' }); // refresh\n   */\n  @Method() async setDataAt(\n    { row, col, colType = 'rgCol', rowType = 'rgRow', val, skipDataUpdate = false }: {\n      row: number; // virtual\n      col: number; // virtual\n      val?: any;\n      skipDataUpdate?: boolean;\n    } & AllDimensionType,\n  ) {\n    if (this.dataProvider && this.columnProvider && !skipDataUpdate) {\n      const columnProp = this.columnProvider.getColumn(col, colType)?.prop;\n      if (typeof columnProp !== 'undefined') {\n        this.dataProvider.setCellData({\n          type: rowType,\n          rowIndex: row,\n          prop: columnProp,\n          val,\n        }, false);\n      }\n    }\n    const dataElement: HTMLRevogrDataElement | null =\n      this.element.querySelector(\n        `revogr-data[type=\"${rowType}\"][col-type=\"${colType}\"]`,\n      );\n    return dataElement?.updateCell({\n      row,\n      col,\n    });\n  }\n\n  /**\n   * Scrolls viewport to specified row by index.\n   */\n  @Method() async scrollToRow(coordinate = 0) {\n    if (!this.dimensionProvider) {\n      throw new Error('Not connected');\n    }\n    const y = this.dimensionProvider.getViewPortPos({\n      coordinate,\n      dimension: 'rgRow',\n    });\n    await this.scrollToCoordinate({ y });\n  }\n\n  /**\n   * Scrolls viewport to specified column by index.\n   */\n  @Method() async scrollToColumnIndex(coordinate = 0) {\n    if (!this.dimensionProvider) {\n      throw new Error('Not connected');\n    }\n    const x = this.dimensionProvider.getViewPortPos({\n      coordinate,\n      dimension: 'rgCol',\n    });\n    await this.scrollToCoordinate({ x });\n  }\n\n  /**\n   * Scrolls viewport to specified column by prop\n   */\n  @Method() async scrollToColumnProp(\n    prop: ColumnProp,\n    dimension: DimensionTypeCol = 'rgCol',\n  ) {\n    if (!this.dimensionProvider || !this.columnProvider) {\n      throw new Error('Not connected');\n    }\n\n    const coordinate = this.columnProvider.getColumnIndexByProp(\n      prop,\n      dimension,\n    );\n    if (coordinate < 0) {\n      // already on the screen\n      return;\n    }\n    const x = this.dimensionProvider.getViewPortPos({\n      coordinate,\n      dimension,\n    });\n    await this.scrollToCoordinate({ x });\n  }\n\n  /** Update columns */\n  @Method() async updateColumns(cols: ColumnRegular[]) {\n    this.columnProvider?.updateColumns(cols);\n  }\n\n  /** Add trimmed by type */\n  @Method() async addTrimmed(\n    trimmed: Record<number, boolean>,\n    trimmedType = 'external',\n    type: DimensionRows = 'rgRow',\n  ) {\n    if (!this.dataProvider) {\n      throw new Error('Not connected');\n    }\n    const event = this.beforetrimmed.emit({\n      trimmed,\n      trimmedType,\n      type,\n    });\n    if (event.defaultPrevented) {\n      return event;\n    }\n    this.dataProvider.setTrimmed({ [trimmedType]: event.detail.trimmed }, type);\n    this.aftertrimmed.emit();\n    return event;\n  }\n\n  /**  Scrolls view port to coordinate */\n  @Method() async scrollToCoordinate(cell: Partial<Cell>) {\n    this.viewport?.scrollToCell(cell);\n  }\n\n  /**  Open editor for cell. */\n  @Method() async setCellEdit(\n    rgRow: number,\n    prop: ColumnProp,\n    rowSource: DimensionRows = 'rgRow',\n  ) {\n    const rgCol = getColumnByProp(this.columns, prop);\n    if (!rgCol) {\n      return;\n    }\n    await timeout();\n    const colGroup = rgCol.pin || 'rgCol';\n    if (!this.columnProvider) {\n      throw new Error('Not connected');\n    }\n    this.viewport?.setEdit(\n      rgRow,\n      this.columnProvider.getColumnIndexByProp(prop, colGroup),\n      colGroup,\n      rowSource,\n    );\n  }\n\n  /**  Set focus range. */\n  @Method() async setCellsFocus(\n    cellStart: Cell = { x: 0, y: 0 },\n    cellEnd: Cell = { x: 0, y: 0 },\n    colType = 'rgCol',\n    rowType = 'rgRow',\n  ) {\n    this.viewport?.setFocus(colType, rowType, cellStart, cellEnd);\n  }\n\n  /**  Get data from source */\n  @Method() async getSource(type: DimensionRows = 'rgRow') {\n    if (!this.dataProvider) {\n      throw new Error('Not connected');\n    }\n    return this.dataProvider.stores[type].store.get('source');\n  }\n\n  /**\n   * Get data from visible part of source\n   * Trimmed/filtered rows will be excluded\n   * @param type - type of source\n   */\n  @Method() async getVisibleSource(type: DimensionRows = 'rgRow') {\n    if (!this.dataProvider) {\n      throw new Error('Not connected');\n    }\n    return getVisibleSourceItem(this.dataProvider.stores[type].store);\n  }\n\n  /**\n   * Provides access to rows internal store observer\n   * Can be used for plugin support\n   * @param type - type of source\n   */\n  @Method() async getSourceStore(\n    type: DimensionRows = 'rgRow',\n  ): Promise<Observable<DSourceState<DataType, DimensionRows>>> {\n    if (!this.dataProvider) {\n      throw new Error('Not connected');\n    }\n    return this.dataProvider.stores[type].store;\n  }\n  /**\n   * Provides access to column internal store observer\n   * Can be used for plugin support\n   * @param type - type of column\n   */\n  @Method() async getColumnStore(\n    type: DimensionCols = 'rgCol',\n  ): Promise<Observable<DSourceState<ColumnRegular, DimensionCols>>> {\n    if (!this.columnProvider) {\n      throw new Error('Not connected');\n    }\n    return this.columnProvider.stores[type].store;\n  }\n\n  /**\n   * Update column sorting\n   * @param column - full column details to update\n   * @param index - virtual column index\n   * @param order - order to apply\n   * @param additive - if false will replace current order\n   */\n  @Method() async updateColumnSorting(\n    column: ColumnRegular,\n    index: number,\n    order: 'asc' | 'desc' | undefined,\n    additive: boolean,\n  ) {\n    if (!this.columnProvider) {\n      throw new Error('Not connected');\n    }\n    return this.columnProvider.updateColumnSorting(\n      column,\n      index,\n      order,\n      additive,\n    );\n  }\n\n  /**\n   * Clears column sorting\n   */\n  @Method() async clearSorting() {\n    if (!this.columnProvider) {\n      throw new Error('Not connected');\n    }\n    this.columnProvider.clearSorting();\n  }\n\n  /**\n   * Receive all columns in data source\n   */\n  @Method() async getColumns(): Promise<ColumnRegular[]> {\n    if (!this.columnProvider) {\n      throw new Error('Not connected');\n    }\n    return this.columnProvider.getColumns();\n  }\n\n  /**\n   * Clear current grid focus. Grid has no longer focus on it.\n   */\n  @Method() async clearFocus() {\n    const focused = this.viewport?.getFocused();\n    const event = this.beforefocuslost.emit(focused);\n    if (event.defaultPrevented) {\n      return;\n    }\n    this.selectionStoreConnector?.clearAll();\n  }\n\n  /**\n   * Get all active plugins instances\n   */\n  @Method() async getPlugins(): Promise<PluginBaseComponent[]> {\n    return this.pluginService.get();\n  }\n\n  /**\n   * Get the currently focused cell.\n   */\n  @Method() async getFocused(): Promise<FocusedData | null> {\n    return this.viewport?.getFocused() ?? null;\n  }\n\n  /**\n   * Get size of content\n   * Including all pinned data\n   */\n  @Method() async getContentSize(): Promise<Cell> {\n    if (!this.dimensionProvider) {\n      throw new Error('Not connected');\n    }\n    return this.dimensionProvider?.getFullSize();\n  }\n  /**\n   * Get the currently selected Range.\n   */\n  @Method() async getSelectedRange(): Promise<RangeArea | null> {\n    return this.viewport?.getSelectedRange() ?? null;\n  }\n\n  /**\n   * Refresh extra elements. Triggers re-rendering of extra elements and functions.\n   * Part of extraElements and registerVNode methods.\n   * Useful for plugins.\n   */\n  @Method() async refreshExtraElements() {\n    this.extraService?.refresh();\n  }\n\n  // #endregion\n\n  // #region Listeners outside scope\n  private clickTrackForFocusClear?: number;\n  @Listen('touchstart', { target: 'document' })\n  @Listen('mousedown', { target: 'document' })\n  mousedownHandle(event: MouseEvent | TouchEvent) {\n    const screenX = getPropertyFromEvent(event, 'screenX');\n    const screenY = getPropertyFromEvent(event, 'screenY');\n    if (screenX === null || screenY === null) {\n      return;\n    }\n\n    this.clickTrackForFocusClear = screenX + screenY;\n  }\n  /**\n   * To keep your elements from losing focus use mouseup/touchend e.preventDefault();\n   */\n  @Listen('touchend', { target: 'document' })\n  @Listen('mouseup', { target: 'document' })\n  async mouseupHandle(event: MouseEvent | TouchEvent) {\n    const screenX = getPropertyFromEvent(event, 'screenX');\n    const screenY = getPropertyFromEvent(event, 'screenY');\n    if (screenX === null || screenY === null) {\n      return;\n    }\n\n    if (event.defaultPrevented) {\n      return;\n    }\n    const pos = screenX + screenY;\n    // detect if mousemove then do nothing\n    if (Math.abs((this.clickTrackForFocusClear ?? 0) - pos) > 10) {\n      return;\n    }\n\n    // Check if action finished inside the document\n    // if event prevented, or it is current table don't clear focus\n    const path = event.composedPath();\n    if (!path.includes(this.element) &&\n        !(this.element.shadowRoot && path.includes(this.element.shadowRoot))\n      ) {\n      // Perform actions if the click is outside the component\n      await this.clearFocus();\n    }\n  }\n  // #endregion\n\n  // #region Listeners\n  /** Drag events */\n  @Listen('rowdragstartinit') onRowDragStarted(\n    e: CustomEvent<HTMLRevogrOrderEditorElementEventMap['rowdragstartinit']>,\n  ) {\n    const dragStart = this.rowdragstart.emit(e.detail);\n    if (dragStart.defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    this.orderService?.start(this.element, {\n      ...e.detail,\n      ...dragStart.detail,\n    });\n  }\n\n  @Listen('rowdragendinit') onRowDragEnd() {\n    this.orderService?.end();\n  }\n\n  @Listen('roworderchange') onRowOrderChange(e: CustomEvent<HTMLRevogrOrderEditorElementEventMap['roworderchange']>) {\n    this.dataProvider?.changeOrder(e.detail);\n  }\n\n  @Listen('rowdragmoveinit') onRowDrag({ detail }: CustomEvent<PositionItem>) {\n    this.orderService?.move(detail);\n  }\n\n  @Listen('rowdragmousemove') onRowMouseMove(e: CustomEvent<Cell>) {\n    this.orderService?.moveTip(e.detail);\n  }\n\n  @Listen('celleditapply') async onCellEdit(\n    e: CustomEvent<BeforeSaveDataDetails>,\n  ) {\n    const { defaultPrevented, detail } = this.beforeedit.emit(e.detail);\n    await timeout();\n    // apply data\n    if (!defaultPrevented) {\n      this.dataProvider?.setCellData(detail);\n\n      // @feature: incrimental update for cells\n      // this.dataProvider.setCellData(detail, false);\n      // await this.setDataAt({\n      //   row: detail.rowIndex,\n      //   col: detail.colIndex,\n      //   rowType: detail.type,\n      //   colType: detail.colType,\n      // });\n      this.afteredit.emit(detail);\n    }\n  }\n\n  @Listen('rangeeditapply') onRangeEdit(\n    e: CustomEvent<HTMLRevogrOverlaySelectionElementEventMap['rangeeditapply']>,\n  ) {\n    if (!this.dataProvider) {\n      throw new Error('Not connected');\n    }\n    const { defaultPrevented, detail } = this.beforerangeedit.emit(e.detail);\n    if (defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    this.dataProvider.setRangeData(detail.data, detail.type);\n    this.afteredit.emit(detail);\n  }\n\n  @Listen('selectionchangeinit') onRangeChanged(\n    e: CustomEvent<HTMLRevogrOverlaySelectionElementEventMap['selectionchangeinit']>) {\n    const beforeange = this.beforerange.emit(e.detail);\n    if (beforeange.defaultPrevented) {\n      e.preventDefault();\n    }\n    const beforeFill = this.beforeautofill.emit(beforeange.detail);\n    if (beforeFill.defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  @Listen('rowdropinit') onRowDropped(\n    e: CustomEvent<{ from: number; to: number }>,\n  ) {\n    // e.cancelBubble = true;\n    const { defaultPrevented } = this.roworderchanged.emit(e.detail);\n    if (defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  @Listen('beforeheaderclick') onHeaderClick(\n    e: CustomEvent<InitialHeaderClick>,\n  ) {\n    const { defaultPrevented } = this.headerclick.emit({\n      ...e.detail.column,\n      originalEvent: e.detail.originalEvent,\n    });\n    if (defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  @Listen('beforecellfocusinit') onCellFocus(\n    e: CustomEvent<BeforeSaveDataDetails>,\n  ) {\n    const { defaultPrevented } = this.beforecellfocus.emit(e.detail);\n    if (!this.canFocus || defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  // #endregion\n\n  // #region Private Properties\n  @Element() element: HTMLRevoGridElement;\n  extraElements: HTMLRevogrExtraElement['nodes'] = [];\n  /** \n   * Service for rendering extra elements as virtual nodes\n   * Part of extraElements and registerVNode methods\n   */\n  extraService?: HTMLRevogrExtraElement;\n\n  columnProvider?: ColumnDataProvider;\n  dataProvider?: DataProvider;\n  dimensionProvider?: DimensionProvider;\n  viewportProvider?: ViewportProvider;\n  themeService: ThemeService;\n  pluginService = new PluginService();\n  viewport: ViewportService | null = null;\n  isInited = false;\n\n  orderService: OrdererService;\n  selectionStoreConnector?: SelectionStoreConnector;\n  scrollingService: GridScrollingService;\n\n  // #endregion\n\n  // #region Watchers\n  @Watch('columnTypes') columnTypesChanged() {\n    // Column format change will trigger column structure update\n    this.columnChanged(this.columns);\n  }\n\n  @Watch('columns') columnChanged(\n    newVal: (ColumnGrouping | ColumnRegular)[] = [],\n    _prevVal: (ColumnGrouping | ColumnRegular)[] | undefined = undefined,\n    __watchName: string = 'columns',\n    init = false,\n  ) {\n    if (!this.dimensionProvider || !this.columnProvider) {\n      return;\n    }\n    const columnGather = getColumns(\n      newVal,\n      0,\n      this.columnTypes,\n    );\n    const beforeSetEvent = this.beforecolumnsset.emit(columnGather);\n    if (beforeSetEvent.defaultPrevented) {\n      return;\n    }\n    this.dimensionProvider.applyNewColumns(\n      beforeSetEvent.detail.columns,\n      this.disableVirtualX,\n      init,\n    );\n    const beforeApplyEvent = this.beforecolumnapplied.emit(columnGather);\n    if (beforeApplyEvent.defaultPrevented) {\n      return;\n    }\n    const columns = this.columnProvider.setColumns(beforeApplyEvent.detail);\n    this.aftercolumnsset.emit({\n      columns,\n      order: this.columnProvider.order,\n    });\n  }\n\n  @Watch('disableVirtualX') disableVirtualXChanged(\n    newVal = false,\n    prevVal = false,\n  ) {\n    if (newVal === prevVal) {\n      return;\n    }\n    this.columnChanged(this.columns);\n  }\n\n  @Watch('rowSize') rowSizeChanged(s: number) {\n    if (!this.dimensionProvider) {\n      return;\n    }\n    // clear existing data\n    this.dimensionProvider.setSettings({ originItemSize: s }, 'rgRow');\n    this.rowDefChanged(this.rowDefinitions, this.rowDefinitions, 'rowSize', true);\n  }\n\n  @Watch('theme') themeChanged(\n    t: Theme,\n    _?: Theme,\n    __ = 'theme',\n    init = false,\n  ) {\n    if (!this.dimensionProvider) {\n      return;\n    }\n    this.themeService.register(t);\n    this.dimensionProvider.setSettings(\n      { originItemSize: this.themeService.rowSize },\n      'rgRow',\n    );\n    this.dimensionProvider.setSettings(\n      { originItemSize: this.colSize },\n      'rgCol',\n    );\n    // if theme change we need to reapply row size and reset viewport\n    if (!init) {\n      // clear existing data\n      this.dimensionProvider.setSettings(\n        { originItemSize: this.themeService.rowSize },\n        'rgRow',\n      );\n      this.rowDefChanged(\n        // for cases when some custom size present and not\n        this.rowDefinitions,\n        this.rowDefinitions,\n        'theme',\n        true,\n      );\n    }\n    this.afterthemechanged.emit(t);\n  }\n\n  @Watch('source')\n  @Watch('pinnedBottomSource')\n  @Watch('pinnedTopSource')\n  dataSourceChanged<T extends DataType>(\n    newVal: T[] = [],\n    _: T[] | undefined,\n    watchName: string,\n  ) {\n    if (!this.dataProvider) {\n      return;\n    }\n    let type: DimensionRows = 'rgRow';\n    switch (watchName) {\n      case 'pinnedBottomSource':\n        type = 'rowPinEnd';\n        break;\n      case 'pinnedTopSource':\n        type = 'rowPinStart';\n        break;\n      case 'source':\n        type = 'rgRow';\n        /**\n         * Applied for source only for cross compatability between plugins\n         */\n        const beforesourceset = this.beforesourceset.emit({\n          type,\n          source: newVal,\n        });\n        newVal = beforesourceset.detail.source as T[];\n        break;\n    }\n    const beforesourceset = this.beforeanysource.emit({\n      type,\n      source: newVal,\n    });\n    const newSource = [...beforesourceset.detail.source];\n    this.dataProvider.setData(newSource, type, this.disableVirtualY);\n\n    /** \n     * Applied for source only for cross compatability between plugins\n     */\n    if (watchName === 'source') {\n      this.aftersourceset.emit({\n        type,\n        source: newVal,\n      });\n    }\n    this.afteranysource.emit({\n      type,\n      source: newVal,\n    });\n  }\n\n  @Watch('disableVirtualY') disableVirtualYChanged(\n    newVal = false,\n    prevVal = false,\n  ) {\n    if (newVal === prevVal) {\n      return;\n    }\n    this.dataSourceChanged(this.source, this.source, 'source');\n  }\n\n  @Watch('rowDefinitions') rowDefChanged(\n    after: RowDefinition[],\n    before?: RowDefinition[],\n    _watchName?: string,\n    forceUpdate = true,\n  ) {\n    // in firefox it's triggered before init\n    if (!this.dimensionProvider || !this.dataProvider) {\n      return;\n    }\n    const {\n      detail: { vals: newVal, oldVals: oldVal },\n    } = this.beforerowdefinition.emit({\n      vals: after,\n      oldVals: before,\n    });\n    // apply new values\n    const newRows = rowDefinitionByType(newVal);\n    // clear current defs\n    if (oldVal) {\n      const remove = rowDefinitionRemoveByType(oldVal);\n      // clear all old data and drop sizes\n      for (const t in remove) {\n        if (remove.hasOwnProperty(t)) {\n          const type = t as DimensionRows;\n          const store = this.dataProvider.stores[type];\n          const sourceLength = store.store.get('source').length;\n          this.dimensionProvider.clearSize(type, sourceLength);\n        }\n      }\n    }\n    // set new sizes\n    rowTypes.forEach((t) => {\n      const newSizes = newRows[t];\n      // apply new sizes or force update\n      if (newSizes || forceUpdate) {\n        this.dimensionProvider?.setCustomSizes(t, newSizes?.sizes || {});\n      }\n    });\n  }\n\n  @Watch('trimmedRows') trimmedRowsChanged(\n    newVal: Record<number, boolean> = {},\n  ) {\n    this.addTrimmed(newVal);\n  }\n  /**\n   * Grouping\n   */\n  @Watch('grouping') groupingChanged(newVal: GroupingOptions = {}) {\n    this.pluginService.getByClass(GroupingRowPlugin)?.setGrouping(newVal || {});\n  }\n  /**\n   * Stretch Plugin Apply\n   */\n  @Watch('stretch') applyStretch(isStretch: boolean | string) {\n    if (!this.dimensionProvider || !this.dataProvider || !this.columnProvider || !this.viewportProvider) {\n      return;\n    }\n    if (isStretch === 'false') {\n      isStretch = false;\n    }\n\n    const pluginData = this.getPluginData();\n    if (!pluginData) {\n      return;\n    }\n    const stretch = this.pluginService.getByClass(StretchColumn);\n    if ((typeof isStretch === 'boolean' && isStretch) || isStretch === 'true') {\n      if (!stretch) {\n        this.pluginService.add(new StretchColumn(this.element, pluginData));\n      } else if (isStretchPlugin(stretch)) {\n        stretch.applyStretch(this.columnProvider.getRawColumns());\n      }\n    } else if (stretch) {\n      this.pluginService.remove(stretch);\n    }\n  }\n\n  @Watch('filter') applyFilter(cfg: boolean | ColumnFilterConfig) {\n    this.filterconfigchanged.emit(cfg);\n  }\n\n  @Watch('sorting') applySorting(cfg?: SortingConfig) {\n    this.sortingconfigchanged.emit(cfg);\n  }\n\n  @Watch('rowHeaders') rowHeadersChange(rowHeaders?: RowHeaders | boolean) {\n    this.rowheaderschanged.emit(rowHeaders);\n  }\n\n  /**\n   * Register external VNodes\n   */\n  @Watch('registerVNode') registerOutsideVNodes(elements: HTMLRevogrExtraElement['nodes'] = []) {\n    this.extraElements = elements;\n  }\n\n  @Watch('additionalData') additionalDataChanged(data: any) {\n    this.additionaldatachanged.emit(data);\n  }\n\n  /**\n   * User can add plugins via plugins property\n   */\n  @Watch('plugins') pluginsChanged(plugins: GridPlugin[] = [], prevPlugins?: GridPlugin[]) {\n    this.pluginService.addUserPluginsAndCreate(this.element, plugins, prevPlugins, this.getPluginData());\n \n  }\n  // #endregion\n\n  // #region Plugins\n  private setPlugins() {\n    // remove old plugins if any\n    this.removePlugins();\n    // pass data provider to plugins\n    const pluginData = this.getPluginData();\n    if (!pluginData) {\n      return;\n    }\n\n    // register system plugins\n    this.setCorePlugins(pluginData);\n    // register user plugins\n    this.pluginsChanged(this.plugins);\n  }\n  \n  private setCorePlugins(pluginData: PluginProviders) {\n    if (this.accessible) {\n      this.pluginService.add(new WCAGPlugin(this.element, pluginData));\n    }\n\n    // register auto size plugin\n    if (this.autoSizeColumn) {\n      this.pluginService.add(new AutoSizeColumnPlugin(\n        this.element,\n        pluginData,\n        typeof this.autoSizeColumn === 'object'\n          ? this.autoSizeColumn\n          : undefined,\n      ));\n    }\n\n    // register filter plugin\n    if (this.filter) {\n      this.pluginService.add(\n        new FilterPlugin(\n          this.element,\n          pluginData,\n          typeof this.filter === 'object' ? this.filter : undefined,\n        ),\n      );\n    }\n\n    // register export plugin\n    if (this.exporting) {\n      this.pluginService.add(new ExportFilePlugin(this.element, pluginData));\n    }\n\n    // register sorting plugin\n    this.pluginService.add(new SortingPlugin(this.element, pluginData));\n\n    // register grouping plugin\n    this.pluginService.add(new GroupingRowPlugin(this.element, pluginData));\n    if (this.canMoveColumns) {\n      this.pluginService.add(new ColumnMovePlugin(this.element, pluginData));\n    }\n  }\n\n  getPluginData(): PluginProviders | undefined {\n    if (!this.dimensionProvider || !this.dataProvider || !this.columnProvider || !this.viewportProvider || !this.selectionStoreConnector) {\n      return;\n    }\n\n    // pass data provider to plugins\n    const pluginData: PluginProviders = {\n      data: this.dataProvider,\n      column: this.columnProvider,\n      dimension: this.dimensionProvider,\n      viewport: this.viewportProvider,\n      selection: this.selectionStoreConnector,\n      plugins: this.pluginService,\n    };\n\n    return pluginData;\n  }\n\n  private removePlugins() {\n    this.pluginService.destroy();\n  }\n  // #endregion\n\n\n  // if reconnect to dom we need to set up plugins\n  connectedCallback() {\n    if (this.isInited) {\n      this.setPlugins();\n    }\n    this.created.emit();\n  }\n\n  /**\n   * Called once just after the component is first connected to the DOM.\n   * Since this method is only called once, it's a good place to load data asynchronously and to setup the state\n   * without triggering extra re-renders.\n   * A promise can be returned, that can be used to wait for the first render().\n   */\n  componentWillLoad() {\n    // #region Setup Providers\n    this.viewportProvider = new ViewportProvider();\n    this.themeService = new ThemeService({\n      rowSize: this.rowSize,\n    });\n    this.dimensionProvider = new DimensionProvider(this.viewportProvider, {\n      realSizeChanged: (k: MultiDimensionType) =>\n        this.contentsizechanged.emit(k),\n    });\n    this.columnProvider = new ColumnDataProvider();\n    this.selectionStoreConnector = new SelectionStoreConnector();\n    this.dataProvider = new DataProvider(this.dimensionProvider);\n    // #endregion\n\n    this.registerOutsideVNodes(this.registerVNode);\n\n    // init plugins\n    this.setPlugins();\n\n    // set data\n    this.applyStretch(this.stretch);\n    this.themeChanged(this.theme, undefined, undefined, true);\n    this.columnChanged(this.columns, undefined, undefined, true);\n    this.dataSourceChanged(this.source, undefined, 'source');\n    this.dataSourceChanged(this.pinnedTopSource, undefined, 'pinnedTopSource');\n    this.dataSourceChanged(\n      this.pinnedBottomSource,\n      undefined,\n      'pinnedBottomSource',\n    );\n    if (Object.keys(this.trimmedRows ?? {}).length > 0) {\n      this.trimmedRowsChanged(this.trimmedRows);\n    }\n    this.rowDefChanged(this.rowDefinitions);\n\n    // init grouping\n    if (this.grouping && Object.keys(this.grouping).length > 0) {\n      this.groupingChanged(this.grouping);\n    }\n\n    // init scrolling service\n    this.scrollingService = new GridScrollingService(\n      (e: ViewPortScrollEvent) => {\n        this.dimensionProvider?.setViewPortCoordinate({\n          coordinate: e.coordinate,\n          type: e.dimension,\n        });\n        this.viewportscroll.emit(e);\n      },\n    );\n\n    this.aftergridinit.emit();\n    // set inited flag for connectedCallback\n    this.isInited = true;\n  }\n\n  componentWillRender() {\n    const event = this.beforegridrender.emit();\n    if (event.defaultPrevented) {\n      return false;\n    }\n    return Promise.all(this.jobsBeforeRender);\n  }\n\n  componentDidRender() {\n    this.aftergridrender.emit();\n  }\n\n  render() {\n    if (!this.dimensionProvider || !this.dataProvider || !this.columnProvider || !this.viewportProvider || !this.selectionStoreConnector) {\n      return;\n    }\n    const contentHeight =\n      this.dimensionProvider.stores['rgRow'].store.get('realSize');\n\n    // init viewport service helpers\n    this.viewport = new ViewportService(\n      {\n        columnProvider: this.columnProvider,\n        dataProvider: this.dataProvider,\n        dimensionProvider: this.dimensionProvider,\n        viewportProvider: this.viewportProvider,\n        scrollingService: this.scrollingService,\n        orderService: this.orderService,\n        selectionStoreConnector: this.selectionStoreConnector,\n        disableVirtualX: this.disableVirtualX,\n        disableVirtualY: this.disableVirtualY,\n        resize: c => this.aftercolumnresize.emit(c),\n      },\n      contentHeight,\n    );\n\n    // #region ViewportSections\n    /**\n     * The code renders a viewport divided into sections.\n     * It starts by rendering the pinned start, data, and pinned end sections.\n     * Within each section, it renders columns along with their headers, pinned top, center data, and pinned bottom.\n     * The code iterates over the columns and their data to generate the view port's HTML structure.\n     */\n\n    const viewportSections: (VNode | VNode[])[] = [];\n\n    // Row headers setting\n    if (this.rowHeaders && this.viewport.columns.length) {\n      const anyView = this.viewport.columns[0];\n      viewportSections.push(\n        <revogr-row-headers\n          additionalData={this.additionalData}\n          height={contentHeight}\n          rowClass={this.rowClass}\n          resize={this.resize}\n          dataPorts={anyView.dataPorts}\n          headerProp={anyView.headerProp}\n          jobsBeforeRender={this.jobsBeforeRender}\n          rowHeaderColumn={\n            typeof this.rowHeaders === 'object' ? this.rowHeaders : undefined\n          }\n          onScrollview={({ detail: e }: CustomEvent) =>\n            this.scrollingService.proxyScroll(e, 'headerRow')\n          }\n          onRef={({ detail: e }: CustomEvent) =>\n            this.scrollingService.registerElement(e, 'headerRow')\n          }\n        />,\n      );\n    }\n\n    // Viewport section render\n    const isMobile = isMobileDevice();\n    const viewPortHtml: VNode[] = [];\n\n    // Render viewports column(horizontal sections)\n    for (let view of this.viewport.columns) {\n      const headerProperties: HeaderProperties = {\n        ...view.headerProp,\n        type: view.type,\n        additionalData: this.additionalData,\n        viewportCol: view.viewportCol,\n        selectionStore: view.columnSelectionStore,\n        canResize: this.resize,\n        readonly: this.readonly,\n        columnFilter: !!this.filter,\n      };\n      // Column headers\n      const dataViews: VNode[] = [\n        <revogr-header {...headerProperties} slot={HEADER_SLOT} />,\n      ];\n\n      // Render viewport data (vertical sections)\n      view.dataPorts.forEach(data => {\n        const key = `${data.type}_${view.type}`;\n        const dataView = (\n          <revogr-overlay-selection\n            {...data}\n            isMobileDevice={isMobile}\n            onSelectall={() => this.selectionStoreConnector?.selectAll()}\n            editors={this.editors}\n            readonly={this.readonly}\n            range={this.range}\n            useClipboard={this.useClipboard}\n            applyChangesOnClose={this.applyOnClose}\n            additionalData={this.additionalData}\n            slot={data.slot}\n            onBeforenextvpfocus={(e) => this.selectionStoreConnector?.beforeNextFocusCell(e.detail)}\n            onCanceledit={() => this.selectionStoreConnector?.setEdit(false)}\n            onSetedit={({ detail }) => {\n              const event = this.beforeeditstart.emit(detail);\n              if (!event.defaultPrevented) {\n                this.selectionStoreConnector?.setEdit(detail.val);\n              }\n            }}\n          >\n            <revogr-data\n              {...data}\n              colType={view.type}\n              key={key}\n              readonly={this.readonly}\n              range={this.range}\n              rowClass={this.rowClass}\n              rowSelectionStore={data.rowSelectionStore}\n              additionalData={this.additionalData}\n              jobsBeforeRender={this.jobsBeforeRender}\n              slot={DATA_SLOT}\n            >\n              <slot name={`data-${view.type}-${data.type}`} />\n            </revogr-data>\n            <revogr-temp-range\n              selectionStore={data.selectionStore}\n              dimensionRow={data.dimensionRow}\n              dimensionCol={data.dimensionCol}\n            />\n            <revogr-focus\n              colData={data.colData}\n              dataStore={data.dataStore}\n              focusTemplate={this.focusTemplate}\n              rowType={data.type}\n              colType={view.type}\n              selectionStore={data.selectionStore}\n              dimensionRow={data.dimensionRow}\n              dimensionCol={data.dimensionCol}\n            >\n              <slot name={`focus-${view.type}-${data.type}`} />\n            </revogr-focus>\n          </revogr-overlay-selection>\n        );\n\n        dataViews.push(dataView);\n      });\n\n      // Add viewport scroll in the end\n      viewPortHtml.push(\n        <revogr-viewport-scroll\n          {...view.prop}\n          ref={el =>\n            this.scrollingService.registerElement(el, `${view.prop.key}`)\n          }\n          onScrollviewport={e =>\n            this.scrollingService.proxyScroll(e.detail, `${view.prop.key}`)\n          }\n          onScrollviewportsilent={e =>\n            this.scrollingService.scrollSilentService(\n              e.detail,\n              `${view.prop.key}`,\n            )\n          }\n        >\n          {dataViews}\n        </revogr-viewport-scroll>,\n      );\n    }\n\n    viewportSections.push(viewPortHtml);\n    // #endregion\n\n    const typeRow: DimensionType = 'rgRow';\n    const typeCol: DimensionType = 'rgCol';\n\n    const viewports = this.viewportProvider.stores;\n    const dimensions = this.dimensionProvider.stores;\n\n    return (\n      <Host>\n        {this.hideAttribution ? null : (\n          <revogr-attribution class=\"attribution\" />\n        )}\n        <slot name=\"header\" />\n        <div\n          class=\"main-viewport\"\n          onClick={(e: MouseEvent) => {\n            if (e.currentTarget === e.target) {\n              this.viewport?.clearEdit();\n            }\n          }}\n        >\n          <div class=\"viewports\">\n            <slot name=\"viewport\" />\n            {viewportSections}\n            <revogr-scroll-virtual\n              class=\"vertical\"\n              dimension={typeRow}\n              viewportStore={viewports[typeRow].store}\n              dimensionStore={dimensions[typeRow].store}\n              ref={el => this.scrollingService.registerElement(el, 'rowScroll')}\n              onScrollvirtual={e => this.scrollingService.proxyScroll(e.detail)}\n            />\n            <OrderRenderer ref={e => (this.orderService = e)} />\n          </div>\n        </div>\n        <revogr-scroll-virtual\n          class=\"horizontal\"\n          dimension={typeCol}\n          viewportStore={viewports[typeCol].store}\n          dimensionStore={dimensions[typeCol].store}\n          ref={el => this.scrollingService.registerElement(el, 'colScroll')}\n          onScrollvirtual={e => this.scrollingService.proxyScroll(e.detail)}\n        />\n        <revogr-extra ref={el => (this.extraService = el)} nodes={this.extraElements} />\n        <slot name=\"footer\" />\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    // Remove all plugins, to avoid memory leaks\n    // and unexpected behaviour when the component is removed\n    this.removePlugins();\n  }\n}\n"],"mappings":"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","ignoreList":[]}