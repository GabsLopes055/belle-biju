{"version":3,"names":["LETTER_BLOCK_SIZE","calculateRowHeaderSize","itemsLength","rowHeaderColumn","minWidth","size","Math","max","toString","length","getUpdatedItemsByPosition","pos","items","realCount","virtualSize","dimension","activeItem","getItemByPosition","firstItem","getFirstItem","toUpdate","changedOffsetStart","itemIndex","recombineByOffset","abs","Object","assign","positiveDirection","maxSizeVirtualSize","getMaxVirtualSize","realSize","extra","addMissingItems","updateMissingAndRange","getItems","firstItemStart","start","firstItemIndex","origSize","originItemSize","maxSize","maxCount","sizes","end","min","missing","range","splice","existingCollection","lastItem","getLastItem","opt","currentSize","index","newSize","getItemSize","push","offset","data","newItems","itemsCount","newRange","undefined","i","newIndex","newEnd","Error","_a","newStart","console","error","_b","isActiveRange","first","last","isActiveRangeOutsideLastItem","s","setItemSizes","vpItems","initialIndex","lastCoordinate","count","item","initialState","clientSize","ViewportStore","this","lastKnownScroll","value","constructor","type","store","createStore","setViewPortCoordinate","position","force","viewportSize","get","frameOffset","singleOffsetInPx","outsize","maxCoordinate","allItems","setViewport","setOriginalSizes","setStore"],"sources":["src/utils/row-header-utils.ts","src/store/vp/viewport.helpers.ts","src/store/vp/viewport.store.ts"],"sourcesContent":["import { RowHeaders } from '..';\n\nconst LETTER_BLOCK_SIZE = 10;\nexport const calculateRowHeaderSize = (\n  itemsLength: number,\n  rowHeaderColumn?: RowHeaders,\n  minWidth = 50,\n) => {\n  return (\n    rowHeaderColumn?.size ||\n    Math.max((itemsLength.toString().length + 1) * LETTER_BLOCK_SIZE, minWidth)\n  );\n};\n","import {\n  DimensionSettingsState,\n  PositionItem,\n  ViewSettingSizeProp,\n  ViewportStateItems,\n  VirtualPositionItem,\n  Range,\n} from '@type';\n\nimport { getItemByPosition } from '../dimension/dimension.helpers';\n\nexport type DimensionDataViewport = Pick<\n  DimensionSettingsState,\n  | 'indexes'\n  | 'positionIndexes'\n  | 'positionIndexToItem'\n  | 'sizes'\n  | 'originItemSize'\n  | 'realSize'\n>;\n\nexport type ItemsToUpdate = Pick<ViewportStateItems, 'items' | 'start' | 'end'>;\n/**\n * Update items based on new scroll position\n * If viewport wasn't changed fully simple recombination of positions\n * Otherwise rebuild viewport items\n */\nexport function getUpdatedItemsByPosition<T extends ItemsToUpdate>(\n  pos: number, // coordinate\n  items: T,\n  realCount: number,\n  virtualSize: number,\n  dimension: DimensionDataViewport,\n): ItemsToUpdate {\n  const activeItem: PositionItem = getItemByPosition(dimension, pos);\n  const firstItem = getFirstItem(items);\n  let toUpdate: ItemsToUpdate | undefined;\n  // do simple position recombination if items already present in viewport\n  if (firstItem) {\n    let changedOffsetStart = activeItem.itemIndex - (firstItem.itemIndex || 0);\n    // if item changed\n    if (changedOffsetStart) {\n      // simple recombination\n      toUpdate = recombineByOffset(Math.abs(changedOffsetStart), {\n        positiveDirection: changedOffsetStart > -1,\n        ...dimension,\n        ...items,\n      });\n    }\n  }\n\n  const maxSizeVirtualSize = getMaxVirtualSize(\n    virtualSize,\n    dimension.realSize,\n    activeItem,\n  );\n  // if partial recombination add items if revo-viewport has some space left\n  if (toUpdate) {\n    const extra = addMissingItems(\n      activeItem,\n      realCount,\n      maxSizeVirtualSize,\n      toUpdate,\n      dimension,\n    );\n    if (extra.length) {\n      updateMissingAndRange(toUpdate.items, extra, toUpdate);\n    }\n  }\n\n  // new collection if no items after replacement full replacement\n  if (!toUpdate) {\n    const items = getItems({\n      firstItemStart: activeItem.start,\n      firstItemIndex: activeItem.itemIndex,\n      origSize: dimension.originItemSize,\n      maxSize: maxSizeVirtualSize,\n      maxCount: realCount,\n      sizes: dimension.sizes,\n    });\n\n    // range now comes from 0 to length - 1\n    toUpdate = {\n      items,\n      start: 0,\n      end: items.length - 1,\n    };\n  }\n  return toUpdate;\n}\n\n// virtual size can differ based on scroll position if some big items are present\n// scroll can be in the middle of item and virtual size will be larger\n// so we need to exclude this part from virtual size hence it's already passed\nfunction getMaxVirtualSize(\n  virtualSize: number,\n  realSize: number,\n  activeItem: PositionItem,\n) {\n  return Math.min(virtualSize + (activeItem.end - activeItem.start), realSize);\n}\n\nexport function updateMissingAndRange(\n  items: VirtualPositionItem[],\n  missing: VirtualPositionItem[],\n  range: Range,\n) {\n  items.splice(range.end + 1, 0, ...missing);\n  // update range if start larger after recombination\n  if (\n    range.start >= range.end &&\n    !(range.start === range.end && range.start === 0)\n  ) {\n    range.start += missing.length;\n  }\n  range.end += missing.length;\n}\n\n/**\n * If partial replacement\n * this function adds items if viewport has some space left\n */\nexport function addMissingItems<T extends ItemsToUpdate>(\n  firstItem: PositionItem,\n  realCount: number,\n  virtualSize: number,\n  existingCollection: T,\n  dimension: Pick<DimensionSettingsState, 'sizes' | 'originItemSize'>,\n): VirtualPositionItem[] {\n  const lastItem: VirtualPositionItem = getLastItem(existingCollection);\n  const items = getItems({\n    sizes: dimension.sizes,\n    firstItemStart: lastItem.end,\n    firstItemIndex: lastItem.itemIndex + 1,\n    origSize: dimension.originItemSize,\n    maxSize: virtualSize - (lastItem.end - firstItem.start),\n    maxCount: realCount,\n  });\n  return items;\n}\n\n/**\n * Get wiewport items parameters\n * caching position and calculating items count in viewport\n */\nexport function getItems(\n  opt: {\n    firstItemIndex: number;\n    firstItemStart: number;\n    origSize: number;\n    maxSize: number; // virtual size\n    maxCount: number; // real item count, where the last item\n    sizes?: ViewSettingSizeProp;\n  },\n  currentSize = 0,\n) {\n  const items: VirtualPositionItem[] = [];\n\n  let index = opt.firstItemIndex;\n  let size = currentSize;\n\n  // max size or max count\n  while (size <= opt.maxSize && index < opt.maxCount) {\n    const newSize = getItemSize(index, opt.sizes, opt.origSize);\n    items.push({\n      start: opt.firstItemStart + size,\n      end: opt.firstItemStart + size + newSize,\n      itemIndex: index,\n      size: newSize,\n    });\n    size += newSize;\n    index++;\n  }\n  return items;\n}\n\n/**\n * Do batch items recombination\n * If items not overlapped with existing viewport returns null\n */\ntype RecombindDimensionData = Pick<\n  DimensionSettingsState,\n  'sizes' | 'realSize' | 'originItemSize'\n>;\ntype RecombineOffsetData = {\n  positiveDirection: boolean;\n} & ItemsToUpdate &\n  RecombindDimensionData;\nexport function recombineByOffset(\n  offset: number,\n  data: RecombineOffsetData,\n): ItemsToUpdate | undefined {\n  const newItems = [...data.items];\n  const itemsCount = newItems.length;\n  let newRange = {\n    start: data.start,\n    end: data.end,\n  };\n\n  // if offset out of revo-viewport, makes sense whole redraw\n  if (offset > itemsCount) {\n    return undefined;\n  }\n\n  // is direction of scroll positive\n  if (data.positiveDirection) {\n    // push item to the end\n    let lastItem: VirtualPositionItem = getLastItem(data);\n\n    let i = newRange.start;\n    const length = i + offset;\n    for (; i < length; i++) {\n      const newIndex = lastItem.itemIndex + 1;\n      const size = getItemSize(\n        newIndex,\n        data.sizes,\n        data.originItemSize,\n      );\n\n      // if item overlapped limit break a loop\n      if (lastItem.end + size > data.realSize) {\n        break;\n      }\n\n      // new item index to recombine\n      let newEnd = i % itemsCount;\n\n      // item should always present, we do not create new item, we recombine them\n      if (!newItems[newEnd]) {\n        throw new Error('incorrect index');\n      }\n\n      // do recombination\n      newItems[newEnd] = lastItem = {\n        start: lastItem.end,\n        end: lastItem.end + size,\n        itemIndex: newIndex,\n        size: size,\n      };\n      // update range\n      newRange.start++;\n      newRange.end = newEnd;\n    }\n\n    // direction is negative\n  } else {\n    // push item to the start\n    let firstItem = getFirstItem(data);\n\n    const end = newRange.end;\n    for (let i = 0; i < offset; i++) {\n      const newIndex = (firstItem?.itemIndex ?? 0) - 1;\n      const size = getItemSize(\n        newIndex,\n        data.sizes,\n        data.originItemSize,\n      );\n\n      // new item index to recombine\n      let newStart = end - i;\n      newStart = (newStart < 0 ? itemsCount + newStart : newStart) % itemsCount;\n\n      // item should always present, we do not create new item, we recombine them\n      if (!newItems[newStart]) {\n        console.error('incorrect index');\n        break;\n      }\n\n      // do recombination\n      const firstItemStart = firstItem?.start ?? 0;\n      newItems[newStart] = firstItem = {\n        start: firstItemStart - size,\n        end: firstItemStart,\n        itemIndex: newIndex,\n        size: size,\n      };\n      // update range\n      newRange.start = newStart;\n      newRange.end--;\n    }\n  }\n  const range = {\n    start:\n      (newRange.start < 0 ? itemsCount + newRange.start : newRange.start) %\n      itemsCount,\n    end:\n      (newRange.end < 0 ? itemsCount + newRange.end : newRange.end) %\n      itemsCount,\n  };\n  return {\n    items: newItems,\n    ...range,\n  };\n}\n\nfunction getItemSize(\n  index: number,\n  sizes?: ViewSettingSizeProp,\n  origSize = 0,\n): number {\n  if (sizes && sizes[index]) {\n    return sizes[index];\n  }\n  return origSize;\n}\n\n/**\n * Verify if position is in range of the PositionItem, start and end are included\n */\nexport function isActiveRange(\n  pos: number,\n  realSize: number,\n  first?: PositionItem,\n  last?: PositionItem,\n): boolean {\n  if (!first || !last) {\n    return false;\n  }\n  // if position is in range of first item\n  // or position is after first item and last item is the last item in real size\n  return (\n    (pos >= first.start && pos <= first.end) ||\n    (pos > first.end && last.end === realSize)\n  );\n}\n\nexport function isActiveRangeOutsideLastItem(\n  pos: number,\n  virtualSize: number,\n  firstItem?: PositionItem,\n  lastItem?: PositionItem,\n) {\n  // if no first item, means no items in viewport\n  if (!firstItem) {\n    return false;\n  }\n  return virtualSize + pos > (lastItem?.end ?? 0);\n}\n\nexport function getFirstItem(\n  s: ItemsToUpdate,\n) {\n  return s.items[s.start];\n}\n\nexport function getLastItem(s: ItemsToUpdate): VirtualPositionItem {\n  return s.items[s.end];\n}\n\n/**\n * Set items sizes from start index to end\n * @param vpItems\n * @param start\n * @param size\n * @param lastCoordinate\n * @returns\n */\nexport function setItemSizes(\n  vpItems: VirtualPositionItem[],\n  initialIndex: number,\n  size: number,\n  lastCoordinate: number,\n) {\n  const items = [...vpItems];\n  const count = items.length;\n\n  let pos = lastCoordinate;\n  let i = 0;\n  let start = initialIndex;\n\n  // viewport not inited\n  if (!count) {\n    return [];\n  }\n  // loop through array from initial item after recombination\n  while (i < count) {\n    const item = items[start];\n    item.start = pos;\n    item.size = size;\n    item.end = item.start + size;\n    pos = item.end;\n    // loop by start index\n    start++;\n    i++;\n\n    // if start index out of array, reset it\n    if (start === count) {\n      start = 0;\n    }\n  }\n  return items;\n}\n","import {\n  DimensionDataViewport,\n  addMissingItems,\n  getFirstItem,\n  getLastItem,\n  getUpdatedItemsByPosition,\n  isActiveRange,\n  setItemSizes,\n  updateMissingAndRange,\n  isActiveRangeOutsideLastItem,\n  ItemsToUpdate,\n} from './viewport.helpers';\nimport { createStore } from '@stencil/store';\nimport { type Observable, setStore } from '../../utils';\nimport type {\n  VirtualPositionItem,\n  ViewportState,\n  MultiDimensionType,\n} from '@type';\n\n/**\n * Viewport store\n * Used for virtualization (process of rendering only visible part of data)\n * Redraws viewport based on position and dimension\n */\nfunction initialState(): ViewportState {\n  return {\n    // virtual item information per rendered item\n    items: [],\n    // virtual dom item order to render\n    start: 0,\n    end: 0,\n\n    // size of virtual viewport in px\n    virtualSize: 0,\n\n    // total number of items\n    realCount: 0,\n\n    // size of viewport in px\n    clientSize: 0,\n  };\n}\n\n/**\n * Viewport store class\n */\nexport class ViewportStore {\n  readonly store: Observable<ViewportState>;\n\n  // last coordinate for store position restore\n  private lastKnownScroll = 0;\n\n  get lastCoordinate() {\n    return this.lastKnownScroll;\n  }\n  set lastCoordinate(value: number) {\n    this.lastKnownScroll = value;\n  }\n  constructor(readonly type: MultiDimensionType) {\n    this.store = createStore(initialState());\n  }\n\n  /**\n   * Render viewport based on coordinate\n   * It's the main method for draw\n   * Use force if you want to re-render viewport\n   */\n  setViewPortCoordinate(\n    position: number,\n    dimension: DimensionDataViewport,\n    force = false,\n  ) {\n    const viewportSize = this.store.get('virtualSize');\n    // no visible data to calculate\n    if (!viewportSize) {\n      return;\n    }\n\n    const frameOffset = 1;\n    const singleOffsetInPx = dimension.originItemSize * frameOffset;\n    // add offset to virtual size from both sides\n    const outsize = singleOffsetInPx * 2;\n    // math virtual size is based on visible area + 2 items outside of visible area\n    const virtualSize = viewportSize + outsize;\n\n    // expected no scroll if real size less than virtual size, position is 0\n    let maxCoordinate = 0;\n    // if there is nodes outside of viewport, max coordinate has to be adjusted\n    if (dimension.realSize > viewportSize) {\n      // max coordinate is real size minus virtual/rendered space\n      maxCoordinate = dimension.realSize - viewportSize - singleOffsetInPx;\n    }\n\n    let pos = position;\n    // limit position to max and min coordinates\n    if (pos < 0) {\n      pos = 0;\n    } else if (pos > maxCoordinate) {\n      pos = maxCoordinate;\n    }\n\n    // store last coordinate for further restore on redraw\n    this.lastCoordinate = pos;\n\n    // actual position is less than first item start based on offset\n    pos -= singleOffsetInPx;\n    pos = pos < 0 ? 0 : pos < maxCoordinate ? pos : maxCoordinate;\n\n    let allItems: ItemsToUpdate;\n    // if force clear all items and start from 0\n    if (force) {\n      allItems = {\n        items: [],\n        start: 0,\n        end: 0,\n      };\n    } else {\n      allItems = this.getItems();\n    }\n\n    const firstItem: VirtualPositionItem | undefined = getFirstItem(allItems);\n    const lastItem: VirtualPositionItem | undefined = getLastItem(allItems);\n\n    let toUpdate: Partial<ViewportState> = {};\n\n    // left position changed\n    // verify if new position is in range of previously rendered first item\n    if (!isActiveRange(pos, dimension.realSize, firstItem, lastItem)) {\n      toUpdate = {\n        ...toUpdate,\n        ...getUpdatedItemsByPosition(\n          pos,\n          allItems,\n          this.store.get('realCount'),\n          virtualSize,\n          dimension,\n        ),\n      };\n      this.setViewport({ ...toUpdate });\n      // verify is render area is outside of last item\n    } else if (\n      isActiveRangeOutsideLastItem(pos, virtualSize, firstItem, lastItem)\n    ) {\n      const items = [...allItems.items];\n      // check is any item missing for fulfill content\n      const missing = addMissingItems(\n        firstItem,\n        this.store.get('realCount'),\n        virtualSize + pos - firstItem.start,\n        allItems,\n        {\n          sizes: dimension.sizes,\n          originItemSize: dimension.originItemSize,\n        },\n      );\n\n      // update missing items\n      if (missing.length) {\n        const range = {\n          start: this.store.get('start'),\n          end: this.store.get('end'),\n        };\n        updateMissingAndRange(items, missing, range);\n        toUpdate = {\n          ...toUpdate,\n          items: [...items],\n          ...range,\n        };\n        this.setViewport({ ...toUpdate });\n      }\n    }\n  }\n\n  /**\n   * Set sizes for existing items\n   */\n  setOriginalSizes(size: number) {\n    const items = this.store.get('items');\n    const count = items.length;\n    // viewport not inited\n    if (!count) {\n      return;\n    }\n\n    setStore(this.store, {\n      items: setItemSizes(\n        items,\n        this.store.get('start'),\n        size,\n        this.lastCoordinate,\n      ),\n    });\n  }\n\n  getItems(): ItemsToUpdate {\n    return {\n      items: this.store.get('items'),\n      start: this.store.get('start'),\n      end: this.store.get('end'),\n    };\n  }\n\n  setViewport(data: Partial<ViewportState>) {\n    // drop items on virtual size change, require a new item set\n    // drop items on real size change, require a new item set\n    if (typeof data.realCount === 'number' || typeof data.virtualSize === 'number') {\n      data = { ...data, items: data.items || [] };\n    }\n    setStore(this.store, data);\n  }\n}\n"],"mappings":"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","ignoreList":[]}