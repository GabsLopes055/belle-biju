{"version":3,"names":["HEADER_SLOT","FOOTER_SLOT","CONTENT_SLOT","DATA_SLOT","getLastCell","data","rowType","lastVisibleColumnCount","viewports","colType","store","get","lastVisibleRowCount","x","y","viewportDataPartition","type","slot","fixed","colData","colStore","viewportCol","viewportRow","lastCell","canDrag","position","dataStore","rowStores","dimensionCol","dimensions","dimensionRow","style","height","undefined"],"sources":["src/components/revoGrid/viewport.helpers.ts"],"sourcesContent":["/**\n * Collects data for pinned columns in the required @ViewportProps format.\n */\n\nimport { DimensionRows, MultiDimensionType, SlotType, Cell, ViewportColumn } from '@type';\n\n/**\n * Represents the slot names for the viewport slots.\n */\nexport const HEADER_SLOT = 'header'; // Slot name for the header slot\nexport const FOOTER_SLOT = 'footer'; // Slot name for the footer slot\nexport const CONTENT_SLOT = 'content'; // Slot name for the content slot\nexport const DATA_SLOT = 'data'; // Slot name for the data slot\n\n/**\n * Returns the last visible cell in the viewport for a given row type.\n * Coordinates are not zero-based and are relative to the viewport.\n * If needed to be zero-based they can be adjusted by subtracting 1.\n */\nexport function getLastCell(\n  data: ViewportColumn,\n  rowType: MultiDimensionType,\n): Cell {\n  // Get the last visible column count from the viewport column data.\n  const lastVisibleColumnCount = data.viewports[data.colType].store.get('realCount');\n\n  // Get the last visible row count for the given row type from the viewport column data.\n  const lastVisibleRowCount = data.viewports[rowType].store.get('realCount');\n\n  // Return the last visible cell with the last visible column count and row count.\n  return {\n    x: lastVisibleColumnCount,\n    y: lastVisibleRowCount,\n  };\n}\n\n\nexport function viewportDataPartition(\n  data: ViewportColumn,\n  type: DimensionRows,\n  slot: SlotType,\n  fixed?: boolean,\n) {\n  return {\n    colData: data.colStore,\n    viewportCol: data.viewports[data.colType].store,\n    viewportRow: data.viewports[type].store,\n    // lastCell is the last real coordinate + 1\n    lastCell: getLastCell(data, type),\n    slot,\n    type,\n    canDrag: !fixed,\n    position: data.position,\n    dataStore: data.rowStores[type].store,\n    dimensionCol: data.dimensions[data.colType].store,\n    dimensionRow: data.dimensions[type].store,\n    style: fixed\n      ? { height: `${data.dimensions[type].store.get('realSize')}px` }\n      : undefined,\n  };\n}\n\nexport type VPPartition = ReturnType<typeof viewportDataPartition>;"],"mappings":";;;MASaA,EAAc,S,MACdC,EAAc,S,MACdC,EAAe,U,MACfC,EAAY,O,SAOTC,EACdC,EACAC,GAGA,MAAMC,EAAyBF,EAAKG,UAAUH,EAAKI,SAASC,MAAMC,IAAI,aAGtE,MAAMC,EAAsBP,EAAKG,UAAUF,GAASI,MAAMC,IAAI,aAG9D,MAAO,CACLE,EAAGN,EACHO,EAAGF,EAEP,C,SAGgBG,EACdV,EACAW,EACAC,EACAC,GAEA,MAAO,CACLC,QAASd,EAAKe,SACdC,YAAahB,EAAKG,UAAUH,EAAKI,SAASC,MAC1CY,YAAajB,EAAKG,UAAUQ,GAAMN,MAElCa,SAAUnB,EAAYC,EAAMW,GAC5BC,OACAD,OACAQ,SAAUN,EACVO,SAAUpB,EAAKoB,SACfC,UAAWrB,EAAKsB,UAAUX,GAAMN,MAChCkB,aAAcvB,EAAKwB,WAAWxB,EAAKI,SAASC,MAC5CoB,aAAczB,EAAKwB,WAAWb,GAAMN,MACpCqB,MAAOb,EACH,CAAEc,OAAQ,GAAG3B,EAAKwB,WAAWb,GAAMN,MAAMC,IAAI,iBAC7CsB,UAER,Q","ignoreList":[]}