{"version":3,"file":"plugin.types.js","sourceRoot":"","sources":["../../src/types/plugin.types.ts"],"names":[],"mappings":"","sourcesContent":["import { PluginBaseComponent } from '@type';\nimport ColumnDataProvider from '../services/column.data.provider';\nimport { DataProvider } from '../services/data.provider';\nimport DimensionProvider from '../services/dimension.provider';\nimport type { SelectionStoreConnector } from '../services/selection.store.connector';\nimport ViewportProvider from '../services/viewport.provider';\n\nexport interface PluginServiceBase {\n  get(): PluginBaseComponent[];\n  add(plugin: PluginBaseComponent): void;\n  remove(plugin: PluginBaseComponent): void;\n  getByClass<T extends PluginBaseComponent>(\n    pluginClass: new (...args: any[]) => T,\n  ): T | undefined;\n}\n\n/**\n * Services that are provided by the various plugins for use by the grid. Each plugin\n * is responsible for providing a specific service, and the `PluginProviders` type collects all the services provided\n * by the plugins.\n */\nexport type PluginProviders = {\n  /**\n   * The data service provides access to the grid data.\n   */\n  data: DataProvider;\n  /**\n   * The dimension service provides access to the grid's dimensions and settings.\n   */\n  dimension: DimensionProvider;\n  /**\n   * The selection service provides access to the grid's selection state.\n   */\n  selection: SelectionStoreConnector;\n  /**\n   * The column service provides access to the grid's column data.\n   */\n  column: ColumnDataProvider;\n  /**\n   * The viewport service provides access to the grid's viewport state.\n   */\n  viewport: ViewportProvider;\n\n  /**\n   * Plugin services\n   */\n\n  plugins: PluginServiceBase;\n};\n\ndeclare global {\n  type CombinedHTMLRevoGridElementEventMap = Record<string, any> &\n    HTMLRevogrClipboardElementEventMap &\n    HTMLRevogrFocusElementEventMap &\n    HTMLRevogrDataElementEventMap &\n    HTMLRevogrEditElementEventMap &\n    HTMLRevogrFilterPanelElementEventMap &\n    HTMLRevogrHeaderElementEventMap &\n    HTMLRevogrOrderEditorElementEventMap &\n    HTMLRevogrOverlaySelectionElementEventMap &\n    HTMLRevogrRowHeadersElementEventMap &\n    HTMLRevogrScrollVirtualElementEventMap &\n    HTMLRevogrViewportScrollElementEventMap &\n    HTMLVnodeHtmlElementEventMap;\n    \n  interface HTMLRevoGridElementEventMap extends CombinedHTMLRevoGridElementEventMap {\n    //\n  }\n}\n"]}