{"version":3,"file":"selection.js","sourceRoot":"","sources":["../../src/types/selection.ts"],"names":[],"mappings":"","sourcesContent":["import { type VNode } from '@stencil/core';\nimport type { DimensionRows, DimensionCols } from './dimension';\nimport type {\n  ColumnProp,\n  DataType,\n  DataLookup,\n  HyperFunc,\n  ColumnDataSchemaModel,\n  PositionItem,\n} from './interfaces';\n\nexport type RowIndex = number;\nexport type ColIndex = number;\n\n/**\n * Represents the state of the selection store.\n * It contains information about the selection range, temporary range,\n * focused cell, editing cell, last focused cell, and next cell to focus.\n */\nexport type SelectionStoreState = {\n  range: RangeArea | null;\n  /**\n   * Temporary range selection area\n   */\n  tempRange: RangeArea | null;\n  /**\n   * Type of the temporary range selection\n   */\n  tempRangeType: string | null;\n  /**\n   * Focused cell coordinate\n   */\n  focus: Cell | null;\n  /**\n   * Editing cell store\n   */\n  edit: EditCellStore | null;\n  /**\n   * Last cell which was focused\n   */\n  lastCell: Cell | null;\n  /**\n   * Next cell to focus\n   */\n  nextFocus: Cell | null;\n};\nexport type RangeArea = {\n  x: ColIndex;\n  y: RowIndex;\n  x1: ColIndex;\n  y1: RowIndex;\n};\nexport type TempRange = {\n  type: string;\n  area: RangeArea;\n};\nexport type OldNewRangeMapping = {\n  [newRowIndex: number]: {\n    [T in ColumnProp]: { // new column prop\n      rowIndex: number; // original row\n      colIndex: number; // original col\n      colProp: ColumnProp; // original column prop\n    };\n  };\n};\nexport type ChangedRange = {\n  type: DimensionRows;\n  colType: DimensionCols;\n  newRange: RangeArea; // new range to apply\n  oldRange: RangeArea; // range to copy from\n  mapping: OldNewRangeMapping;\n  newData: {\n    [newRowIndex: number]: DataType;\n  };\n};\n\n/**\n * Cell coordinates\n */\nexport interface Cell {\n  x: ColIndex;\n  y: RowIndex;\n}\nexport type FocusedCells = {\n  focus: Cell;\n  end: Cell;\n};\nexport type RangeAreaCss = {\n  left: string;\n  top: string;\n  width: string;\n  height: string;\n};\n\nexport type SaveDataDetails = {\n  rgRow: RowIndex;\n  rgCol: ColIndex;\n  type: DimensionRows;\n  prop: ColumnProp;\n  val: any;\n  preventFocus?: boolean;\n};\n\nexport type BeforeEdit = BeforeSaveDataDetails;\n\nexport type RowDragStartDetails = {\n  cell: Cell;\n  text: string;\n  pos: PositionItem;\n  event: MouseEvent;\n  rowType: DimensionRows;\n  model: any;\n};\n\nexport interface BeforeSaveDataDetails extends ColumnDataSchemaModel {\n  /**\n   * Value from editor to save, not part of the model value yet\n   */\n  val?: any;\n}\n\nexport type BeforeRangeSaveDataDetails = {\n  data: DataLookup;\n  models: Partial<DataLookup>;\n  type: DimensionRows;\n  newRange: RangeArea | null;\n  oldRange: RangeArea | null;\n};\n\nexport type AfterEditEvent = BeforeRangeSaveDataDetails | BeforeSaveDataDetails;\n\n/**\n * Edit cell info for store\n */\nexport interface EditCellStore extends Cell {\n  val?: any;\n}\n/**\n * Edit cell info for editor\n */\nexport type EditCell = EditCellStore & BeforeSaveDataDetails;\n\n/**\n * Available editors in grid\n */\nexport type Editors = {\n  [name: string]: EditorCtr;\n};\n\n/**\n * Editor component\n */\nexport type EditorCtr = EditorCtrCallable | EditorCtrConstructible;\n\n\n/**\n * Editor component callable function\n */\nexport type EditorCtrCallable = {\n  (\n    column: ColumnDataSchemaModel,\n    save: (value?: any, preventFocus?: boolean) => void,\n    close: (focusNext?: boolean) => void,\n  ): EditorBase;\n}\n/**\n * Editor component constructible class\n */\nexport interface EditorCtrConstructible {\n  new (\n    column: ColumnDataSchemaModel,\n    save: (value: any, preventFocus?: boolean) => void,\n    close: (focusNext?: boolean) => void,\n  ): EditorBase;\n}\n\n/**\n * Editor interface\n */\nexport interface EditorBase {\n  element?: Element | null;\n  editCell?: EditCell;\n  /**\n   * Autosave usage when you want to return value for models.\n   */\n  getValue?(): any;\n  /**\n   * For Editor plugin internal usage.\n   * Prevents Editor save. Manual save usage required.\n   */\n  beforeAutoSave?(val?: any): boolean;\n  beforeUpdate?(): void;\n  /**\n   * Before editor got disconnected.\n   * Can be triggered multiple times before actual disconnect.\n   */\n  beforeDisconnect?(): void;\n  componentDidRender?(): void;\n  disconnectedCallback?(): void;\n  render(\n    createElement: HyperFunc<VNode>,\n    additionalData?: any,\n  ): VNode | VNode[] | string | void;\n}\n"]}