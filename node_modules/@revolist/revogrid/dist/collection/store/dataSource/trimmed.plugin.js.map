{"version":3,"file":"trimmed.plugin.js","sourceRoot":"","sources":["../../../src/store/dataSource/trimmed.plugin.ts"],"names":[],"mappings":"AAMA;;;GAGG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,KAAuC,EACA,EAAE,CAAC,CAAC;IAC3C,GAAG,CAAC,CAAC,EAAE,MAAM;QACX,QAAQ,CAAC,EAAE,CAAC;YACV,KAAK,SAAS,CAAC,CAAC,CAAC;gBACf,yBAAyB;gBACzB,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBACtC,MAAM,OAAO,GAAG,kBAAkB,CAAC,MAAiB,CAAC,CAAC;gBAEtD,oDAAoD;gBACpD,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEhD,6BAA6B;gBAC7B,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;gBAC7B,MAAM;YACR,CAAC;QACH,CAAC;IACH,CAAC;CACF,CAAC,CAAC;AAEH,MAAM,UAAU,kBAAkB,CAAC,YAAqB;IACtD,MAAM,OAAO,GAAkB,EAAE,CAAC;IAElC,KAAK,IAAI,UAAU,IAAI,YAAY,EAAE,CAAC;QACpC,iCAAiC;QACjC,KAAK,IAAI,CAAC,IAAI,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC;YACvC,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { Observable, PluginSubscribe } from '../../utils';\nimport { DSourceState, GDataType } from './data.store';\n\nexport type TrimmedEntity = { [physicalIndexInSource: number]: boolean };\nexport type Trimmed = Record<string, TrimmedEntity>;\n\n/**\n * Hide items from main collection\n * But keep them in store\n */\nexport const trimmedPlugin = <T extends GDataType>(\n  store: Observable<DSourceState<T, any>>,\n): PluginSubscribe<DSourceState<T, any>> => ({\n  set(k, newVal) {\n    switch (k) {\n      case 'trimmed': {\n        // full sorted items list\n        const proxy = store.get('proxyItems');\n        const trimmed = gatherTrimmedItems(newVal as Trimmed);\n\n        // filter our physical indexes which are not trimmed\n        const newItems = proxy.filter(v => !trimmed[v]);\n\n        // set trimmed items in store\n        store.set('items', newItems);\n        break;\n      }\n    }\n  },\n});\n\nexport function gatherTrimmedItems(trimmedItems: Trimmed) {\n  const trimmed: TrimmedEntity = {};\n\n  for (let trimmedKey in trimmedItems) {\n    // trimmed overweight not trimmed\n    for (let t in trimmedItems[trimmedKey]) {\n      trimmed[t] = trimmed[t] || trimmedItems[trimmedKey][t];\n    }\n  }\n  return trimmed;\n}\n"]}