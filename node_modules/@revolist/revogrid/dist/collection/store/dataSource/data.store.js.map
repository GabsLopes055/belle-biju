{"version":3,"file":"data.store.js","sourceRoot":"","sources":["../../../src/store/dataSource/data.store.ts"],"names":[],"mappings":"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","sourcesContent":["import findIndex from 'lodash/findIndex';\nimport range from 'lodash/range';\nimport { createStore } from '@stencil/store';\n\nimport { Trimmed, trimmedPlugin } from './trimmed.plugin';\nimport { setStore, Observable } from '../../utils';\nimport { proxyPlugin } from './data.proxy';\nimport { GroupLabelTemplateFunc } from '../../plugins/groupingRow/grouping.row.types';\nimport type {\n  DimensionRows,\n  DimensionCols,\n  ColumnProperties,\n  ColumnGrouping,\n  ColumnRegular,\n  DataType,\n  DataSourceState,\n  ColumnProp,\n} from '@type';\n\nexport interface Group extends ColumnProperties {\n  name: string;\n  children: (ColumnGrouping | ColumnRegular)[];\n  // props/ids\n  ids: (string | number)[];\n}\nexport type Groups = Record<any, any>;\nexport type GDataType = DataType | ColumnRegular;\nexport type GDimension = DimensionRows | DimensionCols;\nexport type DSourceState<\n  T1 extends GDataType,\n  T2 extends GDimension,\n> = DataSourceState<T1, T2> & {\n  groupingCustomRenderer?: GroupLabelTemplateFunc | null;\n};\n\n/**\n * Data store\n * Manage the state of a data source and provide methods for updating, adding, and refreshing the data.\n */\nexport class DataStore<T extends GDataType, ST extends GDimension> {\n  private readonly dataStore: Observable<DSourceState<T, ST>>;\n  get store(): Observable<DSourceState<T, ST>> {\n    return this.dataStore;\n  }\n  constructor(type: ST, storeData?: DSourceState<T, ST>) {\n    const store = (this.dataStore = createStore<DSourceState<T, ST>>({\n      items: [],\n      proxyItems: [],\n      source: [],\n      groupingDepth: 0,\n      groups: {},\n      type,\n      trimmed: {},\n      groupingCustomRenderer: undefined,\n      ...storeData,\n    }));\n    store.use(proxyPlugin(store));\n    store.use(trimmedPlugin(store));\n  }\n\n  /**\n   * full data source update\n   * @param source - data column/rgRow source\n   * @param grouping - grouping information if present\n   */\n  updateData(\n    source: T[],\n    grouping?: {\n      depth: number;\n      groups?: Groups;\n      customRenderer?: GroupLabelTemplateFunc;\n    },\n    silent = false,\n  ) {\n    // during full update we do drop trim\n    if (!silent) {\n      this.store.set('trimmed', {});\n    }\n    // clear items\n    this.store.set('items', []);\n    const items = range(0, source?.length || 0);\n\n    // set proxy first\n    setStore(this.store, {\n      source,\n      proxyItems: [...items],\n    });\n    // update data items\n    this.store.set('items', items);\n    // apply grouping if present\n    if (grouping) {\n      setStore(this.store, {\n        groupingDepth: grouping.depth,\n        groups: grouping.groups,\n        groupingCustomRenderer: grouping.customRenderer,\n      });\n    }\n  }\n\n  addTrimmed(some: Partial<Trimmed>) {\n    let trimmed = this.store.get('trimmed');\n    trimmed = { ...trimmed, ...some };\n    setStore(this.store, { trimmed });\n  }\n\n  setSourceData(items: Record<number, any>, mutate = true) {\n    setSourceByVirtualIndex(this.store, items, mutate);\n  }\n\n  // local data update\n  setData(input: Partial<DSourceState<T, ST>>) {\n    const data: Partial<DSourceState<T, ST>> = {\n      ...input,\n    };\n    setStore(this.store, data);\n  }\n\n  refresh() {\n    const source = this.store.get('source');\n    this.store.set('source', [...source]);\n  }\n}\n/**\n * get physical index by virtual\n * @param store - store to process\n */\nexport function getPhysical(\n  store: Observable<DSourceState<any, any>>,\n  virtualIndex: number,\n) {\n  const items = store.get('items');\n  return items[virtualIndex];\n}\n\n/**\n * get all visible items\n * @param store - store to process\n */\nexport function getVisibleSourceItem(\n  store: Observable<DSourceState<any, any>>,\n) {\n  const source = store.get('source');\n  return store.get('items').map(v => source[v]);\n}\n\n/**\n * get mapped item from source\n * @param store - store to process\n * @param virtualIndex - virtual index to process\n */\nexport const getSourceItem = <T1 extends GDataType, T2 extends GDimension>(\n  store: Observable<DSourceState<T1, T2>>,\n  virtualIndex: number,\n) => {\n  const source = store.get('source');\n  return source[getSourcePhysicalIndex(store, virtualIndex)];\n};\n/**\n * Get physical index from virtual index\n */\nexport const getSourcePhysicalIndex = <T1 extends GDataType, T2 extends GDimension>(\n  store: Observable<DSourceState<T1, T2>>,\n  virtualIndex: number,\n) => {\n  const items = store.get('items');\n  return items[virtualIndex];\n};\n\n/**\n * Apply silently item/model/row value to data source\n * @param store  - data source with changes\n * @param modelByIndex - collection of rows/values with virtual indexes to setup/replace in store/data source\n * @param mutate - if true, store will be mutated and whole viewport will be re-rendered\n */\nexport function setSourceByVirtualIndex<T extends GDataType>(\n  store: Observable<DSourceState<T, any>>,\n  modelByIndex: Record<number, T | undefined>,\n  mutate = true,\n) {\n  const items = store.get('items');\n  const source = store.get('source');\n\n  for (let virtualIndex in modelByIndex) {\n    const realIndex = items[virtualIndex];\n    const item = modelByIndex[virtualIndex];\n    source[realIndex] = item as T;\n  }\n  if (mutate) {\n    store.set('source', [...source]);\n  }\n}\n\n/**\n * set item to source\n * @param store  - store to process\n * @param modelByIndex - collection of rows with physical indexes to setup\n * @param mutate - if true, store will be mutated and whole viewport will be re-rendered\n */\nexport function setSourceByPhysicalIndex<T extends GDataType>(\n  store: Observable<DSourceState<T, any>>,\n  modelByIndex: Record<number, T>,\n  mutate = true,\n) {\n  const source = store.get('source');\n  for (let index in modelByIndex) {\n    source[index] = modelByIndex[index];\n  }\n  if (mutate) {\n    store.set('source', [...source]);\n  }\n}\n\nexport function setItems<T extends GDataType>(\n  store: Observable<DSourceState<T, any>>,\n  items: number[],\n) {\n  store.set('items', items);\n}\n\nexport function getSourceItemVirtualIndexByProp(\n  store: Observable<DSourceState<any, any>>,\n  prop: ColumnProp,\n) {\n  const items = store.get('items');\n  const source = store.get('source');\n  const physicalIndex = findIndex(source, { prop });\n  return items.indexOf(physicalIndex);\n}\n"]}