{"version":3,"file":"dimension.trim.plugin.js","sourceRoot":"","sources":["../../../src/store/dimension/dimension.trim.plugin.ts"],"names":[],"mappings":"AAEA;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,YAG7B,EAA2C,EAAE;IAC5C,IAAI,cAAc,GAA2C,IAAI,CAAC;IAClE,IAAI,oBAAoB,GAA2C,IAAI,CAAC;IAExE,OAAO;QACL,GAAG,CAAC,GAAG,EAAE,GAAG;YACV,QAAQ,GAAG,EAAE,CAAC;gBACZ,KAAK,OAAO,CAAC,CAAC,CAAC;oBACb,iCAAiC;oBACjC,IAAI,cAAc,IAAI,cAAc,KAAK,GAAG,EAAE,CAAC;wBAC7C,cAAc,GAAG,IAAI,CAAC;wBACtB,OAAO;oBACT,CAAC;oBACD,oBAAoB,GAAG,IAAI,CAAC;oBAC5B,MAAM;gBACR,CAAC;gBACD,KAAK,SAAS,CAAC,CAAC,CAAC;oBACf,MAAM,IAAI,GAAG,GAAwC,CAAC;oBACtD,IAAI,CAAC,oBAAoB,EAAE,CAAC;wBAC1B,oBAAoB,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACzD,CAAC;oBAED,cAAc,GAAG,sBAAsB,CACrC,oBAAoB,EACpB,IAAI,IAAI,EAAE,CACX,CAAC;oBACF,2EAA2E;oBAC3E,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;oBACtC,MAAM;gBACR,CAAC;YACH,CAAC;QACH,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,SAAS,sBAAsB,CAC7B,KAAqC,EACrC,QAAwC;IAExC,MAAM,QAAQ,GAAmC,EAAE,CAAC;IACpD,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;SAC3C,GAAG,CAAC,MAAM,CAAC;SACX,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACzB,MAAM,SAAS,GAAG,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC1D,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC;QACpC,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE,CAAC;YAC9B,KAAK,EAAE,CAAC;YAER,uBAAuB;YACvB,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE,CAAC;gBAC3B,SAAS;YACX,CAAC;QACH,CAAC;QACD,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE,CAAC;YAC3B,QAAQ,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import { DimensionSettingsState } from '@type';\nimport type { Observable, PluginSubscribe } from '../../utils';\n/**\n * Plugin for trimming\n *\n * 1.a. Retrieves the previous sizes value. Saves the resulting trimmed data as a new sizes value.\n * 1.b. Stores a reference to the trimmed data to prevent further changes.\n * 2. Removes multiple and shifts the data based on the trimmed value.\n */\nexport const trimmedPlugin = (storeService: {\n  store: Observable<DimensionSettingsState>;\n  setSizes: (k: DimensionSettingsState['sizes']) => void;\n}): PluginSubscribe<DimensionSettingsState> => {\n  let trimmingObject: DimensionSettingsState['sizes'] | null = null;\n  let trimmedPreviousSizes: DimensionSettingsState['sizes'] | null = null;\n\n  return {\n    set(key, val) {\n      switch (key) {\n        case 'sizes': {\n          // prevent changes after trimming\n          if (trimmingObject && trimmingObject === val) {\n            trimmingObject = null;\n            return;\n          }\n          trimmedPreviousSizes = null;\n          break;\n        }\n        case 'trimmed': {\n          const trim = val as DimensionSettingsState['trimmed'];\n          if (!trimmedPreviousSizes) {\n            trimmedPreviousSizes = storeService.store.get('sizes');\n          }\n\n          trimmingObject = removeMultipleAndShift(\n            trimmedPreviousSizes,\n            trim || {},\n          );\n          // save a reference to the trimmed object to prevent changes after trimming\n          storeService.setSizes(trimmingObject);\n          break;\n        }\n      }\n    },\n  };\n};\n\nfunction removeMultipleAndShift<T1, T2>(\n  items: { [virtialIndex: number]: T1 },\n  toRemove: { [virtialIndex: number]: T2 },\n): { [virtialIndex: number]: T1 } {\n  const newItems: { [virtialIndex: number]: T1 } = {};\n  const sortedIndexes = Object.keys(items || {})\n    .map(Number)\n    .sort((a, b) => a - b);\n  const lastIndex = sortedIndexes[sortedIndexes.length - 1];\n  let shift = 0;\n  for (let i = 0; i <= lastIndex; i++) {\n    if (toRemove[i] !== undefined) {\n      shift++;\n\n      // skip already removed\n      if (items[i] !== undefined) {\n        continue;\n      }\n    }\n    if (items[i] !== undefined) {\n      newItems[i - shift] = items[i];\n    }\n  }\n  return newItems;\n}\n"]}