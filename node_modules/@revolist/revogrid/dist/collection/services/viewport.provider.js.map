{"version":3,"file":"viewport.provider.js","sourceRoot":"","sources":["../../src/services/viewport.provider.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,eAAe,CAAC;AACnC,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAgC,aAAa,EAAE,MAAM,QAAQ,CAAC;AAI5F,MAAM,CAAC,OAAO,OAAO,gBAAgB;IAEnC;QACE,IAAI,CAAC,MAAM,GAAG,MAAM,CAClB,CAAC,GAAG,QAAQ,EAAE,GAAG,WAAW,CAAC,EAC7B,CAAC,OAAyC,EAAE,CAAqB,EAAE,EAAE;YACnE,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;YAClC,OAAO,OAAO,CAAC;QACjB,CAAC,EACD,EAAE,CACwB,CAAC;IAC/B,CAAC;IAED,WAAW,CAAC,IAAwB,EAAE,IAA4B;QAChE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;CACF","sourcesContent":["import reduce from 'lodash/reduce';\nimport { columnTypes, rowTypes, type ViewportStoreCollection, ViewportStore } from '@store';\nimport type { MultiDimensionType, ViewportState } from '@type';\n\n\nexport default class ViewportProvider {\n  readonly stores: ViewportStoreCollection;\n  constructor() {\n    this.stores = reduce(\n      [...rowTypes, ...columnTypes],\n      (sources: Partial<ViewportStoreCollection>, k: MultiDimensionType) => {\n        sources[k] = new ViewportStore(k);\n        return sources;\n      },\n      {},\n    ) as ViewportStoreCollection;\n  }\n\n  setViewport(type: MultiDimensionType, data: Partial<ViewportState>) {\n    this.stores[type].setViewport(data);\n  }\n}\n"]}