/*!
 * Built by Revolist OU ❤️
 */
/**
 * Apply changes only if mousewheel event happened some time ago (scrollThrottling)
 */
export class LocalScrollTimer {
    constructor(scrollThrottling = 10) {
        this.scrollThrottling = scrollThrottling;
        /**
         * Last mw event time for trigger scroll function below
         * If mousewheel function was ignored we still need to trigger render
         */
        this.mouseWheelScrollTimestamp = {
            rgCol: 0,
            rgRow: 0,
        };
        this.lastKnownScrollCoordinate = {
            rgCol: 0,
            rgRow: 0,
        };
    }
    setCoordinate(e) {
        this.lastKnownScrollCoordinate[e.dimension] = e.coordinate;
    }
    /**
     * Remember last mw event time
     */
    latestScrollUpdate(dimension) {
        this.mouseWheelScrollTimestamp[dimension] = new Date().getTime();
    }
    /**
     * Check if scroll is ready to accept new value
     */
    isReady(type, coordinate) {
        const change = new Date().getTime() - this.mouseWheelScrollTimestamp[type];
        // apply after throttling
        return (change > this.scrollThrottling &&
            coordinate !== this.lastKnownScrollCoordinate[type]);
    }
}
//# sourceMappingURL=local.scroll.timer.js.map
