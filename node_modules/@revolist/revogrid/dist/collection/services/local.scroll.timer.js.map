{"version":3,"file":"local.scroll.timer.js","sourceRoot":"","sources":["../../src/services/local.scroll.timer.ts"],"names":[],"mappings":"AACA;;GAEG;AACH,MAAM,OAAO,gBAAgB;IAc3B,YAAoB,mBAAmB,EAAE;QAArB,qBAAgB,GAAhB,gBAAgB,CAAK;QAbzC;;;WAGG;QACK,8BAAyB,GAAkC;YACjE,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;SACT,CAAC;QACM,8BAAyB,GAAkC;YACjE,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;SACT,CAAC;QA+BF;;;;WAIG;QACK,8BAAyB,GAK3B,EAAE,CAAC;IAvCmC,CAAC;IAE7C,aAAa,CAAC,CAAmD;QAC/D,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC;IAC7D,CAAC;IAED;;OAEG;IACH,kBAAkB,CAAC,SAAwB;QACzC,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;IACnE,CAAC;IAED,OAAO,CAAC,IAAmB,EAAE,UAAkB;QAC7C,mCAAmC;QACnC,IAAI,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAE,CAAC;YACzC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;QAClC,CAAC;QACD,yBAAyB;QACzB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC7C,CAAC;IAEO,YAAY,CAAC,IAAmB,EAAE,UAAkB;QAC1D,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QACjC,MAAM,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;QAC1D,OAAO,MAAM,GAAG,IAAI,CAAC,gBAAgB;YACrC,UAAU,KAAK,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC;IAcO,qBAAqB,CAAC,IAAmB;;QAC/C,YAAY,CAAC,MAAA,MAAA,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,0CAAE,OAAO,mCAAI,CAAC,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED,wBAAwB,CAAC,IAAmB,EAAE,UAAkB,EAAE,gBAA4B;QAC5F,6BAA6B;QAC7B,4CAA4C;QAC5C,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;YAChC,iCAAiC;YACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,GAAG;gBACtD,QAAQ,EAAE,gBAAgB;gBAC1B,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;gBAC/B,UAAU;gBACV,OAAO,EAAE,CAAQ;aAClB,CAAC;YACF,QAAQ,CAAC,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE;gBACjC,gBAAgB;gBAChB,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;gBAChC,4FAA4F;gBAC5F,4CAA4C;gBAC5C,IAAI,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;oBAC9G,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBACtB,CAAC;YACH,CAAC,EAAE,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;CACF","sourcesContent":["import type { DimensionType } from '@type';\n/**\n * Apply changes only if mousewheel event happened some time ago (scrollThrottling)\n */\nexport class LocalScrollTimer {\n  /**\n   * Last mw event time for trigger scroll function below\n   * If mousewheel function was ignored we still need to trigger render\n   */\n  private mouseWheelScrollTimestamp: Record<DimensionType, number> = {\n    rgCol: 0,\n    rgRow: 0,\n  };\n  private lastKnownScrollCoordinate: Record<DimensionType, number> = {\n    rgCol: 0,\n    rgRow: 0,\n  };\n\n  constructor(private scrollThrottling = 10) {}\n\n  setCoordinate(e: { dimension: DimensionType; coordinate: number }) {\n    this.lastKnownScrollCoordinate[e.dimension] = e.coordinate;\n  }\n\n  /**\n   * Remember last mw event time\n   */\n  latestScrollUpdate(dimension: DimensionType) {\n    this.mouseWheelScrollTimestamp[dimension] = new Date().getTime();\n  }\n\n  isReady(type: DimensionType, coordinate: number) {\n    // if there is a callback, clear it\n    if (this.lastScrollUpdateCallbacks[type]) {\n      this.clearLastScrollUpdate(type)\n    }\n    // apply after throttling\n    return this.verifyChange(type, coordinate);\n  }\n\n  private verifyChange(type: DimensionType, coordinate: number) {\n    const now = new Date().getTime();\n    const change = now - this.mouseWheelScrollTimestamp[type];\n    return change > this.scrollThrottling &&\n    coordinate !== this.lastKnownScrollCoordinate[type];\n  }\n\n  /**\n   * Check if scroll is ready to accept new value\n   * this is an edge case for scroll events\n   * when we need to apply scroll after throttling\n   */\n  private lastScrollUpdateCallbacks: Partial<Record<DimensionType, {\n    callback: () => void;\n    timestamp: number;\n    coordinate: number;\n    timeout: number;\n  }>> = {};\n\n  private clearLastScrollUpdate(type: DimensionType) {\n    clearTimeout(this.lastScrollUpdateCallbacks[type]?.timeout ?? 0);\n    delete this.lastScrollUpdateCallbacks[type];\n  }\n\n  throttleLastScrollUpdate(type: DimensionType, coordinate: number, lastScrollUpdate: () => void) {\n    // if scrollThrottling is set\n    // we need to throttle the last scroll event\n    if (this.scrollThrottling) {\n      this.clearLastScrollUpdate(type)\n      // save lastScrollUpdate callback\n      const callback = this.lastScrollUpdateCallbacks[type] = {\n        callback: lastScrollUpdate,\n        timestamp: new Date().getTime(),\n        coordinate,\n        timeout: 0 as any,\n      };\n      callback.timeout = setTimeout(() => {\n        // clear timeout\n        this.clearLastScrollUpdate(type)\n        // if scrollThrottling is set, and the last scroll event happened before the timeout started\n        // we need to throttle the last scroll event\n        if (this.mouseWheelScrollTimestamp[type] < callback.timestamp && this.verifyChange(type, callback.coordinate)) {\n          callback.callback();\n        }\n      }, this.scrollThrottling + 50);\n    }\n  }\n}\n"]}