{"version":3,"file":"dimension.provider.js","sourceRoot":"","sources":["../../src/services/dimension.provider.ts"],"names":[],"mappings":"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","sourcesContent":["import reduce from 'lodash/reduce';\nimport debounce from 'lodash/debounce';\nimport ViewportProvider from './viewport.provider';\nimport { RESIZE_INTERVAL } from '../utils/consts';\n\nimport {\n  columnTypes,\n  rowTypes,\n  getItemByIndex,\n  DimensionStore,\n  DimensionStoreCollection,\n  gatherTrimmedItems,\n  Trimmed,\n} from '@store';\nimport type {\n  DimensionCols,\n  DimensionType,\n  MultiDimensionType,\n  ColumnRegular,\n  DimensionSettingsState,\n  ViewPortScrollEvent,\n  ViewSettingSizeProp,\n  ViewportState,\n} from '@type';\nimport { getColumnSizes } from '../utils/column.utils';\n\nexport type DimensionConfig = {\n  realSizeChanged(k: MultiDimensionType): void;\n};\n/**\n * Dimension provider\n * Stores dimension information and custom sizes\n * \n * @dependsOn ViewportProvider\n */\nexport default class DimensionProvider {\n  readonly stores: DimensionStoreCollection;\n  constructor(\n    private viewports: ViewportProvider,\n    config: DimensionConfig,\n  ) {\n    const sizeChanged = debounce(\n      (k: MultiDimensionType) => config.realSizeChanged(k),\n      RESIZE_INTERVAL,\n    );\n    this.stores = reduce(\n      [...rowTypes, ...columnTypes],\n      (sources: Partial<DimensionStoreCollection>, t: MultiDimensionType) => {\n        sources[t] = new DimensionStore(t);\n        sources[t].store.onChange('realSize', () => sizeChanged(t));\n        return sources;\n      },\n      {},\n    ) as DimensionStoreCollection;\n  }\n\n  /**\n   * Clear old sizes from dimension and viewports\n   * @param type - dimension type\n   * @param count - count of items\n   */\n  clearSize(t: MultiDimensionType, count: number) {\n    this.stores[t].drop();\n    // after we done with drop trigger viewport recalculaction\n    this.viewports.stores[t].setOriginalSizes(\n      this.stores[t].store.get('originItemSize'),\n    );\n    this.setItemCount(count, t);\n  }\n\n  /**\n   * Apply new custom sizes to dimension and view port\n   * @param type - dimension type\n   * @param sizes - new custom sizes\n   * @param keepOld - keep old sizes merge new with old\n   */\n  setCustomSizes(\n    type: MultiDimensionType,\n    sizes: ViewSettingSizeProp,\n    keepOld = false,\n  ) {\n    let newSizes = sizes;\n    if (keepOld) {\n      const oldSizes = this.stores[type].store.get('sizes');\n      newSizes = {\n        ...oldSizes,\n        ...sizes,\n      };\n    }\n    this.stores[type].setDimensionSize(newSizes);\n    this.setViewPortCoordinate({\n      coordinate: this.viewports.stores[type].lastCoordinate,\n      type,\n      force: true,\n    });\n  }\n\n  setItemCount(realCount: number, type: MultiDimensionType) {\n    this.viewports.stores[type].setViewport({ realCount });\n    this.stores[type].setStore({ count: realCount });\n  }\n\n  /**\n   * Apply trimmed items\n   * @param trimmed - trimmed items\n   * @param type\n   */\n  setTrimmed(trimmed: Trimmed, type: MultiDimensionType) {\n    const allTrimmed = gatherTrimmedItems(trimmed);\n    const dimStoreType = this.stores[type];\n    dimStoreType.setStore({ trimmed: allTrimmed });\n    this.setViewPortCoordinate({\n      coordinate: this.viewports.stores[type].lastCoordinate,\n      type,\n      force: true,\n    });\n  }\n\n  /**\n   * Sets dimension data and viewport coordinate\n   * @param itemCount\n   * @param type - dimension type\n   * @param noVirtual - disable virtual data\n   */\n  setData(itemCount: number, type: MultiDimensionType, noVirtual = false) {\n    this.setItemCount(itemCount, type);\n\n    // Virtualization will get disabled\n    if (noVirtual) {\n      const dimension = this.stores[type].getCurrentState();\n      this.viewports.stores[type].setViewport({\n        virtualSize: dimension.realSize,\n      });\n    }\n    this.setViewPortCoordinate({\n      coordinate: this.viewports.stores[type].lastCoordinate,\n      type,\n    });\n  }\n\n  /**\n   * Applies new columns to the dimension provider\n   * @param columns - new columns data\n   * @param disableVirtualX - disable virtual data for X axis\n   */\n  applyNewColumns(\n    columns: Record<DimensionCols, ColumnRegular[]>,\n    disableVirtualX: boolean,\n    keepOld = false,\n  ) {\n    // Apply new columns to dimension provider\n    for (let type of columnTypes) {\n      if (!keepOld) {\n        // Clear existing data in the dimension provider\n        this.stores[type].drop();\n      }\n\n      // Get the new columns for the current type\n      const items = columns[type];\n\n      // Determine if virtual data should be disabled for the current type\n      const noVirtual = type !== 'rgCol' || disableVirtualX;\n\n      // Set the items count in the dimension provider\n      this.stores[type].setStore({ count: items.length });\n\n      // Set the custom sizes for the columns\n      const newSizes = getColumnSizes(items);\n      this.stores[type].setDimensionSize(newSizes);\n\n      // Update the viewport with new data\n      const vpUpdate: Partial<ViewportState> = {\n        // This triggers drop on realCount change\n        realCount: items.length,\n      };\n\n      // If virtual data is disabled, set the virtual size to the real size\n      if (noVirtual) {\n        vpUpdate.virtualSize = this.stores[type].getCurrentState().realSize;\n      }\n\n      // Update the viewport\n      this.viewports.stores[type].setViewport(vpUpdate);\n      this.setViewPortCoordinate({\n        coordinate: this.viewports.stores[type].lastCoordinate,\n        type,\n      });\n    }\n  }\n\n  /**\n   * Gets the full size of the grid by summing up the sizes of all dimensions\n   * Goes through all dimensions columnTypes (x) and rowTypes (y) and sums up their sizes\n   */\n\n  getFullSize(): { x: number; y: number } {\n    let x = 0;\n    let y = 0;\n    for (let type of columnTypes) {\n      x += this.stores[type]?.store.get('realSize') || 0;\n    }\n    for (let type of rowTypes) {\n      y += this.stores[type]?.store.get('realSize') || 0;\n    }\n    return { y, x };\n  }\n\n  setViewPortCoordinate({\n    coordinate,\n    type,\n    force = false,\n  }: {\n    coordinate: number;\n    type: MultiDimensionType;\n    force?: boolean;\n  }) {\n    const dimension = this.stores[type].getCurrentState();\n    this.viewports.stores[type].setViewPortCoordinate(\n      coordinate,\n      dimension,\n      force,\n    );\n  }\n\n  getViewPortPos(e: ViewPortScrollEvent): number {\n    const dimension = this.stores[e.dimension].getCurrentState();\n    const item = getItemByIndex(dimension, e.coordinate);\n\n    return item.start;\n  }\n\n  setSettings(\n    data: Partial<DimensionSettingsState>,\n    dimensionType: DimensionType,\n  ) {\n    let stores: MultiDimensionType[] = [];\n    switch (dimensionType) {\n      case 'rgCol':\n        stores = columnTypes;\n        break;\n      case 'rgRow':\n        stores = rowTypes;\n        break;\n    }\n    for (let s of stores) {\n      this.stores[s].setStore(data);\n    }\n  }\n\n  updateSizesPositionByNewDataIndexes(\n    type: MultiDimensionType,\n    newItemsOrder: number[],\n    prevItemsOrder: number[] = [],\n  ) {\n    // Move custom sizes to new order\n    this.stores[type].updateSizesPositionByIndexes(\n      newItemsOrder,\n      prevItemsOrder,\n    );\n    this.setViewPortCoordinate({\n      coordinate: this.viewports.stores[type].lastCoordinate,\n      type,\n      force: true,\n    });\n  }\n}\n"]}