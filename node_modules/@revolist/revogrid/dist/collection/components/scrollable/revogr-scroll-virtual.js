/*!
 * Built by Revolist OU ❤️
 */
import { h, Host, } from "@stencil/core";
import LocalScrollService, { getContentSize } from "../../services/local.scroll.service";
import { AutohideScrollPlugin } from "./autohide-scroll.plugin";
import { LocalScrollTimer } from "../../services/local.scroll.timer";
import { getScrollbarSize } from "../../utils";
/**
 * Virtual scroll component
 */
export class RevogrScrollVirtual {
    constructor() {
        this.scrollSize = 0;
        this.dimension = 'rgRow';
        this.viewportStore = undefined;
        this.dimensionStore = undefined;
    }
    async setScroll(e) {
        var _a;
        if (this.dimension !== e.dimension) {
            return;
        }
        this.localScrollTimer.latestScrollUpdate(e.dimension);
        (_a = this.localScrollService) === null || _a === void 0 ? void 0 : _a.setScroll(e);
        if (e.coordinate) {
            this.autohideScrollPlugin.checkScroll({
                scrollSize: this.scrollSize,
                contentSize: this.dimensionStore.get('realSize'),
                virtualSize: this.viewportStore.get('virtualSize'),
            });
        }
    }
    /**
     * Update if `delta` exists in case we don't know current position or if it's external change
     */
    async changeScroll(e) {
        if (e.delta) {
            switch (e.dimension) {
                case 'rgCol':
                    e.coordinate = this.element.scrollLeft + e.delta;
                    break;
                case 'rgRow':
                    e.coordinate = this.element.scrollTop + e.delta;
                    break;
            }
            this.setScroll(e);
        }
        return e;
    }
    set size(s) {
        this.autohideScrollPlugin.setScrollSize(s);
        if (this.dimension === 'rgRow') {
            this.element.style.minWidth = `${s}px`;
            return;
        }
        this.element.style.minHeight = `${s}px`;
    }
    get size() {
        if (this.dimension === 'rgRow') {
            return this.element.clientHeight;
        }
        return this.element.clientWidth;
    }
    connectedCallback() {
        this.autohideScrollPlugin = new AutohideScrollPlugin(this.element);
        this.localScrollTimer = new LocalScrollTimer('ontouchstart' in document.documentElement ? 0 : 10);
        this.localScrollService = new LocalScrollService({
            runScroll: e => this.scrollVirtual.emit(e),
            applyScroll: e => {
                this.localScrollTimer.setCoordinate(e);
                const type = e.dimension === 'rgRow' ? 'scrollTop' : 'scrollLeft';
                // this will trigger on scroll event
                this.element[type] = e.coordinate;
            },
        });
    }
    disconnectedCallback() {
        this.autohideScrollPlugin.clear();
    }
    componentWillLoad() {
        this.scrollSize = getScrollbarSize(document);
    }
    componentDidRender() {
        const type = this.dimension === 'rgRow' ? 'scrollHeight' : 'scrollWidth';
        if (this.element[type] > this.size) {
            this.size = this.scrollSize;
        }
        else {
            this.size = 0;
        }
        this.localScrollService.setParams({
            contentSize: this.dimensionStore.get('realSize'),
            clientSize: this.size,
            virtualSize: this.viewportStore.get('clientSize'),
        }, this.dimension);
    }
    onScroll(e) {
        var _a;
        if (!(e.target instanceof Element)) {
            return;
        }
        const target = e.target;
        let type = 'scrollLeft';
        if (this.dimension === 'rgRow') {
            type = 'scrollTop';
        }
        // apply after throttling
        if (this.localScrollTimer.isReady(this.dimension, target[type] || 0)) {
            (_a = this.localScrollService) === null || _a === void 0 ? void 0 : _a.scroll(target[type] || 0, this.dimension);
        }
    }
    render() {
        const sizeType = this.dimension === 'rgRow' ? 'height' : 'width';
        const size = getContentSize(this.dimensionStore.get('realSize'), this.size, this.viewportStore.get('clientSize') // content viewport size
        );
        return (h(Host, { key: '2d11902403db45b805bde88b6fc40acff4b6b910', onScroll: (e) => this.onScroll(e) }, h("div", { key: '74978e90cbf66e3fb6dcc25bd5882346f1515c39', style: {
                [sizeType]: `${size}px`,
            } })));
    }
    static get is() { return "revogr-scroll-virtual"; }
    static get originalStyleUrls() {
        return {
            "$": ["revogr-scroll-style.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["revogr-scroll-style.css"]
        };
    }
    static get properties() {
        return {
            "dimension": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DimensionType",
                    "resolved": "\"rgCol\" | \"rgRow\"",
                    "references": {
                        "DimensionType": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::DimensionType"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Scroll dimension (`X` - `rgCol` or `Y` - `rgRow`)"
                },
                "attribute": "dimension",
                "reflect": false,
                "defaultValue": "'rgRow'"
            },
            "viewportStore": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Observable<ViewportState>",
                    "resolved": "ObservableMap<ViewportState>",
                    "references": {
                        "Observable": {
                            "location": "import",
                            "path": "../../utils",
                            "id": "src/utils/index.ts::Observable"
                        },
                        "ViewportState": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::ViewportState"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Viewport"
                }
            },
            "dimensionStore": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Observable<DimensionSettingsState>",
                    "resolved": "ObservableMap<DimensionSettingsState>",
                    "references": {
                        "Observable": {
                            "location": "import",
                            "path": "../../utils",
                            "id": "src/utils/index.ts::Observable"
                        },
                        "DimensionSettingsState": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::DimensionSettingsState"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Dimensions"
                }
            }
        };
    }
    static get events() {
        return [{
                "method": "scrollVirtual",
                "name": "scrollvirtual",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Scroll event"
                },
                "complexType": {
                    "original": "ViewPortScrollEvent",
                    "resolved": "{ dimension: DimensionType; coordinate: number; delta?: number | undefined; outside?: boolean | undefined; }",
                    "references": {
                        "ViewPortScrollEvent": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::ViewPortScrollEvent"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "setScroll": {
                "complexType": {
                    "signature": "(e: ViewPortScrollEvent) => Promise<void>",
                    "parameters": [{
                            "name": "e",
                            "type": "{ dimension: DimensionType; coordinate: number; delta?: number | undefined; outside?: boolean | undefined; }",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "ViewPortScrollEvent": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::ViewPortScrollEvent"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "changeScroll": {
                "complexType": {
                    "signature": "(e: ViewPortScrollEvent) => Promise<ViewPortScrollEvent>",
                    "parameters": [{
                            "name": "e",
                            "type": "{ dimension: DimensionType; coordinate: number; delta?: number | undefined; outside?: boolean | undefined; }",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "ViewPortScrollEvent": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::ViewPortScrollEvent"
                        }
                    },
                    "return": "Promise<ViewPortScrollEvent>"
                },
                "docs": {
                    "text": "Update if `delta` exists in case we don't know current position or if it's external change",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "element"; }
}
//# sourceMappingURL=revogr-scroll-virtual.js.map
