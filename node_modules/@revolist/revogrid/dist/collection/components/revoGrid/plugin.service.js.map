{"version":3,"file":"plugin.service.js","sourceRoot":"","sources":["../../../src/components/revoGrid/plugin.service.ts"],"names":[],"mappings":"AAGA;;;GAGG;AACH,MAAM,OAAO,aAAa;IAA1B;QACE;;;WAGG;QACH,oBAAe,GAA0B,EAAE,CAAC;IAyF9C,CAAC;IAvFC;;OAEG;IACH,GAAG;QACD,OAAO,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,GAAG,CAAC,MAA2B;QAC7B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,uBAAuB,CACrB,OAA4B,EAC5B,UAAwB,EAAE,EAC1B,WAA0B,EAC1B,UAA4B;QAE5B,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO;QACT,CAAC;QAED,kEAAkE;QAClE,MAAM,eAAe,GACnB,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,CACjB,UAAU,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,KAAK,UAAU,CAAC,CACrE,KAAI,EAAE,CAAC;QAEV,6BAA6B;QAC7B,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;;YAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAC1C,aAAa,CAAC,EAAE,CAAC,aAAa,YAAY,MAAM,CACjD,CAAC;YACF,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC;gBACjB,MAAA,MAAA,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAC,OAAO,kDAAI,CAAC;gBACxC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,oBAAoB;YAC7D,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,gCAAgC;QAChC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAC,UAAU,CAAC,EAAE;YAC5B,8CAA8C;YAC9C,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAC9C,aAAa,CAAC,EAAE,CAAC,aAAa,YAAY,UAAU,CACrD,CAAC;YACF,IAAI,cAAc,EAAE,CAAC;gBACnB,OAAO;YACT,CAAC;YACD,IAAI,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,UAAU,CACR,WAAsC;QAEtC,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,YAAY,WAAW,CAEjD,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,MAA2B;;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACnD,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;YACf,MAAA,MAAA,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAC,OAAO,kDAAI,CAAC;YACxC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;IAED;;OAEG;IAEH,OAAO;QACL,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,WAAC,OAAA,MAAA,CAAC,CAAC,OAAO,iDAAI,CAAA,EAAA,CAAC,CAAC;QACjD,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC5B,CAAC;CACF","sourcesContent":["import { PluginBaseComponent, PluginProviders, PluginServiceBase } from '@type';\nimport { GridPlugin } from 'src/plugins';\n\n/**\n * Plugin service\n * Manages plugins\n */\nexport class PluginService implements PluginServiceBase {\n  /**\n   * Plugins\n   * Define plugins collection\n   */\n  internalPlugins: PluginBaseComponent[] = [];\n\n  /**\n   * Get all plugins\n   */\n  get() {\n    return [...this.internalPlugins];\n  }\n\n  /**\n   * Add plugin to collection\n   */\n  add(plugin: PluginBaseComponent) {\n    this.internalPlugins.push(plugin);\n  }\n\n  /**\n   * Add user plugins and create\n   */\n  addUserPluginsAndCreate(\n    element: HTMLRevoGridElement,\n    plugins: GridPlugin[] = [],\n    prevPlugins?: GridPlugin[],\n    pluginData?: PluginProviders,\n  ) {\n    if (!pluginData) {\n      return;\n    }\n\n    // Step 1: Identify plugins to remove, compare new and old plugins\n    const pluginsToRemove =\n      prevPlugins?.filter(\n        prevPlugin => !plugins.some(userPlugin => userPlugin === prevPlugin),\n      ) || [];\n\n    // Step 2: Remove old plugins\n    pluginsToRemove.forEach(plugin => {\n      const index = this.internalPlugins.findIndex(\n        createdPlugin => createdPlugin instanceof plugin,\n      );\n      if (index !== -1) {\n        this.internalPlugins[index].destroy?.();\n        this.internalPlugins.splice(index, 1); // Remove the plugin\n      }\n    });\n\n    // Step 3: Register user plugins\n    plugins?.forEach(userPlugin => {\n      // check if plugin already exists, if so, skip\n      const existingPlugin = this.internalPlugins.find(\n        createdPlugin => createdPlugin instanceof userPlugin,\n      );\n      if (existingPlugin) {\n        return;\n      }\n      this.add(new userPlugin(element, pluginData));\n    });\n  }\n\n  /**\n   * Get plugin by class\n   */\n  getByClass<T extends PluginBaseComponent>(\n    pluginClass: new (...args: any[]) => T,\n  ): T | undefined {\n    return this.internalPlugins.find(p => p instanceof pluginClass) as\n      | T\n      | undefined;\n  }\n\n  /**\n   * Remove plugin\n   */\n  remove(plugin: PluginBaseComponent) {\n    const index = this.internalPlugins.indexOf(plugin);\n    if (index > -1) {\n      this.internalPlugins[index].destroy?.();\n      this.internalPlugins.splice(index, 1);\n    }\n  }\n\n  /**\n   * Remove all plugins\n   */\n\n  destroy() {\n    this.internalPlugins.forEach(p => p.destroy?.());\n    this.internalPlugins = [];\n  }\n}\n"]}