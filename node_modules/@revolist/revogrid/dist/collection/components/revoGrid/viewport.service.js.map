{"version":3,"file":"viewport.service.js","sourceRoot":"","sources":["../../../src/components/revoGrid/viewport.service.ts"],"names":[],"mappings":"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","sourcesContent":["import DimensionProvider from '../../services/dimension.provider';\nimport { type SelectionStoreConnector, EMPTY_INDEX } from '../../services/selection.store.connector';\nimport ViewportProvider from '../../services/viewport.provider';\nimport { columnTypes, DSourceState, getSourceItem, getVisibleSourceItem, rowTypes } from '@store';\nimport { OrdererService } from '../order/order-renderer';\nimport GridScrollingService from './viewport.scrolling.service';\nimport { CONTENT_SLOT, FOOTER_SLOT, HEADER_SLOT, viewportDataPartition, VPPartition } from './viewport.helpers';\n\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport type {\n  Cell,\n  ColumnRegular,\n  DimensionCols,\n  DimensionRows,\n  HeaderProperties,\n  RangeArea,\n  SlotType,\n  ViewportColumn,\n  ViewportData,\n  ViewportProperties,\n  ViewportProps,\n  ViewPortResizeEvent,\n  ViewportState,\n  ViewSettingSizeProp,\n} from '@type';\nimport { Observable } from '../../utils';\n\nexport type ResizeDetails = { [index: number]: ColumnRegular };\ntype Config = {\n  columnProvider: ColumnDataProvider;\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  viewportProvider: ViewportProvider;\n  scrollingService: GridScrollingService;\n  orderService: OrdererService;\n  selectionStoreConnector: SelectionStoreConnector;\n\n  disableVirtualX?: boolean;\n  disableVirtualY?: boolean;\n\n  resize(r: ResizeDetails): void;\n};\n\nexport type FocusedData = {\n  model: any;\n  cell: Cell;\n  colType: DimensionCols;\n  rowType: DimensionRows;\n  column?: ColumnRegular;\n};\n\n/** Collect Column data */\nfunction gatherColumnData(data: ViewportColumn) {\n  const colDimension = data.dimensions[data.colType].store;\n  const realWidth = colDimension.get('realSize');\n\n  const prop: ViewportProperties = {\n    contentWidth: realWidth,\n    class: data.colType,\n    contentHeight: data.contentHeight,\n    key: data.colType,\n    colType: data.colType,\n    onResizeviewport: data.onResizeviewport,\n    // set viewport size to real size\n    style: data.fixWidth ? { minWidth: `${realWidth}px` } : undefined,\n  };\n\n  const headerProp: HeaderProperties = {\n    colData: getVisibleSourceItem(data.colStore),\n    dimensionCol: colDimension,\n    type: data.colType,\n    groups: data.colStore.get('groups'),\n    groupingDepth: data.colStore.get('groupingDepth'),\n    resizeHandler: data.colType === 'colPinEnd' ? ['l'] : undefined,\n    onHeaderresize: data.onHeaderresize,\n  };\n\n  return {\n    prop,\n    type: data.colType,\n    position: data.position,\n    headerProp,\n    viewportCol: data.viewports[data.colType].store,\n  };\n}\n\nexport default class ViewportService {\n  readonly columns: ViewportProps[];\n  constructor(\n    private config: Config,\n    contentHeight: number,\n  ) {\n    this.config.selectionStoreConnector?.beforeUpdate();\n\n    // ----------- Handle columns ----------- //\n\n    // Transform data from stores and apply it to different components\n    const columns: ViewportProps[] = [];\n    let x = 0; // we increase x only if column present\n    columnTypes.forEach(val => {\n      const colStore = config.columnProvider.stores[val].store;\n      // only columns that have data show\n      if (!colStore.get('items').length) {\n        return;\n      }\n      const column: ViewportColumn = {\n        colType: val,\n        position: { x, y: 1 },\n\n        contentHeight,\n        // only central column has dynamic width\n        fixWidth: val !== 'rgCol',\n\n        viewports: config.viewportProvider.stores,\n        dimensions: config.dimensionProvider.stores,\n        rowStores: config.dataProvider.stores,\n\n        colStore,\n        onHeaderresize: e => this.onColumnResize(val, e, colStore),\n      };\n      if (val === 'rgCol') {\n        column.onResizeviewport = (e: CustomEvent<ViewPortResizeEvent>) => {\n          const vpState: Partial<ViewportState> = {\n            clientSize: e.detail.size,\n          };\n\n          // virtual size will be handled by dimension provider if disabled\n          if ((e.detail.dimension === 'rgRow' && !config.disableVirtualY)\n              || (e.detail.dimension === 'rgCol' && !config.disableVirtualX)) {\n                vpState.virtualSize = e.detail.size;\n          }\n          config.viewportProvider?.setViewport(e.detail.dimension, vpState);\n        };\n      }\n      const colData = gatherColumnData(column);\n      const columnSelectionStore = this.registerCol(colData.position.x, val);\n\n      // render per each column data collections vertically\n      const dataPorts = this.dataViewPort(column).reduce<ViewportData[]>(\n        (r, rgRow) => {\n          // register selection store for Segment\n          const segmentSelection = this.registerSegment(rgRow.position);\n          segmentSelection.setLastCell(rgRow.lastCell);\n\n          // register selection store for Row\n          const rowSelectionStore = this.registerRow(\n            rgRow.position.y,\n            rgRow.type,\n          );\n          const rowDef: ViewportData = {\n            colType: val,\n            ...rgRow,\n            rowSelectionStore,\n            selectionStore: segmentSelection.store,\n            ref: (e) =>\n              config.selectionStoreConnector.registerSection(e),\n            onSetrange: e => {\n              segmentSelection.setRangeArea(e.detail);\n            },\n            onSettemprange: e => segmentSelection.setTempArea(e.detail),\n            onFocuscell: e => {\n              // todo: multi focus\n              segmentSelection.clearFocus();\n              config.selectionStoreConnector.focus(segmentSelection, e.detail);\n            },\n          };\n          r.push(rowDef);\n          return r;\n        },\n        [],\n      );\n      columns.push({\n        ...colData,\n        columnSelectionStore,\n        dataPorts,\n      });\n      x++;\n    });\n    this.columns = columns;\n    // ----------- Handle columns end ----------- //\n\n    this.config.scrollingService?.unregister();\n  }\n\n  private onColumnResize(\n    type: DimensionCols,\n    { detail }: CustomEvent<ViewSettingSizeProp>,\n    store: Observable<DSourceState<ColumnRegular, DimensionCols>>,\n  ) {\n    // apply to dimension provider\n    this.config.dimensionProvider?.setCustomSizes(type, detail, true);\n\n    // set resize event\n    const changedItems: ResizeDetails = {};\n    for (const [i, size] of Object.entries(detail || {})) {\n      const virtualIndex = parseInt(i, 10);\n      const item = getSourceItem(store, virtualIndex);\n      if (item) {\n        changedItems[virtualIndex] = { ...item, size };\n      }\n    }\n    this.config.resize(changedItems);\n  }\n\n  /** register selection store for Segment */\n  private registerSegment(position: Cell) {\n    return this.config.selectionStoreConnector.register(position);\n  }\n\n  /** register selection store for Row */\n  private registerRow(y: number, type: DimensionRows) {\n    return this.config.selectionStoreConnector.registerRow(y, type).store;\n  }\n\n  /** register selection store for Column */\n  private registerCol(x: number, type: DimensionCols) {\n    return this.config.selectionStoreConnector.registerColumn(x, type).store;\n  }\n\n  /** Collect Row data */\n  private dataViewPort(data: ViewportColumn) {\n    const slots: { [key in DimensionRows]: SlotType } = {\n      rowPinStart: HEADER_SLOT,\n      rgRow: CONTENT_SLOT,\n      rowPinEnd: FOOTER_SLOT,\n    };\n\n    // y position for selection\n    let y = 0;\n    return rowTypes.reduce((result: VPPartition[], type) => {\n      // filter out empty sources, we still need to return source to keep slot working\n      const isPresent =\n        data.viewports[type].store.get('realCount') || type === 'rgRow';\n      const rgCol = {\n        ...data,\n        position: { ...data.position, y: isPresent ? y : EMPTY_INDEX },\n      };\n      const partition = viewportDataPartition(\n        rgCol,\n        type,\n        slots[type],\n        type !== 'rgRow', // is fixed row\n      );\n      result.push(partition);\n      if (isPresent) {\n        y++;\n      }\n      return result;\n    }, []);\n  }\n\n  scrollToCell(cell: Partial<Cell>) {\n    for (let key in cell) {\n      const coordinate = cell[key as keyof Cell];\n      if (typeof coordinate === 'number') {\n        this.config.scrollingService.proxyScroll({\n          dimension: key === 'x' ? 'rgCol' : 'rgRow',\n          coordinate,\n        });\n      }\n    }\n  }\n\n  /**\n   * Clear current grid focus\n   */\n  clearFocused() {\n    this.config.selectionStoreConnector.clearAll();\n  }\n\n  clearEdit() {\n    this.config.selectionStoreConnector.setEdit(false);\n  }\n\n  /**\n   * Collect focused element data\n   */\n  getFocused(): FocusedData | null {\n    const focused = this.config.selectionStoreConnector.focusedStore;\n    if (!focused) {\n      return null;\n    }\n    // get column data\n    const colType =\n      this.config.selectionStoreConnector.storesXToType[focused.position.x];\n    const column = this.config.columnProvider.getColumn(\n      focused.cell.x,\n      colType,\n    );\n\n    // get row data\n    const rowType =\n      this.config.selectionStoreConnector.storesYToType[focused.position.y];\n    const model = this.config.dataProvider.getModel(focused.cell.y, rowType);\n    return {\n      column,\n      model,\n      cell: focused.cell,\n      colType,\n      rowType,\n    };\n  }\n\n  getStoreCoordinateByType(colType: DimensionCols, rowType: DimensionRows): Cell | undefined {\n    const stores = this.config.selectionStoreConnector.storesByType;\n    if (typeof stores[colType] === 'undefined' || typeof stores[rowType] === 'undefined') {\n      return;\n    }\n    return {\n      x: stores[colType],\n      y: stores[rowType],\n    };\n  }\n\n  setFocus(colType: string, rowType: string, start: Cell, end: Cell) {\n    const coordinate = this.getStoreCoordinateByType(colType as DimensionCols, rowType as DimensionRows);\n    if (coordinate) {\n      this.config.selectionStoreConnector?.focusByCell(\n        coordinate,\n        start,\n        end,\n      );\n    }\n  }\n\n  getSelectedRange(): RangeArea | null | undefined {\n    return this.config.selectionStoreConnector.selectedRange;\n  }\n\n  setEdit(\n    rowIndex: number,\n    colIndex: number,\n    colType: DimensionCols,\n    rowType: DimensionRows,\n  ) {\n    const coordinate = this.getStoreCoordinateByType(colType as DimensionCols, rowType as DimensionRows);\n    if (coordinate) {\n      this.config.selectionStoreConnector?.setEditByCell(\n        coordinate,\n        { x: colIndex, y: rowIndex },\n      );\n    }\n  }\n}\n"]}