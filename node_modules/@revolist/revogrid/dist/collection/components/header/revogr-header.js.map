{"version":3,"file":"revogr-header.js","sourceRoot":"","sources":["../../../src/components/header/revogr-header.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,OAAO,EACP,KAAK,EAEL,CAAC,EACD,IAAI,GAEL,MAAM,eAAe,CAAC;AACvB,OAAO,KAAK,MAAM,cAAc,CAAC;AAEjC,OAAO,EAAE,uBAAuB,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAE/E,OAAO,cAAqC,MAAM,mBAAmB,CAAC;AACtE,OAAO,oBAAoB,MAAM,mDAAmD,CAAC;AAkBrF,MAAM,OAAO,qBAAqB;;;;;;6BAmBR,CAAC;;;;;;;8BAiCK,EAAE;;IAmDxB,QAAQ,CAAC,EAAE,KAAK,EAAsB,EAAE,KAAa;QAC3D,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;4CAE9B,GAAG,KACN,IAAI,EAAE,KAAK,IAAI,SAAS;SAE3B,CAAC,CAAC;QACH,IAAI,KAAK,CAAC,gBAAgB,EAAE,CAAC;YAC3B,OAAO;QACT,CAAC;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC;IAClD,CAAC;IAEO,aAAa,CACnB,QAAgB,EAChB,UAAkB,EAClB,QAAgB;QAEhB,MAAM,KAAK,GAAwB,EAAE,CAAC;QACtC,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,WAAW,CAAC,CAAC;QAC/D,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,QAAQ,GAAG,UAAU,GAAG,CAAC,CAAC,CAAC;QACtD,KAAK,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,IAAI,EAAE,CAAC;gBACT,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;YAChC,CAAC;QACH,CAAC;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC9C,CAAC;IAED,MAAM;;QACJ,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3C,MAAM,KAAK,GAAG,MAAA,IAAI,CAAC,cAAc,0CAAE,GAAG,CAAC,OAAO,CAAC,CAAC;QAChD,MAAM,KAAK,GAAY,EAAE,CAAC;QAC1B,MAAM,YAAY,GAA+B,EAAE,CAAC;QAEpD,wBAAwB;QACxB,KAAK,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC;YACvB,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC9C,MAAM,KAAK,GAAsB;gBAC/B,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,KAAK;gBACb,IAAI,kCACC,OAAO,KACV,KAAK,EAAE,KAAK,CAAC,SAAS,EACtB,SAAS,EAAE,IAAI,CAAC,SAAS,GAC1B;gBACD,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY;gBAC9B,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,MAAM,EAAE,IAAI,CAAC,aAAa;gBAC1B,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC;gBAChD,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC5C,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC7C,cAAc,EAAE,IAAI,CAAC,cAAc;aACpC,CAAC;YACF,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClD,IAAI,KAAK,CAAC,gBAAgB,EAAE,CAAC;gBAC3B,SAAS;YACX,CAAC;YACD,KAAK,CAAC,IAAI,CAAC,EAAC,cAAc,oBAAK,KAAK,CAAC,MAAM,EAAI,CAAC,CAAC;YACjD,YAAY,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC;QAChD,CAAC;QAED,OAAO;YACL,4DAAK,KAAK,EAAC,aAAa;gBACtB,EAAC,oBAAoB,qDACnB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,MAAM,EAAE,IAAI,CAAC,aAAa,EAC1B,YAAY,EAAE,YAAY,EAC1B,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,EACrC,KAAK,EAAE,IAAI,CAAC,aAAa,EACzB,QAAQ,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,EAAE,CAC3C,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC,EAEpD,cAAc,EAAE,IAAI,CAAC,cAAc,GACnC,CACE;YACN,4DAAK,KAAK,EAAE,GAAG,gBAAgB,IAAI,uBAAuB,EAAE,IACzD,KAAK,CACF;SACP,CAAC;IACJ,CAAC;IAED,IAAI,SAAS;QACX,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,IAAI,CAAC,OAAO;YAClB,QAAQ,EAAE,IAAI,CAAC,WAAW;YAC1B,SAAS,EAAE,IAAI,CAAC,YAAY;YAC5B,SAAS,EAAE,IAAI,CAAC,cAAc;SAC/B,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Prop,\n  type VNode,\n} from '@stencil/core';\nimport keyBy from 'lodash/keyBy';\n\nimport { HEADER_ACTUAL_ROW_CLASS, HEADER_ROW_CLASS } from '../../utils/consts';\nimport { Groups } from '@store';\nimport HeaderRenderer, { HeaderRenderProps } from './header-renderer';\nimport ColumnGroupsRenderer from '../../plugins/groupingColumn/columnGroupsRenderer';\nimport { ResizeProps } from './resizable.directive';\nimport {\n  ColumnRegular,\n  DimensionSettingsState,\n  InitialHeaderClick,\n  Providers,\n  ViewportState,\n  ViewSettingSizeProp,\n  DimensionCols,\n  SelectionStoreState,\n} from '@type';\nimport { Observable } from '../../utils';\n\n@Component({\n  tag: 'revogr-header',\n  styleUrl: 'revogr-header-style.scss',\n})\nexport class RevogrHeaderComponent {\n  // #region Properties\n  /**\n   * Stores\n   */\n  /** Viewport X */\n  @Prop() viewportCol: Observable<ViewportState>;\n  /** Dimension settings X */\n  @Prop() dimensionCol: Observable<DimensionSettingsState>;\n  /** Selection, range, focus */\n  @Prop() selectionStore: Observable<SelectionStoreState>;\n\n  /**\n   * Column groups\n   */\n  @Prop() groups: Groups;\n  /**\n   * Grouping depth, how many levels of grouping\n   */\n  @Prop() groupingDepth = 0;\n\n  /**\n   * Readonly mode\n   */\n  @Prop() readonly: boolean;\n  /**\n   * If columns can be resized\n   */\n  @Prop() canResize: boolean;\n  /**\n   * Defines resize position\n   */\n  @Prop() resizeHandler: ResizeProps['active'];\n\n  /**\n   * Columns - defines an array of grid columns.\n   */\n  @Prop() colData: ColumnRegular[];\n\n  /**\n   * Column filter\n   */\n  @Prop() columnFilter: boolean;\n\n  /**\n   * Column type\n   */\n  @Prop() type!: DimensionCols | 'rowHeaders';\n\n  /**\n   * Extra properties to pass into header renderer, such as vue or react components to handle parent\n   */\n  @Prop() additionalData: any = {};\n  // #endregion\n\n  // #region Events\n\n  /**\n   * On initial header click\n   */\n  @Event({\n    eventName: 'beforeheaderclick',\n  })\n  initialHeaderClick: EventEmitter<InitialHeaderClick>;\n\n  /**\n   * On header resize\n   */\n  @Event({\n    eventName: 'headerresize',\n  })\n  headerresize: EventEmitter<ViewSettingSizeProp>;\n\n  /**\n   * On before header resize\n   */\n  @Event({ eventName: 'beforeheaderresize', cancelable: true })\n  beforeResize: EventEmitter<ColumnRegular[]>;\n\n  /**\n   * On header double click\n   */\n  @Event({\n    eventName: 'headerdblclick',\n  })\n  headerdblClick: EventEmitter<InitialHeaderClick>;\n\n  /**\n   * Before each header cell render function. Allows to override cell properties\n   */\n  @Event({ eventName: 'beforeheaderrender' })\n  beforeHeaderRender: EventEmitter<HeaderRenderProps>;\n\n  /**\n   * After all header cells rendered. Finalizes cell rendering.\n   */\n  @Event({ eventName: 'afterheaderrender' })\n  afterHeaderRender: EventEmitter<Providers<DimensionCols | 'rowHeaders'>>;\n\n  // #endregion\n\n  @Element() element!: HTMLElement;\n\n  private onResize({ width }: { width?: number }, index: number) {\n    const col = this.colData[index];\n    const event = this.beforeResize.emit([\n      {\n        ...col,\n        size: width || undefined,\n      },\n    ]);\n    if (event.defaultPrevented) {\n      return;\n    }\n    this.headerresize.emit({ [index]: width || 0 });\n  }\n\n  private onResizeGroup(\n    changedX: number,\n    startIndex: number,\n    endIndex: number,\n  ) {\n    const sizes: ViewSettingSizeProp = {};\n    const cols = keyBy(this.viewportCol.get('items'), 'itemIndex');\n    const change = changedX / (endIndex - startIndex + 1);\n    for (let i = startIndex; i <= endIndex; i++) {\n      const item = cols[i];\n      if (item) {\n        sizes[i] = item.size + change;\n      }\n    }\n    this.headerresize.emit(sizes);\n  }\n\n  componentDidRender() {\n    this.afterHeaderRender.emit(this.providers);\n  }\n\n  render() {\n    const cols = this.viewportCol.get('items');\n    const range = this.selectionStore?.get('range');\n    const cells: VNode[] = [];\n    const visibleProps: { [prop: string]: number } = {};\n\n    // render header columns\n    for (let rgCol of cols) {\n      const colData = this.colData[rgCol.itemIndex];\n      const props: HeaderRenderProps = {\n        range: range,\n        column: rgCol,\n        data: {\n          ...colData,\n          index: rgCol.itemIndex,\n          providers: this.providers,\n        },\n        canFilter: !!this.columnFilter,\n        canResize: this.canResize,\n        active: this.resizeHandler,\n        onResize: e => this.onResize(e, rgCol.itemIndex),\n        onDblClick: e => this.headerdblClick.emit(e),\n        onClick: e => this.initialHeaderClick.emit(e),\n        additionalData: this.additionalData,\n      };\n      const event = this.beforeHeaderRender.emit(props);\n      if (event.defaultPrevented) {\n        continue;\n      }\n      cells.push(<HeaderRenderer {...event.detail} />);\n      visibleProps[colData?.prop] = rgCol.itemIndex;\n    }\n\n    return [\n      <div class=\"group-rgRow\">\n        <ColumnGroupsRenderer\n          canResize={this.canResize}\n          active={this.resizeHandler}\n          visibleProps={visibleProps}\n          providers={this.providers}\n          groups={this.groups}\n          dimensionCol={this.dimensionCol.state}\n          depth={this.groupingDepth}\n          onResize={(changedX, startIndex, endIndex) =>\n            this.onResizeGroup(changedX, startIndex, endIndex)\n          }\n          additionalData={this.additionalData}\n        />\n      </div>,\n      <div class={`${HEADER_ROW_CLASS} ${HEADER_ACTUAL_ROW_CLASS}`}>\n        {cells}\n      </div>,\n    ];\n  }\n\n  get providers(): Providers<DimensionCols | 'rowHeaders'> {\n    return {\n      type: this.type,\n      readonly: this.readonly,\n      data: this.colData,\n      viewport: this.viewportCol,\n      dimension: this.dimensionCol,\n      selection: this.selectionStore,\n    };\n  }\n}\n"]}