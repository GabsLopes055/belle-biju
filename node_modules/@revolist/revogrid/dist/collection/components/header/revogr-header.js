/*!
 * Built by Revolist OU ❤️
 */
import { h, } from "@stencil/core";
import keyBy from "lodash/keyBy";
import { HEADER_ACTUAL_ROW_CLASS, HEADER_ROW_CLASS } from "../../utils/consts";
import HeaderRenderer from "./header-renderer";
import ColumnGroupsRenderer from "../../plugins/groupingColumn/columnGroupsRenderer";
export class RevogrHeaderComponent {
    constructor() {
        this.viewportCol = undefined;
        this.dimensionCol = undefined;
        this.selectionStore = undefined;
        this.groups = undefined;
        this.groupingDepth = 0;
        this.readonly = undefined;
        this.canResize = undefined;
        this.resizeHandler = undefined;
        this.colData = undefined;
        this.columnFilter = undefined;
        this.type = undefined;
        this.additionalData = {};
    }
    onResize({ width }, index) {
        const col = this.colData[index];
        const event = this.beforeResize.emit([
            Object.assign(Object.assign({}, col), { size: width || undefined }),
        ]);
        if (event.defaultPrevented) {
            return;
        }
        this.headerresize.emit({ [index]: width || 0 });
    }
    onResizeGroup(changedX, startIndex, endIndex) {
        const sizes = {};
        const cols = keyBy(this.viewportCol.get('items'), 'itemIndex');
        const change = changedX / (endIndex - startIndex + 1);
        for (let i = startIndex; i <= endIndex; i++) {
            const item = cols[i];
            if (item) {
                sizes[i] = item.size + change;
            }
        }
        this.headerresize.emit(sizes);
    }
    componentDidRender() {
        this.afterHeaderRender.emit(this.providers);
    }
    render() {
        var _a;
        const cols = this.viewportCol.get('items');
        const range = (_a = this.selectionStore) === null || _a === void 0 ? void 0 : _a.get('range');
        const cells = [];
        const visibleProps = {};
        // render header columns
        for (let rgCol of cols) {
            const colData = this.colData[rgCol.itemIndex];
            const props = {
                range: range,
                column: rgCol,
                data: Object.assign(Object.assign({}, colData), { index: rgCol.itemIndex, providers: this.providers }),
                canFilter: !!this.columnFilter,
                canResize: this.canResize,
                active: this.resizeHandler,
                onResize: e => this.onResize(e, rgCol.itemIndex),
                onDblClick: e => this.headerdblClick.emit(e),
                onClick: e => this.initialHeaderClick.emit(e),
                additionalData: this.additionalData,
            };
            const event = this.beforeHeaderRender.emit(props);
            if (event.defaultPrevented) {
                continue;
            }
            cells.push(h(HeaderRenderer, Object.assign({}, event.detail)));
            visibleProps[colData === null || colData === void 0 ? void 0 : colData.prop] = rgCol.itemIndex;
        }
        return [
            h("div", { key: 'f01cf39610e7e66f7bf4fa09f52455875a940ced', class: "group-rgRow" }, h(ColumnGroupsRenderer, { key: 'fa60d0aa9bb63d86f7e07ed7c1372207147a13c4', canResize: this.canResize, active: this.resizeHandler, visibleProps: visibleProps, providers: this.providers, groups: this.groups, dimensionCol: this.dimensionCol.state, depth: this.groupingDepth, onResize: (changedX, startIndex, endIndex) => this.onResizeGroup(changedX, startIndex, endIndex), additionalData: this.additionalData })),
            h("div", { key: '65ab0e1d0ea5a548c7dc4abfda116beb29316b3d', class: `${HEADER_ROW_CLASS} ${HEADER_ACTUAL_ROW_CLASS}` }, cells),
        ];
    }
    get providers() {
        return {
            type: this.type,
            readonly: this.readonly,
            data: this.colData,
            viewport: this.viewportCol,
            dimension: this.dimensionCol,
            selection: this.selectionStore,
        };
    }
    static get is() { return "revogr-header"; }
    static get originalStyleUrls() {
        return {
            "$": ["revogr-header-style.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["revogr-header-style.css"]
        };
    }
    static get properties() {
        return {
            "viewportCol": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Observable<ViewportState>",
                    "resolved": "ObservableMap<ViewportState>",
                    "references": {
                        "Observable": {
                            "location": "import",
                            "path": "../../utils",
                            "id": "src/utils/index.ts::Observable"
                        },
                        "ViewportState": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::ViewportState"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Viewport X"
                }
            },
            "dimensionCol": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Observable<DimensionSettingsState>",
                    "resolved": "ObservableMap<DimensionSettingsState>",
                    "references": {
                        "Observable": {
                            "location": "import",
                            "path": "../../utils",
                            "id": "src/utils/index.ts::Observable"
                        },
                        "DimensionSettingsState": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::DimensionSettingsState"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Dimension settings X"
                }
            },
            "selectionStore": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Observable<SelectionStoreState>",
                    "resolved": "ObservableMap<SelectionStoreState>",
                    "references": {
                        "Observable": {
                            "location": "import",
                            "path": "../../utils",
                            "id": "src/utils/index.ts::Observable"
                        },
                        "SelectionStoreState": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::SelectionStoreState"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Selection, range, focus"
                }
            },
            "groups": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Groups",
                    "resolved": "{ [x: string]: any; }",
                    "references": {
                        "Groups": {
                            "location": "import",
                            "path": "@store",
                            "id": "src/store/index.ts::Groups"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Column groups"
                }
            },
            "groupingDepth": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Grouping depth, how many levels of grouping"
                },
                "attribute": "grouping-depth",
                "reflect": false,
                "defaultValue": "0"
            },
            "readonly": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Readonly mode"
                },
                "attribute": "readonly",
                "reflect": false
            },
            "canResize": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "If columns can be resized"
                },
                "attribute": "can-resize",
                "reflect": false
            },
            "resizeHandler": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ResizeProps['active']",
                    "resolved": "(\"r\" | \"b\" | \"rt\" | \"lt\" | \"rb\" | \"lb\" | \"l\" | \"t\")[]",
                    "references": {
                        "ResizeProps": {
                            "location": "import",
                            "path": "./resizable.directive",
                            "id": "src/components/header/resizable.directive.tsx::ResizeProps"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Defines resize position"
                }
            },
            "colData": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ColumnRegular[]",
                    "resolved": "ColumnRegular[]",
                    "references": {
                        "ColumnRegular": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::ColumnRegular"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Columns - defines an array of grid columns."
                }
            },
            "columnFilter": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Column filter"
                },
                "attribute": "column-filter",
                "reflect": false
            },
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DimensionCols | 'rowHeaders'",
                    "resolved": "\"colPinEnd\" | \"colPinStart\" | \"rgCol\" | \"rowHeaders\"",
                    "references": {
                        "DimensionCols": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::DimensionCols"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Column type"
                },
                "attribute": "type",
                "reflect": false
            },
            "additionalData": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Extra properties to pass into header renderer, such as vue or react components to handle parent"
                },
                "attribute": "additional-data",
                "reflect": false,
                "defaultValue": "{}"
            }
        };
    }
    static get events() {
        return [{
                "method": "initialHeaderClick",
                "name": "beforeheaderclick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "On initial header click"
                },
                "complexType": {
                    "original": "InitialHeaderClick",
                    "resolved": "{ index: number; originalEvent: MouseEvent; column: ColumnRegular; providers: Providers<DimensionCols | \"rowHeaders\">; }",
                    "references": {
                        "InitialHeaderClick": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::InitialHeaderClick"
                        }
                    }
                }
            }, {
                "method": "headerresize",
                "name": "headerresize",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "On header resize"
                },
                "complexType": {
                    "original": "ViewSettingSizeProp",
                    "resolved": "{ [x: string]: number; }",
                    "references": {
                        "ViewSettingSizeProp": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::ViewSettingSizeProp"
                        }
                    }
                }
            }, {
                "method": "beforeResize",
                "name": "beforeheaderresize",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "On before header resize"
                },
                "complexType": {
                    "original": "ColumnRegular[]",
                    "resolved": "ColumnRegular[]",
                    "references": {
                        "ColumnRegular": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::ColumnRegular"
                        }
                    }
                }
            }, {
                "method": "headerdblClick",
                "name": "headerdblclick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "On header double click"
                },
                "complexType": {
                    "original": "InitialHeaderClick",
                    "resolved": "{ index: number; originalEvent: MouseEvent; column: ColumnRegular; providers: Providers<DimensionCols | \"rowHeaders\">; }",
                    "references": {
                        "InitialHeaderClick": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::InitialHeaderClick"
                        }
                    }
                }
            }, {
                "method": "beforeHeaderRender",
                "name": "beforeheaderrender",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Before each header cell render function. Allows to override cell properties"
                },
                "complexType": {
                    "original": "HeaderRenderProps",
                    "resolved": "{ column: VirtualPositionItem; additionalData: any; data: ColumnTemplateProp; range?: RangeArea | null | undefined; canResize?: boolean | undefined; canFilter?: boolean | undefined; onResize?(e: ResizeEvent): void; onClick?(data: InitialHeaderClick): void; onDblClick?(data: InitialHeaderClick): void; } & Partial<Pick<ResizeProps, \"active\">>",
                    "references": {
                        "HeaderRenderProps": {
                            "location": "import",
                            "path": "./header-renderer",
                            "id": "src/components/header/header-renderer.tsx::HeaderRenderProps"
                        }
                    }
                }
            }, {
                "method": "afterHeaderRender",
                "name": "afterheaderrender",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "After all header cells rendered. Finalizes cell rendering."
                },
                "complexType": {
                    "original": "Providers<DimensionCols | 'rowHeaders'>",
                    "resolved": "{ type: DimensionCols | \"rowHeaders\"; readonly: boolean; data: ColumnRegular[] | Observable<DataSourceState<any, any>>; viewport: Observable<ViewportState>; dimension: Observable<DimensionSettingsState>; selection: Observable<SelectionStoreState>; }",
                    "references": {
                        "Providers": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::Providers"
                        },
                        "DimensionCols": {
                            "location": "import",
                            "path": "@type",
                            "id": "src/types/index.ts::DimensionCols"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "element"; }
}
//# sourceMappingURL=revogr-header.js.map
