{"version":3,"file":"autofill.service.js","sourceRoot":"","sources":["../../../src/components/overlay/autofill.service.tsx"],"names":[],"mappings":"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","sourcesContent":["import debounce from 'lodash/debounce';\nimport { DebouncedFunc } from 'lodash';\n\nimport { h } from '@stencil/core';\nimport { CELL_HANDLER_CLASS, MOBILE_CLASS } from '../../utils/consts';\nimport {\n  collectModelsOfRange,\n  EventData,\n  getCell,\n  getCurrentCell,\n  isAfterLast,\n} from './selection.utils';\nimport { DSourceState, getRange } from '@store';\nimport ColumnService from '../data/column.service';\nimport { getPropertyFromEvent } from '../../utils/events';\nimport {\n  DataLookup,\n  DataType,\n  DimensionSettingsState,\n  TempRange,\n  ChangedRange,\n  BeforeRangeSaveDataDetails,\n  RangeArea,\n  Cell,\n  DimensionRows, Nullable,\n} from '@type';\nimport { Observable } from '../../utils';\n\ntype Config = {\n  dimensionRow: Observable<DimensionSettingsState>;\n  dimensionCol: Observable<DimensionSettingsState>;\n  columnService: ColumnService;\n  dataStore: Observable<DSourceState<DataType, DimensionRows>>;\n\n  setTempRange(e: Nullable<TempRange> | null): Event | null;\n  selectionChanged(e: ChangedRange): Event;\n  rangeCopy(e: ChangedRange): Event;\n  rangeDataApply(e: BeforeRangeSaveDataDetails): CustomEvent;\n  setRange(e: RangeArea | null): boolean;\n  clearRangeDataApply(e: { range: RangeArea }): CustomEvent<{\n    range: RangeArea;\n  }>;\n\n  getData(): any;\n};\n\nconst enum AutoFillType {\n  selection = 'Selection',\n  autoFill = 'AutoFill',\n}\n\nexport class AutoFillService {\n  private autoFillType: AutoFillType | null = null;\n  private autoFillInitial: Cell | null = null;\n  private autoFillStart: Cell | null = null;\n  private autoFillLast: Cell | null = null;\n\n  private onMouseMoveAutofill: DebouncedFunc<\n    (e: MouseEvent | TouchEvent, data: EventData) => void\n  >;\n\n  constructor(private sv: Config) {}\n\n  /**\n   * Render autofill box\n   * @param range\n   * @param selectionFocus\n   */\n  renderAutofill(range: RangeArea | null, selectionFocus: Cell, isMobile = false) {\n    let handlerStyle;\n    if (range) {\n      handlerStyle = getCell(\n        range,\n        this.sv.dimensionRow.state,\n        this.sv.dimensionCol.state,\n      );\n    } else {\n      handlerStyle = getCell(\n        {\n          ...selectionFocus,\n          x1: selectionFocus.x,\n          y1: selectionFocus.y,\n        },\n        this.sv.dimensionRow.state,\n        this.sv.dimensionCol.state,\n      );\n    }\n    return (\n      <div\n        class={{\n          [CELL_HANDLER_CLASS]: true,\n          [MOBILE_CLASS]: isMobile,\n        }}\n        style={{\n          left: `${handlerStyle.right}px`,\n          top: `${handlerStyle.bottom}px`,\n        }}\n        onMouseDown={(e: MouseEvent) => this.autoFillHandler(e)}\n        onTouchStart={(e: TouchEvent) => this.autoFillHandler(e)}\n      />\n    );\n  }\n\n  private autoFillHandler(\n    e: MouseEvent | TouchEvent,\n    type = AutoFillType.autoFill,\n  ) {\n    let target: Element | null = null;\n    if (e.target instanceof Element) {\n      target = e.target;\n    }\n    if (!target) {\n      return;\n    }\n    this.selectionStart(target, this.sv.getData(), type);\n    e.preventDefault();\n  }\n\n  get isAutoFill() {\n    return !!this.autoFillType;\n  }\n\n  /**\n   * Process mouse move events\n   */\n  selectionMouseMove(e: MouseEvent | TouchEvent) {\n    // initiate mouse move debounce if not present\n    if (!this.onMouseMoveAutofill) {\n      this.onMouseMoveAutofill = debounce(\n        (e: MouseEvent | TouchEvent, data: EventData) =>\n          this.doAutofillMouseMove(e, data),\n        5,\n      );\n    }\n    if (this.isAutoFill) {\n      this.onMouseMoveAutofill(e, this.sv.getData());\n    }\n  }\n\n  private getFocus(focus: Cell | null, range: RangeArea | null) {\n    // there was an issue that it was taking last cell from range but focus was out\n    if (!focus && range) {\n      focus = { x: range.x, y: range.y };\n    }\n    return focus || null;\n  }\n\n  /**\n   * Autofill logic:\n   * on mouse move apply based on previous direction (if present)\n   */\n  private doAutofillMouseMove(event: MouseEvent | TouchEvent, data: EventData) {\n    // if no initial - not started\n    if (!this.autoFillInitial) {\n      return;\n    }\n    const x = getPropertyFromEvent(event, 'clientX', MOBILE_CLASS);\n    const y = getPropertyFromEvent(event, 'clientY', MOBILE_CLASS);\n    // skip touch\n    if (x === null || y === null) {\n      return;\n    }\n    const current = getCurrentCell({ x, y }, data);\n\n    // first time or direction equal to start(same as first time)\n    if (!this.autoFillLast) {\n      if (!this.autoFillLast) {\n        this.autoFillLast = this.autoFillStart;\n      }\n    }\n\n    // check if not the latest, if latest - do nothing\n    if (isAfterLast(current, data.lastCell)) {\n      return;\n    }\n    this.autoFillLast = current;\n\n    const isSame =\n      current.x === this.autoFillInitial.x &&\n      current.y === this.autoFillInitial.y;\n\n    // if same as initial - clear\n    if (isSame) {\n      this.sv.setTempRange(null);\n    } else {\n      const area = getRange(this.autoFillInitial, this.autoFillLast);\n      this.sv.setTempRange({\n        area,\n        type: this.autoFillType,\n      });\n    }\n  }\n\n  /**\n   * Range selection started\n   * Mode @param type:\n   * Can be triggered from MouseDown selection on element\n   * Or can be triggered on corner square drag\n   */\n  selectionStart(\n    target: Element,\n    data: EventData,\n    type = AutoFillType.selection,\n  ) {\n    /** Get cell by autofill element */\n    const { top, left } = target.getBoundingClientRect();\n    this.autoFillInitial = this.getFocus(data.focus, data.range);\n    this.autoFillType = type;\n    this.autoFillStart = getCurrentCell({ x: left, y: top }, data);\n  }\n\n  /**\n   * Clear current range selection on mouse up and mouse leave events\n   */\n  clearAutoFillSelection(focus: Cell | null, oldRange: RangeArea | null) {\n    // If autofill was active, apply autofill values\n    if (this.autoFillInitial) {\n      // Fetch latest focus\n      this.autoFillInitial = this.getFocus(focus, oldRange);\n\n      // Apply range data if autofill mode is active\n      if (this.autoFillType === AutoFillType.autoFill) {\n        const range = getRange(this.autoFillInitial, this.autoFillLast);\n\n        // If range is present, apply data\n        if (range) {\n          const {\n            defaultPrevented: stopApply,\n            detail: { range: newRange },\n          } = this.sv.clearRangeDataApply({\n            range,\n          });\n\n          // If data apply was not prevented, apply new range\n          if (!stopApply && oldRange) {\n            this.applyRangeWithData(newRange, oldRange);\n          } else {\n            // If data apply was prevented, clear temporary range\n            this.sv.setTempRange(null);\n          }\n        }\n      } else {\n        // If not autofill mode, apply range only\n        this.applyRangeOnly(this.autoFillInitial, this.autoFillLast);\n      }\n    }\n\n    // Reset autofill state\n    this.resetAutoFillState();\n  }\n\n  /**\n   * Reset autofill state\n   */\n  private resetAutoFillState() {\n    this.autoFillType = null;\n    this.autoFillInitial = null;\n    this.autoFillLast = null;\n    this.autoFillStart = null;\n  }\n\n  /**\n   * Trigger range apply events and handle responses\n   */\n  onRangeApply(newData: DataLookup, newRange: RangeArea | null, oldRange: RangeArea | null) {\n    this.sv.rangeDataApply({\n      data: newData,\n      models: collectModelsOfRange(newData, this.sv.dataStore),\n      type: this.sv.dataStore.get('type'),\n      oldRange,\n      newRange\n    });\n\n    this.sv.setRange(newRange);\n  }\n\n  /** Apply range and copy data during range application */\n  private applyRangeWithData(newRange: RangeArea, rangeToCopy: RangeArea) {\n    const rangeData: ChangedRange = {\n      type: this.sv.dataStore.get('type'),\n      colType: this.sv.columnService.type,\n      newData: {},\n      mapping: {},\n      newRange,\n      oldRange: rangeToCopy,\n    };\n    const { mapping, changed } = this.sv.columnService.getRangeData(\n      rangeData,\n      this.sv.columnService.columns,\n    );\n    rangeData.newData = changed;\n    rangeData.mapping = mapping;\n    let e = this.sv.selectionChanged(rangeData);\n\n    // if default prevented - clear range\n    if (e.defaultPrevented) {\n      this.sv.setTempRange(null);\n      return;\n    }\n\n    e = this.sv.rangeCopy(rangeData);\n    if (e.defaultPrevented) {\n      this.sv.setRange(newRange);\n      return;\n    }\n    this.onRangeApply(rangeData.newData, newRange, rangeToCopy);\n  }\n\n  /**\n   * Update range selection only,\n   * no data change (mouse selection)\n   */\n  private applyRangeOnly(start?: Cell | null, end?: Cell | null) {\n    // no changes to apply\n    if (!start || !end) {\n      return;\n    }\n\n    const newRange = getRange(start, end);\n    this.sv.setRange(newRange);\n  }\n}\n"]}