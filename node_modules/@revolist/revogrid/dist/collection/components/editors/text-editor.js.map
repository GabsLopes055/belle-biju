{"version":3,"file":"text-editor.js","sourceRoot":"","sources":["../../../src/components/editors/text-editor.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAC/D,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAiBtC,MAAM,OAAO,UAAU;IAMrB,YACS,IAA2B,EAC1B,YAA2B;QAD5B,SAAI,GAAJ,IAAI,CAAuB;QAC1B,iBAAY,GAAZ,YAAY,CAAe;QAPrC,cAAS,GAA4B,IAAI,CAAC;QAE1C,YAAO,GAAmB,IAAI,CAAC;QAC/B,aAAQ,GAAc,SAAS,CAAC;IAK7B,CAAC;IAEJ;;OAEG;IACH,KAAK,CAAC,kBAAkB;;QACtB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,MAAM,OAAO,EAAE,CAAC;YAChB,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,EAAE,CAAC;QAC1B,CAAC;IACH,CAAC;IAED,SAAS,CAAC,CAAgB;QACxB,MAAM,OAAO,GAAG,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAE9B,IACE,CAAC,QAAQ,IAAI,OAAO,CAAC;YACrB,CAAC,CAAC,MAAM;YACR,IAAI,CAAC,YAAY;YACjB,CAAC,CAAC,CAAC,WAAW,EACd,CAAC;YACD,qCAAqC;YACrC,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,mDAAmD;YACnD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IAED;;OAEG;IACH,gBAAgB;;QACd,MAAA,IAAI,CAAC,SAAS,0CAAE,IAAI,EAAE,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,QAAQ;;QACN,OAAO,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,CAAC;IAC/B,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,CAAuB,EAAE,eAAoB;;QAClD,OAAO,CAAC,CAAC,OAAO,EAAE;YAChB,IAAI,EAAE,MAAM;YACZ,YAAY,EAAE,OAAO;YACrB,iCAAiC;YACjC,KAAK,EAAE,MAAA,MAAA,IAAI,CAAC,QAAQ,0CAAE,GAAG,mCAAI,EAAE;YAC/B,8CAA8C;YAC9C,GAAG,EAAE,CAAC,EAA2B,EAAE,EAAE;gBACnC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACtB,CAAC;YACD,2CAA2C;YAC3C,SAAS,EAAE,CAAC,CAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;SACnD,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { type VNode, h as createElement } from '@stencil/core';\nimport { isEnterKeyValue, isTab } from '../../utils/key.utils';\nimport { timeout } from '../../utils';\nimport type { EditCell, EditorBase, ColumnDataSchemaModel } from '@type';\n\n/**\n * Represents a cell editor in a grid.\n *\n * It's a good place to start with your own editor.\n * It manages the editing of cells by handling events, saving data, rendering the editor UI, and managing the lifecycle of the editor instance.\n */\n\n/**\n * Callback triggered on cell editor save\n * Closes editor when called\n * @param preventFocus - if true editor will not be closed and next cell will not be focused\n */\nexport type SaveCallback = (value: any, preventFocus: boolean) => void;\n\nexport class TextEditor implements EditorBase {\n  editInput: HTMLInputElement | null = null;\n\n  element: Element | null = null;\n  editCell?: EditCell = undefined;\n\n  constructor(\n    public data: ColumnDataSchemaModel,\n    private saveCallback?: SaveCallback,\n  ) {}\n\n  /**\n   * Callback triggered on cell editor render\n   */\n  async componentDidRender(): Promise<void> {\n    if (this.editInput) {\n      await timeout();\n      this.editInput?.focus();\n    }\n  }\n\n  onKeyDown(e: KeyboardEvent) {\n    const isEnter = isEnterKeyValue(e.key);\n    const isKeyTab = isTab(e.key);\n\n    if (\n      (isKeyTab || isEnter) &&\n      e.target &&\n      this.saveCallback &&\n      !e.isComposing\n    ) {\n      // blur is needed to avoid autoscroll\n      this.beforeDisconnect();\n      // request callback which will close cell after all\n      this.saveCallback(this.getValue(), isKeyTab);\n    }\n  }\n\n  /**\n   * IMPORTANT: Prevent scroll glitches when editor is closed and focus is on current input element.\n   */\n  beforeDisconnect() {\n    this.editInput?.blur();\n  }\n\n  /**\n   * Get value from input\n   */\n  getValue() {\n    return this.editInput?.value;\n  }\n\n  /**\n   * Render method for Editor plugin.\n   * Renders input element with passed data from cell.\n   * @param {Function} h - h function from stencil render.\n   * @param {Object} _additionalData - additional data from plugin.\n   * @returns {VNode} - input element.\n   */\n  render(h: typeof createElement, _additionalData: any): VNode | VNode[] {\n    return h('input', {\n      type: 'text',\n      enterKeyHint: 'enter',\n      // set input value from cell data\n      value: this.editCell?.val ?? '',\n      // save input element as ref for further usage\n      ref: (el: HTMLInputElement | null) => {\n        this.editInput = el;\n      },\n      // listen to keydown event on input element\n      onKeyDown: (e: KeyboardEvent) => this.onKeyDown(e),\n    });\n  }\n}\n"]}