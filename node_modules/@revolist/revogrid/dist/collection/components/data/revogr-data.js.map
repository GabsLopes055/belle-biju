{"version":3,"file":"revogr-data.js","sourceRoot":"","sources":["../../../src/components/data/revogr-data.tsx"],"names":[],"mappings":"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":["import {\n  type VNode,\n  Component,\n  Host,\n  Watch,\n  Element,\n  Event,\n  Prop,\n  EventEmitter,\n  h,\n  Method,\n  State,\n} from '@stencil/core';\n\nimport ColumnService from './column.service';\nimport { DATA_COL, DATA_ROW, ROW_FOCUSED_CLASS } from '../../utils/consts';\n\nimport { type DSourceState, getSourceItem } from '@store';\nimport RowRenderer, { PADDING_DEPTH } from './row-renderer';\nimport GroupingRowRenderer from '../../plugins/groupingRow/grouping.row.renderer';\nimport { isGrouping } from '../../plugins/groupingRow/grouping.service';\nimport type { AllDimensionType, CellTemplateProp, DimensionCols, DimensionRows } from '@type';\nimport { RowHighlightPlugin } from './row-highlight.plugin';\nimport { convertVNodeToHTML } from '../vnode/vnode.utils';\nimport { CellRenderer } from './cell-renderer';\nimport type {\n  ViewportState,\n  DimensionSettingsState,\n  BeforeRowRenderEvent,\n  Providers,\n  ColumnRegular,\n  DataType,\n  CellProps,\n  BeforeCellRenderEvent,\n  DragStartEvent,\n  VirtualPositionItem,\n  RangeArea,\n  SelectionStoreState,\n} from '@type';\nimport type { Observable } from '../../utils';\nimport type { RowGroupingProps } from '../../plugins';\n\n/**\n * This component is responsible for rendering data\n * Rows, columns, groups and cells\n */\n@Component({\n  tag: 'revogr-data',\n  styleUrl: 'revogr-data-style.scss',\n})\nexport class RevogrData {\n  // #region Properties\n  /**\n   * Readonly mode\n   */\n  @Prop() readonly: boolean;\n  /**\n   * Range allowed\n   */\n  @Prop() range: boolean;\n\n  /**\n   * Defines property from which to read row class\n   */\n  @Prop() rowClass: string;\n  /**\n   * Additional data to pass to renderer\n   * Used in plugins such as vue or react to pass root app entity to cells\n   */\n  @Prop() additionalData: any;\n  /** Stores */\n  /** Selection, range, focus for row selection */\n  @Prop() rowSelectionStore!: Observable<SelectionStoreState>;\n  /** Viewport Y */\n  @Prop() viewportRow!: Observable<ViewportState>;\n  /** Viewport X */\n  @Prop() viewportCol!: Observable<ViewportState>;\n  /** Dimension settings Y */\n  @Prop() dimensionRow!: Observable<DimensionSettingsState>;\n\n  /** Static stores, not expected to change during component lifetime */\n  /**\n   * Column source\n   */\n  @Prop() colData!: Observable<DSourceState<ColumnRegular, DimensionCols>>;\n  /**\n   * Data rows source\n   */\n  @Prop() dataStore!: Observable<DSourceState<DataType, DimensionRows>>;\n  /**\n   * Row data type\n   */\n  @Prop({ reflect: true }) type!: DimensionRows;\n\n  /**\n   * Column data type\n   */\n  @Prop({ reflect: true }) colType!: DimensionCols | 'rowHeaders';\n\n  /**\n   * Prevent rendering until job is done.\n   * Can be used for initial rendering performance improvement.\n   * When several plugins require initial rendering this will prevent double initial rendering.\n   */\n  @Prop() jobsBeforeRender: (Promise<any> | (() => Promise<any>))[] = [];\n  // #endregion\n\n  /**\n   * Before each row render\n   */\n  @Event() beforerowrender: EventEmitter<BeforeRowRenderEvent>;\n  \n  /**\n   * When data render finished for the designated type\n   */\n  @Event() afterrender: EventEmitter<{ type: DimensionRows }>;\n  /**\n   * Before each cell render function. Allows to override cell properties\n   */\n  @Event({ eventName: 'beforecellrender' })\n  beforeCellRender: EventEmitter<BeforeCellRenderEvent<CellTemplateProp>>;\n\n  /**\n   * Before data render\n   */\n  @Event({ eventName: 'beforedatarender' })\n  beforeDataRender: EventEmitter<AllDimensionType>;\n  /**\n   * Event emitted on cell drag start\n   */\n  @Event({ eventName: 'dragstartcell' })\n  dragStartCell: EventEmitter<DragStartEvent>;\n\n  /**\n   * Pointed cell update.\n   */\n  @Method() async updateCell(e: {\n    row: number; // virtual\n    col: number; // virtual\n  }) {\n    // Stencil tweak to update cell content\n    const cell = this.renderedRows.get(e.row)?.$children$?.[e.col];\n    if (cell?.$attrs$?.redraw) {\n      const children = await convertVNodeToHTML(\n        this.element,\n        cell.$attrs$.redraw,\n      );\n      cell.$elm$.innerHTML = children.html;\n      cell.$key$ = Math.random();\n    }\n  }\n\n  @Element() element!: Element;\n  @State() providers: Providers;\n  private columnService: ColumnService;\n  private rowHighlightPlugin: RowHighlightPlugin;\n  /**\n   * Rendered rows - virtual index vs vnode\n   */\n  private renderedRows = new Map<number, VNode>();\n  private rangeUnsubscribe: (() => void) | undefined;\n\n  @Watch('dataStore') onDataStoreChange() {\n    this.onStoreChange();\n  }\n  @Watch('colData') onColDataChange() {\n    this.onStoreChange();\n  }\n  onStoreChange() {\n    this.columnService?.destroy();\n    this.columnService = new ColumnService(this.dataStore, this.colData);\n    // make sure we have correct data, before render\n    this.providers = {\n      type: this.type,\n      colType: this.colType,\n      readonly: this.readonly,\n      data: this.dataStore,\n      columns: this.colData,\n      viewport: this.viewportCol,\n      dimension: this.dimensionRow,\n      selection: this.rowSelectionStore,\n    };\n\n    this.rangeUnsubscribe?.();\n    this.rangeUnsubscribe = this.rowSelectionStore.onChange(\n      'range',\n      (e: RangeArea) =>\n        this.rowHighlightPlugin.selectionChange(e, this.renderedRows),\n    );\n  }\n\n  connectedCallback() {\n    this.rowHighlightPlugin = new RowHighlightPlugin();\n    this.onStoreChange();\n  }\n\n  disconnectedCallback() {\n    this.columnService?.destroy();\n    this.rangeUnsubscribe?.();\n  }\n\n  async componentWillRender() {\n    this.beforeDataRender.emit({\n      rowType: this.type,\n      colType: this.colType as DimensionCols,\n    });\n    return Promise.all(this.jobsBeforeRender.map(p => typeof p === 'function' ? p() : p));\n  }\n\n  componentDidRender() {\n    this.afterrender.emit({ type: this.type });\n  }\n\n  render() {\n    this.renderedRows = new Map();\n    const columnsData = this.columnService.columns;\n    if (!columnsData.length) {\n      return;\n    }\n    const rows = this.viewportRow.get('items');\n    if (!rows.length) {\n      return;\n    }\n    const cols = this.viewportCol.get('items');\n    if (!cols.length) {\n      return;\n    }\n    const rowsEls: VNode[] = [];\n    const depth = this.dataStore.get('groupingDepth');\n    const groupingCustomRenderer = this.dataStore.get('groupingCustomRenderer');\n    const groupDepth = this.columnService.hasGrouping ? depth : 0;\n    for (let rgRow of rows) {\n      const dataItem = getSourceItem(this.dataStore, rgRow.itemIndex);\n\n      // #region Grouping\n      if (isGrouping(dataItem)) {\n        const gmodel: RowGroupingProps = {\n          ...rgRow,\n          index: rgRow.itemIndex,\n          model: dataItem,\n          groupingCustomRenderer,\n          // Only show expand button if grouping is enabled and not in row headers\n          hasExpand: this.columnService.hasGrouping && this.colType !== 'rowHeaders',\n          columnItems: cols,\n          providers: this.providers,\n        };\n        rowsEls.push(<GroupingRowRenderer {...gmodel} />);\n        continue;\n      }\n      // #endregion\n      const cells: (VNode | string | void)[] = [];\n\n      // #region Cells\n      for (let rgCol of cols) {\n        const smodel: CellTemplateProp = {\n          ...this.columnService.rowDataModel(\n            rgRow.itemIndex,\n            rgCol.itemIndex,\n          ),\n          providers: this.providers,\n        };\n\n        // call before cell render\n        const cellEvent = this.triggerBeforeCellRender(smodel, rgRow, rgCol);\n\n        // if event was prevented\n        if (cellEvent.defaultPrevented) {\n          continue;\n        }\n\n        const {\n          detail: { column: columnProps, row: rowProps, model: schemaModel },\n        } = cellEvent;\n\n        const defaultProps: CellProps = {\n          [DATA_COL]: columnProps.itemIndex,\n          [DATA_ROW]: rowProps.itemIndex,\n          style: {\n            width: `${columnProps.size}px`,\n            transform: `translateX(${columnProps.start}px)`,\n            height: rowProps.size ? `${rowProps.size}px` : undefined,\n          },\n        };\n        /**\n         * For grouping, can be removed in the future and replaced with event\n         */\n        if (groupDepth && !columnProps.itemIndex && defaultProps.style) {\n          defaultProps.style.paddingLeft = `${PADDING_DEPTH * groupDepth}px`;\n        }\n\n        const props = this.columnService.mergeProperties(\n          rowProps.itemIndex,\n          columnProps.itemIndex,\n          defaultProps,\n          schemaModel,\n        );\n\n        // Never use webcomponent for cell render\n        // It's very slow because of webcomponent initialization takes time\n        const cellNode = <CellRenderer\n          renderProps={{\n            schemaModel,\n            additionalData: this.additionalData,\n            dragStartCell: this.dragStartCell,\n          }}\n          cellProps={props}\n        />;\n        cells.push(cellNode);\n      }\n      // #endregion\n\n      // #region Rows\n      let rowClass = this.rowClass\n        ? this.columnService.getRowClass(rgRow.itemIndex, this.rowClass)\n        : '';\n      if (this.rowHighlightPlugin.isRowFocused(rgRow.itemIndex)) {\n        rowClass += ` ${ROW_FOCUSED_CLASS}`;\n      }\n      const row: VNode = (\n        <RowRenderer\n          index={rgRow.itemIndex}\n          rowClass={rowClass}\n          size={rgRow.size}\n          start={rgRow.start}\n        >\n          {cells}\n        </RowRenderer>\n      );\n      this.beforerowrender.emit({\n        node: row,\n        item: rgRow,\n        model: dataItem,\n        colType: this.columnService.type,\n        rowType: this.type,\n      });\n      rowsEls.push(row);\n      this.renderedRows.set(rgRow.itemIndex, row);\n      // #endregion\n    }\n    return (\n      <Host>\n        <slot />\n        {rowsEls}\n      </Host>\n    );\n  }\n\n  triggerBeforeCellRender(\n    model: CellTemplateProp,\n    row: VirtualPositionItem,\n    column: VirtualPositionItem,\n  ) {\n    const detail: BeforeCellRenderEvent<CellTemplateProp> = {\n      column,\n      row,\n      model,\n      rowType: model.type,\n      colType: model.colType,\n    };\n    return this.beforeCellRender.emit(detail);\n  }\n}\n"]}