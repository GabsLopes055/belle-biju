{"version":3,"file":"cell-renderer.js","sourceRoot":"","sources":["../../../src/components/data/cell-renderer.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAc,KAAK,EAAgB,MAAM,eAAe,CAAC;AAMnE,OAAO,EACL,eAAe,EACf,eAAe,EACf,iBAAiB,GAClB,MAAM,aAAa,CAAC;AAErB,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AASpD,SAAS,UAAU,CAAC,CAAc;;IAChC,MAAM,GAAG,GAAuB,EAAE,CAAC;IAEnC,sBAAsB;IACtB,MAAM,QAAQ,GAAG,MAAA,CAAC,CAAC,WAAW,CAAC,MAAM,0CAAE,YAAY,CAAC;IACpD,IAAI,QAAQ,EAAE,CAAC;QACb,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;IACzD,CAAC;IACD,aAAa;IAEb,uBAAuB;SAClB,CAAC;QACJ,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;YAC1B,+BAA+B;YAC/B,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;gBAChB,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC;YAC9D,CAAC;YACD,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,WAAW;QACX,IACE,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO;YAC5B,gBAAgB,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,WAAW,CAAC,EAC7D,CAAC;YACD,GAAG,CAAC,IAAI,CACN,YACE,KAAK,EAAE,eAAe,EACtB,WAAW,EAAE,aAAa,CAAC,EAAE;;oBAC3B,OAAA,MAAA,CAAC,CAAC,aAAa,0CAAE,IAAI,CAAC;wBACpB,aAAa;wBACb,KAAK,EAAE,CAAC,CAAC,WAAW;qBACrB,CAAC,CAAA;iBAAA;gBAGJ,YAAM,KAAK,EAAE,eAAe,GAAI,CAC3B,CACR,CAAC;QACJ,CAAC;QAED,GAAG,CAAC,IAAI,CAAC,GACP,iBAAiB,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,CAC7D,EAAE,CAAC,CAAC;IACN,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAED,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,EAC3B,WAAW,EACX,SAAS,GAIV,EAAS,EAAE;IACV,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAClD,OAAO,CACL,2BAAS,SAAS,IAAE,MAAM,EAAE,MAAM,KAC/B,MAAM,EAAE,CACL,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { h, type VNode, Build, EventEmitter } from '@stencil/core';\nimport {\n  DragStartEvent,\n  CellTemplateProp,\n} from '@type';\n\nimport {\n  DRAGGABLE_CLASS,\n  DRAG_ICON_CLASS,\n  getCellDataParsed,\n} from '../../utils';\n\nimport { isRowDragService } from './column.service';\n\ninterface RenderProps {\n  schemaModel: CellTemplateProp;\n  additionalData?: any;\n  dragStartCell?: EventEmitter<DragStartEvent>;\n}\n\n\nfunction renderCell(v: RenderProps) {\n  const els: (VNode | string)[] = [];\n\n  // #region Custom cell\n  const template = v.schemaModel.column?.cellTemplate;\n  if (template) {\n    els.push(template(h, v.schemaModel, v.additionalData));\n  }\n  // #endregion\n\n  // #region Regular cell\n  else {\n    if (!v.schemaModel.column) {\n      // something is wrong with data\n      if (Build.isDev) {\n        console.error('Investigate column problem.', v.schemaModel);\n      }\n      return '';\n    }\n\n    // Row drag\n    if (\n      v.schemaModel.column.rowDrag &&\n      isRowDragService(v.schemaModel.column.rowDrag, v.schemaModel)\n    ) {\n      els.push(\n        <span\n          class={DRAGGABLE_CLASS}\n          onMouseDown={originalEvent =>\n            v.dragStartCell?.emit({\n              originalEvent,\n              model: v.schemaModel,\n            })\n          }\n        >\n          <span class={DRAG_ICON_CLASS} />\n        </span>,\n      );\n    }\n    \n    els.push(`${\n      getCellDataParsed(v.schemaModel.model, v.schemaModel.column)\n    }`);\n  }\n  return els;\n}\n\nexport const CellRenderer = ({\n  renderProps,\n  cellProps,\n}: {\n  renderProps: RenderProps;\n  cellProps: any;\n}): VNode => {\n  const render = renderCell.bind(null, renderProps);\n  return (\n    <div {...cellProps} redraw={render}>\n      {render()}\n    </div>\n  );\n};\n"]}