{"version":3,"file":"row-highlight.plugin.js","sourceRoot":"","sources":["../../../src/components/data/row-highlight.plugin.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AAGvD;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAA/B;QACU,iBAAY,GAAqB,IAAI,CAAC;IAkDhD,CAAC;IAjDC,eAAe,CAAC,CAAY,EAAE,YAAgC;QAC5D,uBAAuB;QACvB,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,YAAY,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;;gBAC9B,qBAAqB;gBACrB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;oBAC/B,OAAO;gBACT,CAAC;gBAED,uBAAuB;gBACvB,IACE,GAAG;oBACH,GAAG,CAAC,KAAK,YAAY,WAAW;oBAChC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAC/C,CAAC;oBACD,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;oBAC9C,IAAI,MAAA,GAAG,CAAC,OAAO,0CAAE,KAAK,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC;wBACnD,GAAG,CAAC,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAC3C,iBAAiB,EACjB,EAAE,CACH,CAAC;oBACJ,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAED,kBAAkB;QAClB,IAAI,CAAC,EAAE,CAAC;YACN,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBACjC,MAAM,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChC,IACE,GAAG;oBACH,GAAG,CAAC,KAAK,YAAY,WAAW;oBAChC,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAChD,CAAC;oBACD,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;oBAChD,KAAK,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,GAAG,GAAG,iBAAiB,CAAC;oBAC5D,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBAC7C,CAAC;YACH,CAAC;QACH,CAAC;QACD,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,YAAY,CAAC,CAAS;QACpB,OAAO,CACL,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,CAC3E,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { type VNode } from '@stencil/core';\nimport { ROW_FOCUSED_CLASS } from '../../utils/consts';\nimport { RangeArea } from '@type';\n\n/**\n * Class is responsible for highlighting rows in a table.\n */\nexport class RowHighlightPlugin {\n  private currentRange: RangeArea | null = null;\n  selectionChange(e: RangeArea, renderedRows: Map<number, VNode>) {\n    // clear previous range\n    if (this.currentRange) {\n      renderedRows.forEach((row, y) => {\n        // skip current range\n        if (e && y >= e.y && y <= e.y1) {\n          return;\n        }\n\n        // clear previous range\n        if (\n          row &&\n          row.$elm$ instanceof HTMLElement &&\n          row.$elm$.classList.contains(ROW_FOCUSED_CLASS)\n        ) {\n          row.$elm$.classList.remove(ROW_FOCUSED_CLASS);\n          if (row.$attrs$?.class.includes(ROW_FOCUSED_CLASS)) {\n            row.$attrs$.class = row.$attrs$.class.replace(\n              ROW_FOCUSED_CLASS,\n              '',\n            );\n          }\n        }\n      });\n    }\n\n    // apply new range\n    if (e) {\n      for (let y = e.y; y <= e.y1; y++) {\n        const row = renderedRows.get(y);\n        if (\n          row &&\n          row.$elm$ instanceof HTMLElement &&\n          !row.$elm$.classList.contains(ROW_FOCUSED_CLASS)\n        ) {\n          const attrs = (row.$attrs$ = row.$attrs$ || {});\n          attrs.class = (attrs.class || '') + ' ' + ROW_FOCUSED_CLASS;\n          row.$elm$.classList.add(ROW_FOCUSED_CLASS);\n        }\n      }\n    }\n    this.currentRange = e;\n  }\n\n  isRowFocused(y: number) {\n    return (\n      this.currentRange && y >= this.currentRange.y && y <= this.currentRange.y1\n    );\n  }\n}\n"]}