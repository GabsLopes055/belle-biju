{"version":3,"file":"revogr-row-headers.js","sourceRoot":"","sources":["../../../src/components/rowHeaders/revogr-row-headers.tsx"],"names":[],"mappings":"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","sourcesContent":["import { h, Host, Component, Prop, Event, EventEmitter } from '@stencil/core';\nimport type { JSXBase } from '@stencil/core/internal';\n\nimport { ViewportStore, DataStore } from '@store';\nimport type {\n  RowHeaders,\n  ViewPortScrollEvent,\n  DataType,\n  ColumnRegular,\n  ViewportData,\n  ElementScroll,\n  DimensionRows,\n  DimensionCols,\n} from '@type';\n\nimport { ROW_HEADER_TYPE } from '../../utils/consts';\nimport { RowHeaderRender } from './row-header-render';\nimport { calculateRowHeaderSize } from '../../utils/row-header-utils';\nimport { HEADER_SLOT } from '../revoGrid/viewport.helpers';\nimport { type JSX } from '../../components';\n\n/**\n * Row headers component\n * Visible on the left side of the table\n */\n\n@Component({ tag: 'revogr-row-headers' })\nexport class RevogrRowHeaders {\n  // #region Properties\n  /**\n   * Header height to setup row headers\n   */\n  @Prop() height: number;\n\n  /**\n   * Viewport data\n   */\n  @Prop() dataPorts: ViewportData[];\n  /**\n   * Header props\n   */\n  @Prop() headerProp: Record<string, any>;\n\n  /**\n   * Row class\n   */\n  @Prop() rowClass: string;\n\n  /**\n   * Enable resize\n   */\n  @Prop() resize: boolean;\n  /**\n   * Row header column\n   */\n  @Prop() rowHeaderColumn: RowHeaders;\n  /**\n   * Additional data to pass to renderer\n   */\n  @Prop() additionalData: any;\n  /**\n   * Prevent rendering until job is done.\n   * Can be used for initial rendering performance improvement.\n   * When several plugins require initial rendering this will prevent double initial rendering.\n   */\n  @Prop() jobsBeforeRender: Promise<any>[] = [];\n  // #endregion\n\n  /**\n   * Scroll viewport\n   */\n  @Event({ eventName: 'scrollview', bubbles: false })\n  scrollViewport: EventEmitter<ViewPortScrollEvent>;\n  /**\n   * Register element to scroll\n   */\n  @Event({ eventName: 'ref', bubbles: false })\n  elementToScroll: EventEmitter<ElementScroll>;\n\n  render() {\n    const dataViews: HTMLElement[] = [];\n    const viewport = new ViewportStore('colPinStart');\n\n    /** render viewports rows */\n    let totalLength = 1;\n    // todo: this part could be optimized to avoid to often re-render dataPorts can be cached\n    for (let data of this.dataPorts) {\n      const itemCount = data.dataStore.get('items').length;\n\n      // initiate row data\n      const dataStore = new DataStore<DataType, DimensionRows>(data.type, {\n        ...data.dataStore.state,\n      });\n\n      // initiate column data\n      const colData = new DataStore<ColumnRegular, DimensionCols>(\n        'colPinStart',\n      );\n      const column: ColumnRegular = {\n        cellTemplate: RowHeaderRender(totalLength),\n        ...this.rowHeaderColumn,\n      };\n      colData.updateData([column]);\n      dataViews.push(\n        <revogr-data\n          {...data}\n          colType=\"rowHeaders\"\n          jobsBeforeRender={this.jobsBeforeRender}\n          rowClass={this.rowClass}\n          dataStore={dataStore.store}\n          colData={colData.store}\n          viewportCol={viewport.store}\n          readonly={true}\n          range={false}\n        />,\n      );\n      totalLength += itemCount;\n    }\n\n    const colSize = calculateRowHeaderSize(totalLength, this.rowHeaderColumn);\n    viewport.setViewport({\n      realCount: 1,\n      virtualSize: 0,\n      items: [\n        {\n          size: colSize,\n          start: 0,\n          end: colSize,\n          itemIndex: 0,\n        },\n      ],\n    });\n\n    const viewportScroll: JSX.RevogrViewportScroll &\n      JSXBase.HTMLAttributes<HTMLRevogrViewportScrollElement> = {\n      contentHeight: this.height,\n      contentWidth: 0,\n      style: { minWidth: `${colSize}px` },\n      colType: 'rowHeaders',\n      ref: (el) => this.elementToScroll.emit(el),\n      onScrollviewport: (e: CustomEvent) => this.scrollViewport.emit(e.detail),\n    };\n    const viewportHeader: JSX.RevogrHeader & { slot: string } = {\n      ...this.headerProp,\n      // groups not present on row headers\n      groups: [],\n      colData:\n        typeof this.rowHeaderColumn === 'object' ? [this.rowHeaderColumn] : [],\n      viewportCol: viewport.store,\n      canResize: false,\n      type: ROW_HEADER_TYPE,\n      // parent,\n      slot: HEADER_SLOT,\n    };\n    return (\n      <Host class={{ [ROW_HEADER_TYPE]: true }} key={ROW_HEADER_TYPE}>\n        <revogr-viewport-scroll {...viewportScroll} row-header={true}>\n          <revogr-header {...viewportHeader} />\n          {dataViews}\n        </revogr-viewport-scroll>\n      </Host>\n    );\n  }\n}\n"]}