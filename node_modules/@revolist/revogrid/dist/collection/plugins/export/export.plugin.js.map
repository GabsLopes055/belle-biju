{"version":3,"file":"export.plugin.js","sourceRoot":"","sources":["../../../src/plugins/export/export.plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import fill from 'lodash/fill';\nimport { columnTypes, rowTypes, Group, Groups } from '@store';\n\nimport { timeout } from '../../utils';\nimport { BasePlugin } from '../base.plugin';\nimport { ExportCsv } from './csv';\nimport type { ColSource, CSVFormat, DataInput, Formatter } from './types';\nimport type { DimensionCols, ColumnProp, DataType } from '@type';\n\nexport * from './csv';\nexport * from './types';\n\nenum ExportTypes {\n  csv = 'csv',\n}\n\nexport type ExportFormat = Partial<CSVFormat>;\n\nexport class ExportFilePlugin extends BasePlugin {\n  /** Exports string */\n  async exportString(options: ExportFormat = {}, t: ExportTypes = ExportTypes.csv) {\n    const data = await this.beforeexport();\n    if (!data) {\n      return null;\n    }\n    return this.formatter(t, options).doExport(data);\n  }\n\n  /** Exports Blob */\n  async exportBlob(options: ExportFormat = {}, t: ExportTypes = ExportTypes.csv) {\n    return await this.getBlob(this.formatter(t, options));\n  }\n\n  /** Export file */\n  async exportFile(options: ExportFormat = {}, t: ExportTypes = ExportTypes.csv) {\n    const formatter = this.formatter(t, options);\n\n    // url\n    const URL = window.URL || window.webkitURL;\n\n    const a = document.createElement('a');\n    const { filename, fileKind } = formatter.options;\n    const name = `${filename}.${fileKind}`;\n\n    const blob = await this.getBlob(formatter);\n    const url = blob ? URL.createObjectURL(blob) : '';\n\n    a.style.display = 'none';\n    a.setAttribute('href', url);\n    a.setAttribute('download', name);\n    this.revogrid.appendChild(a);\n    a.dispatchEvent(new MouseEvent('click'));\n    this.revogrid.removeChild(a);\n\n    // delay for revoke, correct for some browsers\n    await timeout(120);\n    URL.revokeObjectURL(url);\n  }\n\n  /** Blob object */\n  async getBlob(formatter: Formatter) {\n    const type = `${formatter.options.mime};charset=${formatter.options.encoding}`;\n    if (typeof Blob !== 'undefined') {\n      const data = await this.beforeexport();\n      if (!data) {\n        return null;\n      }\n      return new Blob([formatter.doExport(data)], { type });\n    }\n    return null;\n  }\n\n  // before event\n  private async beforeexport() {\n    let data = await this.getData();\n    const event: CustomEvent<{ data: DataInput }> = this.emit('beforeexport', { data });\n    if (event.defaultPrevented) {\n      return null;\n    }\n    return event.detail.data;\n  }\n\n  private async getData(): Promise<DataInput> {\n    const data = await this.getSource();\n    const colSource: ColSource[] = [];\n    const colPromises: Promise<ColSource>[] = [];\n    columnTypes.forEach((t, i) => {\n      colPromises.push(this.getColPerSource(t).then(s => (colSource[i] = s)));\n    });\n    await Promise.all(colPromises);\n    const columns: ColSource = {\n      headers: [],\n      props: [],\n    };\n    for (let source of colSource) {\n      source.headers.forEach((h, i) => {\n        if (!columns.headers[i]) {\n          columns.headers[i] = [];\n        }\n        columns.headers[i].push(...h);\n      });\n      columns.props.push(...source.props);\n    }\n    return {\n      data,\n      ...columns,\n    };\n  }\n\n  private async getColPerSource(t: DimensionCols) {\n    const store = await this.revogrid.getColumnStore(t);\n    const source = store.get('source');\n    const virtualIndexes = store.get('items');\n    const depth = store.get('groupingDepth');\n    const groups = store.get('groups');\n    const colNames: string[] = [];\n    const colProps: ColumnProp[] = [];\n    virtualIndexes.forEach((v: number) => {\n      const prop = source[v].prop;\n      colNames.push(source[v].name || '');\n      colProps.push(prop);\n    });\n    const rows: string[][] = this.getGroupHeaders(depth, groups, virtualIndexes);\n    rows.push(colNames);\n    return {\n      headers: rows,\n      props: colProps,\n    };\n  }\n\n  private getGroupHeaders(depth: number, groups: Groups, items: number[]) {\n    const rows: string[][] = [];\n    const template = fill(new Array(items.length), '');\n    for (let d = 0; d < depth; d++) {\n      const rgRow = [...template];\n      rows.push(rgRow);\n      if (!groups[d]) {\n        continue;\n      }\n      const levelGroups = groups[d];\n\n      // add names of groups\n      levelGroups.forEach((group: Group) => {\n        const minIndex = group.indexes[0];\n        if (typeof minIndex === 'number') {\n          rgRow[minIndex] = group.name;\n        }\n      });\n    }\n    return rows;\n  }\n\n  private async getSource() {\n    const data: DataType[][] = [];\n    const promisesData: Promise<number>[] = [];\n    rowTypes.forEach(t => {\n      const dataPart: DataType[] = [];\n      data.push(dataPart);\n      const promise = this.revogrid.getVisibleSource(t).then((d: DataType[]) => dataPart.push(...d));\n      promisesData.push(promise);\n    });\n    await Promise.all(promisesData);\n    return data.reduce((r, v) => {\n      r.push(...v);\n      return r;\n    }, []);\n  }\n\n  // get correct class for future multiple types support\n  private formatter(type: ExportTypes, options: ExportFormat = {}) {\n    switch (type) {\n      case ExportTypes.csv:\n        return new ExportCsv(options);\n      default:\n        throw new Error('Unknown format');\n    }\n  }\n}\n"]}