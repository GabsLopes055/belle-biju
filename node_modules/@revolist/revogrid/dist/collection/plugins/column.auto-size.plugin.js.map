{"version":3,"file":"column.auto-size.plugin.js","sourceRoot":"","sources":["../../src/plugins/column.auto-size.plugin.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Plugin module for revo-grid grid system\n * Add support for automatic column resize\n */\nimport each from 'lodash/each';\nimport reduce from 'lodash/reduce';\n\nimport { BasePlugin } from './base.plugin';\nimport { getSourceItem, columnTypes } from '@store';\nimport type {\n  DimensionCols,\n  DimensionRows,\n  ColumnRegular,\n  DataType,\n  InitialHeaderClick,\n  ViewSettingSizeProp,\n  BeforeSaveDataDetails,\n  BeforeRangeSaveDataDetails,\n  PluginProviders,\n} from '@type';\nimport { ColumnCollection, getColumnType } from '../utils/column.utils';\n\ninterface Column extends ColumnRegular {\n  index: number;\n}\n\ntype AutoSizeColumns = Record<DimensionCols, ColumnRecords>;\ntype ColumnRecords = Record<any, Column>;\ntype SourceSetEvent = { type: DimensionRows; source: DataType[] };\ntype EditEvent = BeforeSaveDataDetails | BeforeRangeSaveDataDetails;\ntype Resolve = (cols: Partial<AutoSizeColumns>) => void;\ntype Reject = () => void;\n\nexport type AutoSizeColumnConfig = {\n  // ui behavior mode\n  mode?: ColumnAutoSizeMode;\n  /**\n   * autoSize for all columns\n   * if allColumnes true all columns treated as autoSize, worse for performance\n   * false by default\n   */\n  allColumns?: boolean;\n  /**\n   * assumption per characted size\n   * by default defined as 8, can be changed in this config\n   */\n  letterBlockSize?: number;\n  /** make size calculation exact\n   * by default it based on assumption each character takes some space defined in letterBlockSize */\n  preciseSize?: boolean;\n};\n\nconst LETTER_BLOCK_SIZE = 7;\n\nexport const enum ColumnAutoSizeMode {\n  // increases column width on header click according the largest text value\n  headerClickAutosize = 'headerClickAutoSize',\n  // increases column width on data set and text edit, decreases performance\n  autoSizeOnTextOverlap = 'autoSizeOnTextOverlap',\n  // increases and decreases column width based on all items sizes, worst for performance\n  autoSizeAll = 'autoSizeAll',\n}\n\nexport class AutoSizeColumnPlugin extends BasePlugin {\n  autoSizeColumns: Partial<AutoSizeColumns> | null = null;\n  readonly letterBlockSize: number;\n\n  /** for config option when preciseSize enabled */\n  readonly precsizeCalculationArea: HTMLElement;\n\n  /** for edge case when no columns defined before data */\n  dataResolve: Resolve | null = null;\n  dataReject: Reject | null = null;\n\n  constructor(\n    revogrid: HTMLRevoGridElement,\n    public providers: PluginProviders,\n    public config?: AutoSizeColumnConfig,\n  ) {\n    super(revogrid, providers);\n    this.letterBlockSize = config?.letterBlockSize || LETTER_BLOCK_SIZE;\n\n    // create test container to check text width\n    if (config?.preciseSize) {\n      this.precsizeCalculationArea = this.initiatePresizeElement();\n      revogrid.appendChild(this.precsizeCalculationArea);\n    }\n\n    const aftersourceset = ({\n      detail: { source },\n    }: CustomEvent<SourceSetEvent>) => {\n      this.setSource(source);\n    };\n    const beforecolumnsset = ({\n      detail: { columns },\n    }: CustomEvent<ColumnCollection>) => {\n      this.columnSet(columns);\n    };\n    this.addEventListener('beforecolumnsset', beforecolumnsset);\n    switch (config?.mode) {\n      case ColumnAutoSizeMode.autoSizeOnTextOverlap:\n        this.addEventListener('aftersourceset', aftersourceset);\n        this.addEventListener('afteredit',  ({ detail }: CustomEvent<EditEvent>) => {\n          this.afteredit(detail);\n        });\n        break;\n      case ColumnAutoSizeMode.autoSizeAll:\n        this.addEventListener('aftersourceset', aftersourceset);\n        this.addEventListener('afteredit', ({ detail }) => {\n          this.afterEditAll(detail);\n        });\n        break;\n      default:\n        this.addEventListener('headerdblclick', ({ detail }: CustomEvent<InitialHeaderClick>) => {\n          const type = getColumnType(detail.column);\n          const size = this.getColumnSize(detail.index, type);\n          if (size) {\n            this.providers.dimension.setCustomSizes(\n              type,\n              {\n                [detail.index]: size,\n              },\n              true,\n            );\n          }\n        });\n        break;\n    }\n  }\n\n  async setSource(source: DataType[]): Promise<void> {\n    let autoSize = this.autoSizeColumns;\n    if (this.dataReject) {\n      this.dataReject();\n      this.clearPromise();\n    }\n\n    /** If data set first and no column provided await until get one */\n    if (!autoSize) {\n      const request = new Promise((resolve: Resolve, reject: Reject) => {\n        this.dataResolve = resolve;\n        this.dataReject = reject;\n      });\n      try {\n        autoSize = await request;\n      } catch (e) {\n        return;\n      }\n    }\n\n    // calculate sizes\n    each(autoSize, (_v, type: DimensionCols) => {\n      const sizes: ViewSettingSizeProp = {};\n      each(autoSize[type], rgCol => {\n        // calculate size\n        rgCol.size = sizes[rgCol.index] = source.reduce(\n          (prev, rgRow) => Math.max(prev, this.getLength(rgRow[rgCol.prop])),\n          this.getLength(rgCol.name || ''),\n        );\n      });\n      this.providers.dimension.setCustomSizes(type, sizes, true);\n    });\n  }\n\n  getLength(len?: any): number {\n    const padding = 15;\n    if (!len) {\n      return 0;\n    }\n    try {\n      const str = len.toString();\n\n      /**if exact calculation required proxy with html element, slow operation */\n      if (this.config?.preciseSize) {\n        this.precsizeCalculationArea.innerText = str;\n        return this.precsizeCalculationArea.scrollWidth + padding * 2;\n      }\n      return str.length * this.letterBlockSize + padding * 2;\n    } catch (e) {\n      return 0;\n    }\n  }\n\n  afteredit(e: EditEvent) {\n    let data: Record<string, DataType>;\n    if (this.isRangeEdit(e)) {\n      data = e.data;\n    } else {\n      data = { 0: { [e.prop]: e.val } };\n    }\n    each(this.autoSizeColumns, (columns, type: DimensionCols) => {\n      const sizes: ViewSettingSizeProp = {};\n\n      each(columns, rgCol => {\n        // calculate size\n        const size = reduce(\n          data,\n          (prev: number | undefined, rgRow) => {\n            if (typeof rgRow[rgCol.prop] === 'undefined') {\n              return prev;\n            }\n            return Math.max(prev || 0, this.getLength(rgRow[rgCol.prop]));\n          },\n          undefined,\n        );\n\n        if (size && (rgCol.size ?? 0) < size) {\n          rgCol.size = sizes[rgCol.index] = size;\n        }\n      });\n\n      this.providers.dimension.setCustomSizes(type, sizes, true);\n    });\n  }\n\n  afterEditAll(e: EditEvent) {\n    const props: Record<any, true> = {};\n    if (this.isRangeEdit(e)) {\n      each(e.data, r => each(r, (_v, p) => (props[p] = true)));\n    } else {\n      props[e.prop] = true;\n    }\n    each(this.autoSizeColumns, (columns, type: DimensionCols) => {\n      const sizes: ViewSettingSizeProp = {};\n\n      each(columns, rgCol => {\n        if (props[rgCol.prop]) {\n          const size = this.getColumnSize(rgCol.index, type);\n          if (size) {\n            sizes[rgCol.index] = size;\n          }\n        }\n      });\n      this.providers.dimension.setCustomSizes(type, sizes, true);\n    });\n  }\n\n  getColumnSize(index: number, type: DimensionCols): number {\n    const rgCol = this.autoSizeColumns?.[type]?.[index];\n    if (!rgCol) {\n      return 0;\n    }\n    return reduce(\n      this.providers.data.stores,\n      (r, s) => {\n        const perStore = reduce(\n          s.store.get('items'),\n          (prev, _row, i) => {\n            const item = getSourceItem(s.store, i);\n            return Math.max(prev || 0, this.getLength(item?.[rgCol.prop]));\n          },\n          0,\n        );\n        return Math.max(r, perStore);\n      },\n      rgCol.size || 0,\n    );\n  }\n\n  columnSet(columns: Record<DimensionCols, ColumnRegular[]>) {\n    for (let t of columnTypes) {\n      const type = t as DimensionCols;\n      const cols = columns[type];\n\n      for (let i in cols) {\n        if (cols[i].autoSize || this.config?.allColumns) {\n          if (!this.autoSizeColumns) {\n            this.autoSizeColumns = {};\n          }\n          if (!this.autoSizeColumns[type]) {\n            this.autoSizeColumns[type] = {};\n          }\n          this.autoSizeColumns[type][i] = {\n            ...cols[i],\n            index: parseInt(i, 10),\n          };\n        }\n      }\n    }\n\n    if (this.dataResolve) {\n      this.dataResolve(this.autoSizeColumns || {});\n      this.clearPromise();\n    }\n  }\n\n  clearPromise() {\n    this.dataResolve = null;\n    this.dataReject = null;\n  }\n\n  isRangeEdit(e: EditEvent): e is BeforeRangeSaveDataDetails {\n    return !!(e as BeforeRangeSaveDataDetails).data;\n  }\n\n  initiatePresizeElement(): HTMLElement {\n    const styleForFontTest: Partial<CSSStyleDeclaration> = {\n      position: 'absolute',\n      fontSize: '14px',\n      height: '0',\n      width: '0',\n      whiteSpace: 'nowrap',\n      top: '0',\n      overflowX: 'scroll',\n      display: 'block',\n    };\n\n    const el = document.createElement('div');\n    for (let s in styleForFontTest) {\n      el.style[s] = styleForFontTest[s] ?? '';\n    }\n    el.classList.add('revo-test-container');\n    return el;\n  }\n\n  destroy() {\n    super.destroy();\n    this.precsizeCalculationArea?.remove();\n  }\n}\n"]}