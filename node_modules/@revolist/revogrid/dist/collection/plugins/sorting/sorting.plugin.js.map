{"version":3,"file":"sorting.plugin.js","sourceRoot":"","sources":["../../../src/plugins/sorting/sorting.plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import size from 'lodash/size';\nimport debounce from 'lodash/debounce';\n\nimport { BasePlugin } from '../base.plugin';\nimport type {\n  Order,\n  ColumnRegular,\n  DimensionRows,\n  PluginProviders,\n} from '@type';\nimport type { SortingConfig, SortingOrder, SortingOrderFunction } from './sorting.types';\nimport { getColumnByProp } from '../../utils/column.utils';\nimport { columnTypes, rowTypes } from '@store';\nimport { getComparer, getNextOrder, sortIndexByItems } from './sorting.func';\n\nexport * from './sorting.types';\nexport * from './sorting.func';\nexport * from './sorting.sign';\n\n/**\n * Lifecycle\n * 1. @event `beforesorting` - Triggered when sorting just starts. Nothing has happened yet. This can be triggered from a column or from the source. If the type is from rows, the column will be undefined.\n * 2. @event `beforesourcesortingapply` - Triggered before the sorting data is applied to the data source. You can prevent this event, and the data will not be sorted.\n * 3. @event `beforesortingapply` - Triggered before the sorting data is applied to the data source. You can prevent this event, and the data will not be sorted. This event is only called from a column sorting click.\n * 4. @event `aftersortingapply` - Triggered after sorting has been applied and completed. This event occurs for both row and column sorting.\n *\n * Note: If you prevent an event, it will not proceed to the subsequent steps.\n */\n\nexport class SortingPlugin extends BasePlugin {\n  // Current sorting order per column prop\n  sorting?: SortingOrder;\n\n  // Each column sorting function, multiple columns sorting supported\n  sortingFunc?: SortingOrderFunction;\n  /**\n   * Delayed sorting promise\n   */\n  sortingPromise: (() => void) | null = null;\n\n  /**\n   * We need to sort only so often\n   */\n  postponeSort = debounce(\n    (order?: SortingOrder, comparison?: SortingOrderFunction, ignoreViewportUpdate?: boolean) =>\n      this.runSorting(order, comparison, ignoreViewportUpdate),\n    50,\n  );\n\n  constructor(\n    public revogrid: HTMLRevoGridElement,\n    providers: PluginProviders,\n    config?: SortingConfig,\n  ) {\n    super(revogrid, providers);\n\n    const setConfig = (cfg?: SortingConfig) => {\n      if (cfg) {\n        const sortingFunc: SortingOrderFunction = {};\n        const order: SortingOrder = {};\n        cfg.columns?.forEach(col => {\n          sortingFunc[col.prop] = getComparer(col, col.order);\n          order[col.prop] = col.order;\n        });\n\n        if (cfg.additive) {\n          this.sorting = {\n            ...this.sorting,\n            ...order,\n          };\n          this.sortingFunc = {\n            ...this.sortingFunc,\n            ...sortingFunc,\n          };\n        } else {\n          // // set sorting\n          this.sorting = order;\n          this.sortingFunc = sortingFunc;\n        }\n      }\n    }\n\n    setConfig(config);\n\n    this.addEventListener('sortingconfigchanged', ({ detail }) => {\n      config = detail;\n      setConfig(detail);\n      this.startSorting(this.sorting, this.sortingFunc);\n    });\n\n    this.addEventListener('beforeheaderrender', ({\n      detail,\n    }) => {\n      const { data: column } = detail;\n      if (column.sortable) {\n        detail.data = {\n          ...column,\n          order: this.sorting?.[column.prop],\n        };\n      }\n    });\n\n    this.addEventListener('beforeanysource', ({\n      detail: { type },\n    }) => {\n      // if sorting was provided - sort data\n      if (!!this.sorting && this.sortingFunc) {\n        const event = this.emit('beforesourcesortingapply', { type, sorting: this.sorting });\n        if (event.defaultPrevented) {\n          return;\n        }\n        this.startSorting(this.sorting, this.sortingFunc);\n      }\n    });\n    this.addEventListener('aftercolumnsset', ({\n      detail: { order },\n    }) => {\n      // if config provided - do nothing, read from config\n      if (config) {\n        return;\n      }\n\n      const columns = this.providers.column.getColumns();\n      const sortingFunc: SortingOrderFunction = {};\n\n      for (let prop in order) {\n        const cmp = getComparer(\n          getColumnByProp(columns, prop),\n          order[prop],\n        );\n        sortingFunc[prop] = cmp;\n      }\n\n      // set sorting\n      this.sorting = order;\n      this.sortingFunc = order && sortingFunc;\n    });\n    this.addEventListener('beforeheaderclick', (e) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      if (!e.detail?.column?.sortable) {\n        return;\n      }\n\n      this.headerclick(\n        e.detail.column,\n        e.detail?.originalEvent?.shiftKey,\n      );\n    });\n  }\n\n  /**\n   * Entry point for sorting, waits for all delayes, registers jobs\n   */\n  startSorting(order?: SortingOrder, sortingFunc?: SortingOrderFunction, ignoreViewportUpdate?: boolean) {\n    if (!this.sortingPromise) {\n      // add job before render\n      this.revogrid.jobsBeforeRender.push(\n        new Promise<void>(resolve => {\n          this.sortingPromise = resolve;\n        }),\n      );\n    }\n    this.postponeSort(order, sortingFunc, ignoreViewportUpdate);\n  }\n\n\n  /**\n   * Apply sorting to data on header click\n   * If additive - add to existing sorting, multiple columns can be sorted\n   */\n  headerclick(column: ColumnRegular, additive: boolean) {\n    const columnProp = column.prop;\n    let order: Order = getNextOrder(this.sorting?.[columnProp]);\n    const beforeEvent = this.emit('beforesorting', { column, order, additive });\n    if (beforeEvent.defaultPrevented) {\n      return;\n    }\n    order = beforeEvent.detail.order;\n\n    // apply sort data\n    const beforeApplyEvent = this.emit('beforesortingapply', {\n      column: beforeEvent.detail.column,\n      order,\n      additive,\n    });\n    if (beforeApplyEvent.defaultPrevented) {\n      return;\n    }\n    const cmp = getComparer(beforeApplyEvent.detail.column, beforeApplyEvent.detail.order);\n\n    if (beforeApplyEvent.detail.additive && this.sorting) {\n      const sorting: SortingOrder = {};\n      const sortingFunc: SortingOrderFunction = {};\n\n      this.sorting = {\n        ...this.sorting,\n        ...sorting,\n      };\n      // extend sorting function with new sorting for multiple columns sorting\n      this.sortingFunc = {\n        ...this.sortingFunc,\n        ...sortingFunc,\n      };\n\n      if (columnProp in sorting && size(sorting) > 1 && order === undefined) {\n        delete sorting[columnProp];\n        delete sortingFunc[columnProp];\n      } else {\n        sorting[columnProp] = order;\n        sortingFunc[columnProp] = cmp;\n      }\n    } else {\n      if (order) {\n        // reset sorting\n        this.sorting = { [columnProp]: order };\n        this.sortingFunc = { [columnProp]: cmp };\n      } else {\n        delete this.sorting?.[columnProp];\n        delete this.sortingFunc?.[columnProp];\n      }\n    }\n\n    this.startSorting(this.sorting, this.sortingFunc);\n  }\n\n  runSorting(\n    order?: SortingOrder,\n    comparison?: SortingOrderFunction,\n    ignoreViewportUpdate?: boolean\n  ) {\n    this.sort(order, comparison, undefined, ignoreViewportUpdate);\n    this.sortingPromise?.();\n    this.sortingPromise = null;\n  }\n\n  /**\n   * Sort items by sorting function\n   * @requires proxyItems applied to row store\n   * @requires source applied to row store\n   *\n   * @param sorting - per column sorting\n   * @param data - this.stores['rgRow'].store.get('source')\n   */\n  sort(\n    sorting?: SortingOrder,\n    sortingFunc?: SortingOrderFunction,\n    types: DimensionRows[] = rowTypes,\n    ignoreViewportUpdate = false\n  ) {\n    // if no sorting - reset\n    if (!Object.keys(sorting || {}).length) {\n      for (let type of types) {\n        const storeService = this.providers.data.stores[type];\n        // row data\n        const source = storeService.store.get('source');\n        // row indexes\n        const proxyItems = storeService.store.get('proxyItems');\n        // row indexes\n        const newItemsOrder = Array.from({ length: source.length }, (_, i) => i); // recover indexes range(0, source.length)\n        this.providers.dimension.updateSizesPositionByNewDataIndexes(type, newItemsOrder, proxyItems);\n        storeService.setData({ proxyItems: newItemsOrder, source: [...source], });\n      }\n    } else {\n      for (let type of types) {\n        const storeService = this.providers.data.stores[type];\n        // row data\n        const source = storeService.store.get('source');\n        // row indexes\n        const proxyItems = storeService.store.get('proxyItems');\n\n        const newItemsOrder = sortIndexByItems(\n          [...proxyItems],\n          source,\n          sortingFunc,\n        );\n       \n        // take row indexes before trim applied and proxy items\n        const prevItems = storeService.store.get('items');\n        storeService.setData({\n          proxyItems: newItemsOrder,\n          source: [...source],\n        });\n        // take currently visible row indexes\n        const newItems = storeService.store.get('items');\n        if (!ignoreViewportUpdate) {\n          this.providers.dimension\n            .updateSizesPositionByNewDataIndexes(type, newItems, prevItems);\n        }\n      }\n    }\n    // refresh columns to redraw column headers and show correct icon\n    columnTypes.forEach((type) => {\n      this.providers.column.dataSources[type].refresh();\n    });\n    this.emit('aftersortingapply');\n  }\n}\n\n\n"]}