{"version":3,"file":"grouping.row.types.js","sourceRoot":"","sources":["../../../src/plugins/groupingRow/grouping.row.types.ts"],"names":[],"mappings":"","sourcesContent":["import type { VNode } from '@stencil/core';\nimport type {\n  HyperFunc,\n  ColumnProp,\n  DimensionRows,\n  DataType,\n  Providers,\n  VirtualPositionItem,\n  PositionItem,\n  DimensionCols,\n} from '@type';\nimport type { RowProps } from '../../components/data/row-renderer';\nimport { GROUP_EXPAND_EVENT } from './grouping.const';\n\n/**\n * Properties for the grouping row template\n */\ninterface GroupTemplateProp {\n  /**\n   * Name of the grouping row\n   */\n  name: string;\n  /**\n   * Index of the grouping row\n   */\n  itemIndex: number;\n  /**\n   * Expanded state of the grouping row\n   */\n  expanded: boolean;\n  /**\n   * Depth of the grouping row\n   */\n  depth: number;\n  /**\n   * Providers for the grid\n   */\n  providers: Providers;\n  /**\n   * Dimension type (e.g. rgCol, colPinStart, colPinEnd, rowHeaders)\n   */\n  colType: DimensionCols | 'rowHeaders';\n  /**\n   * Model of the grouping row\n   */\n  model?: DataType;\n}\n\nexport type RowGroupingProps = GroupRowPros & PositionItem & {\n  /**\n   * Visible columns in the grid, can be used to get the width of the column and position of the column\n   * to calculate the position of the cells in the grouping row\n   */\n  columnItems: VirtualPositionItem[];\n};\nexport interface GroupRowPros extends RowProps {\n  model: DataType;\n  hasExpand: boolean;\n  providers: Providers;\n  groupingCustomRenderer?: GroupLabelTemplateFunc | null;\n}\n\nexport type GroupLabelTemplateFunc = (\n  createElement: HyperFunc<VNode>,\n  props: GroupTemplateProp & RowGroupingProps,\n  ...args: any[]\n) => any;\n\nexport type GroupingOptions = {\n  /**\n   * Column props to which grouping will be applied\n   */\n  props?: ColumnProp[];\n\n  /**\n   * Should grouping be preserved on source update.\n   * default: true\n   */\n  preserveGroupingOnUpdate?: boolean;\n  /**\n   * Custom group label template\n   */\n  groupLabelTemplate?: GroupLabelTemplateFunc;\n} & ExpandedOptions;\n\nexport type BeforeSourceSetEvent = {\n  type: DimensionRows;\n  source: DataType[];\n};\n\nexport type OnExpandEvent = {\n  model: DataType;\n  virtualIndex: number;\n};\n\nexport type ExpandedOptions = {\n  /**\n   * Currently expanded items. to set expanded: '{ 'a': true, 'a,b': true, 'a,b,c': true }'\n   */\n  prevExpanded?: Record<string, boolean>;\n\n  /**\n   * Is expanded by default\n   */\n  expandedAll?: boolean;\n\n  /**\n   * Custom group label value parser\n   */\n  getGroupValue?(item: DataType, prop: string | number): any;\n  /**\n   * Custom group label template\n   */\n  groupLabelTemplate?: GroupLabelTemplateFunc;\n};\n\ndeclare global {\n  /**\n   * grid.addEventListener(GROUP_EXPAND_EVENT, (e: OnExpandEvent) => {\n   *  console.log(e)\n   * })\n   */\n  interface HTMLRevoGridElementEventMap {\n    [GROUP_EXPAND_EVENT]: OnExpandEvent;\n  }\n}"]}