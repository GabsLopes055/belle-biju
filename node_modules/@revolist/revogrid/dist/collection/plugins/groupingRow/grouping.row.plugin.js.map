{"version":3,"file":"grouping.row.plugin.js","sourceRoot":"","sources":["../../../src/plugins/groupingRow/grouping.row.plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getPhysical,\n  setItems,\n  columnTypes,\n  type TrimmedEntity,\n  type DSourceState,\n} from '@store';\nimport type {\n  BeforeSaveDataDetails,\n  ColumnRegular,\n  DataType,\n  DimensionRows,\n  PluginProviders,\n} from '@type';\n\nimport { BasePlugin } from '../base.plugin';\nimport { FILTER_TRIMMED_TYPE } from '../filter/filter.plugin';\n\nimport type { Observable, ColumnCollection } from '../../utils';\nimport { SortingPlugin } from '../sorting/sorting.plugin';\n\nimport {\n  GROUP_EXPAND_EVENT,\n  GROUPING_ROW_TYPE,\n  PSEUDO_GROUP_COLUMN,\n} from './grouping.const';\nimport { doExpand, doCollapse } from './grouping.row.expand.service';\nimport type {\n  BeforeSourceSetEvent,\n  ExpandedOptions,\n  GroupingOptions,\n  OnExpandEvent,\n} from './grouping.row.types';\nimport {\n  gatherGrouping,\n  getExpanded,\n  getSource,\n  isGrouping,\n  isGroupingColumn,\n} from './grouping.service';\nimport {\n  processDoubleConversionTrimmed,\n  TRIMMED_GROUPING,\n} from './grouping.trimmed.service';\n\nexport * from './grouping.const';\nexport * from './grouping.row.expand.service';\nexport * from './grouping.row.types';\nexport * from './grouping.service';\nexport * from './grouping.row.renderer';\n\nexport class GroupingRowPlugin extends BasePlugin {\n  private options: GroupingOptions | undefined;\n\n  getStore(\n    type: DimensionRows = GROUPING_ROW_TYPE,\n  ): Observable<DSourceState<DataType, DimensionRows>> {\n    return this.providers.data.stores[type].store;\n  }\n\n  constructor(\n    revogrid: HTMLRevoGridElement,\n    providers: PluginProviders,\n  ) {\n    super(revogrid, providers);\n  }\n\n  // befoce cell focus\n  private onFocus(e: CustomEvent<BeforeSaveDataDetails>) {\n    if (isGrouping(e.detail.model)) {\n      e.preventDefault();\n    }\n  }\n\n  // expand event triggered\n  private onExpand({ virtualIndex }: OnExpandEvent) {\n    const { source } = getSource(\n      this.getStore().get('source'),\n      this.getStore().get('proxyItems'),\n    );\n    let newTrimmed = this.getStore().get('trimmed')[TRIMMED_GROUPING];\n\n    let i = getPhysical(this.getStore(), virtualIndex);\n    const isExpanded = getExpanded(source[i]);\n    if (!isExpanded) {\n      const { trimmed, items } = doExpand(\n        virtualIndex,\n        source,\n        this.getStore().get('items'),\n      );\n      newTrimmed = { ...newTrimmed, ...trimmed };\n      if (items) {\n        setItems(this.getStore(), items);\n      }\n    } else {\n      const { trimmed } = doCollapse(i, source);\n      newTrimmed = { ...newTrimmed, ...trimmed };\n      this.revogrid.clearFocus();\n    }\n\n    this.getStore().set('source', source);\n    this.revogrid.addTrimmed(newTrimmed, TRIMMED_GROUPING);\n  }\n\n  private setColumnGrouping(cols?: ColumnRegular[]) {\n    // if 0 column as holder\n    if (cols?.length) {\n      cols[0][PSEUDO_GROUP_COLUMN] = true;\n      return true;\n    }\n    return false;\n  }\n\n  private setColumns({ columns }: ColumnCollection) {\n    for (let type of columnTypes) {\n      if (this.setColumnGrouping(columns[type])) {\n        break;\n      }\n    }\n  }\n\n  // evaluate drag between groups\n  private onDrag(e: CustomEvent<{ from: number; to: number }>) {\n    const { from, to } = e.detail;\n    const isDown = to - from >= 0;\n    const { source } = getSource(\n      this.getStore().get('source'),\n      this.getStore().get('proxyItems'),\n    );\n    const items = this.getStore().get('items');\n    let i = isDown ? from : to;\n    const end = isDown ? to : from;\n    for (; i < end; i++) {\n      const model = source[items[i]];\n      const isGroup = isGrouping(model);\n      if (isGroup) {\n        e.preventDefault();\n        return;\n      }\n    }\n  }\n\n  private beforeTrimmedApply(trimmed: Record<number, boolean>, type: string) {\n    /** Before filter apply remove grouping filtering */\n    if (type === FILTER_TRIMMED_TYPE) {\n      const source = this.getStore().get('source');\n      for (let index in trimmed) {\n        if (trimmed[index] && isGrouping(source[index])) {\n          trimmed[index] = false;\n        }\n      }\n    }\n  }\n\n  private isSortingRunning() {\n    const sortingPlugin = this.providers.plugins.getByClass(SortingPlugin);\n    return !!sortingPlugin?.sortingPromise;\n  }\n\n  /**\n   * Starts global source update with group clearing and applying new one\n   * Initiated when need to reapply grouping\n   */\n  private doSourceUpdate(options?: ExpandedOptions) {\n    /**\n     * Get source without grouping\n     * @param newOldIndexMap - provides us mapping with new indexes vs old indexes, we would use it for trimmed mapping\n     */\n    const store = this.getStore();\n    const { source, prevExpanded, oldNewIndexes } = getSource(\n      store.get('source'),\n      store.get('proxyItems'),\n      true,\n    );\n    const expanded: ExpandedOptions = {\n      prevExpanded,\n      ...options,\n    };\n    /**\n     * Group again\n     * @param oldNewIndexMap - provides us mapping with new indexes vs old indexes\n     */\n    const {\n      sourceWithGroups,\n      depth,\n      trimmed,\n      oldNewIndexMap,\n    } = gatherGrouping(source, this.options?.props || [], expanded);\n\n    const customRenderer = options?.groupLabelTemplate;\n\n    // setup source\n    this.providers.data.setData(\n      sourceWithGroups,\n      GROUPING_ROW_TYPE,\n      this.revogrid.disableVirtualY,\n      { depth, customRenderer },\n      true,\n    );\n    this.updateTrimmed(\n      trimmed,\n      oldNewIndexes ?? {},\n      oldNewIndexMap,\n    );\n  }\n\n  /**\n   * Apply grouping on data set\n   * Clear grouping from source\n   * If source came from other plugin\n   */\n  private onDataSet(data: BeforeSourceSetEvent) {\n    let preservedExpanded: ExpandedOptions['prevExpanded'] = {};\n    if (this.options?.preserveGroupingOnUpdate !== false) {\n      let { prevExpanded } = getSource(\n        this.getStore().get('source'),\n        this.getStore().get('proxyItems'),\n        true,\n      );\n      preservedExpanded = prevExpanded;\n    }\n    const source = data.source.filter(s => !isGrouping(s));\n    const options: ExpandedOptions = {\n      ...(this.revogrid.grouping || {}),\n      prevExpanded: preservedExpanded,\n    };\n    const {\n      sourceWithGroups,\n      depth,\n      trimmed,\n      oldNewIndexMap,\n    } = gatherGrouping(source, this.options?.props || [], options);\n    data.source = sourceWithGroups;\n    this.providers.data.setGrouping({ depth });\n    this.updateTrimmed(trimmed, oldNewIndexMap);\n  }\n\n  /**\n   * External call to apply grouping. Called by revogrid when prop changed.\n   */\n  setGrouping(options: GroupingOptions) {\n    // unsubscribe from all events when group applied\n    this.clearSubscriptions();\n    this.options = options;\n    // clear props, no grouping exists\n    if (!this.options?.props?.length) {\n      this.clearGrouping();\n      return;\n    }\n    // props exist and source initd\n    const store = this.getStore();\n    const { source } = getSource(\n      store.get('source'),\n      store.get('proxyItems'),\n    );\n    if (source.length) {\n      this.doSourceUpdate({ ...options });\n    }\n    // props exist and columns initd\n    for (let t of columnTypes) {\n      if (this.setColumnGrouping(this.providers.column.getColumns(t))) {\n        this.providers.column.refreshByType(t);\n        break;\n      }\n    }\n\n    // if has any grouping subscribe to events again\n    /** if grouping present and new data source arrived */\n    this.addEventListener('beforesourceset', ({ detail }) => {\n      if (!(this.options?.props?.length && detail?.source?.length)) {\n        return;\n      }\n      // if sorting is running don't apply grouping, wait for sorting, then it'll apply in @aftersortingapply\n      if (this.isSortingRunning()) {\n        return;\n      }\n      this.onDataSet(detail);\n    });\n    this.addEventListener('beforecolumnsset', ({ detail }) => {\n      this.setColumns(detail);\n    });\n\n    /**\n     * filter applied need to clear grouping and apply again\n     * based on new results can be new grouping\n     */\n    this.addEventListener(\n      'beforetrimmed',\n      ({ detail: { trimmed, trimmedType } }) =>\n        this.beforeTrimmedApply(trimmed, trimmedType),\n    );\n    /**\n     * sorting applied need to clear grouping and apply again\n     * based on new results whole grouping order will changed\n     */\n    this.addEventListener('aftersortingapply', () => {\n      if (!this.options?.props?.length) {\n        return;\n      }\n      this.doSourceUpdate({ ...this.options });\n    });\n\n    /**\n     * Apply logic for focus inside of grouping\n     * We can't focus on grouping rows, navigation only inside of groups for now\n     */\n    this.addEventListener('beforecellfocus', e => this.onFocus(e));\n    /**\n     * Prevent rgRow drag outside the group\n     */\n    this.addEventListener('roworderchanged', e => this.onDrag(e));\n\n    /**\n     * When grouping expand icon was clicked\n     */\n    this.addEventListener(GROUP_EXPAND_EVENT, e => this.onExpand(e.detail));\n  }\n\n  // clear grouping\n  clearGrouping() {\n    // clear columns\n    columnTypes.forEach(t => {\n      const cols = this.providers.column.getColumns(t);\n      let deleted = false;\n      cols.forEach(c => {\n        if (isGroupingColumn(c)) {\n          delete c[PSEUDO_GROUP_COLUMN];\n          deleted = true;\n        }\n      });\n      // if column store had grouping clear and refresh\n      if (deleted) {\n        this.providers.column.refreshByType(t);\n      }\n    });\n    // clear rows\n    const { source, oldNewIndexes } = getSource(\n      this.getStore().get('source'),\n      this.getStore().get('proxyItems'),\n      true,\n    );\n    this.providers.data.setData(\n      source,\n      GROUPING_ROW_TYPE,\n      this.revogrid.disableVirtualY,\n      undefined,\n      true,\n    );\n    this.updateTrimmed(undefined, undefined, oldNewIndexes);\n  }\n\n  private updateTrimmed(\n    trimmedGroup: TrimmedEntity = {},\n    firstLevelMap: Record<number, number> = {},\n    secondLevelMap?: Record<number, number>,\n  ) {\n    // map previously trimmed data\n    const trimemedOptionsToUpgrade = processDoubleConversionTrimmed(\n      this.getStore().get('trimmed'),\n      firstLevelMap,\n      secondLevelMap,\n    );\n    for (let type in trimemedOptionsToUpgrade) {\n      this.revogrid.addTrimmed(trimemedOptionsToUpgrade[type], type);\n    }\n\n    // const emptyGroups = this.filterOutEmptyGroups(trimemedOptionsToUpgrade, childrenByGroup);\n\n    // setup trimmed data for grouping\n    this.revogrid.addTrimmed({ ...trimmedGroup }, TRIMMED_GROUPING);\n  }\n}\n"]}