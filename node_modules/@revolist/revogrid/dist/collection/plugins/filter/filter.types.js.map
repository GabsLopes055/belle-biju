{"version":3,"file":"filter.types.js","sourceRoot":"","sources":["../../../src/plugins/filter/filter.types.ts"],"names":[],"mappings":"AAAA,kBAAkB;AA8DjB,CAAC;AAYD,CAAC;AA+ED,CAAC","sourcesContent":["// filter.types.ts\n\nimport type { ColumnProp, ColumnRegular, HyperFunc } from '@type';\nimport type { FilterType } from './filter.indexed';\nimport type { VNode } from '@stencil/core';\n\nexport type DateEnum =\n  | 'today'\n  | 'yesterday'\n  | 'tomorrow'\n  | 'thisweek'\n  | 'lastweek'\n  | 'nextweek'\n  | 'thismonth'\n  | 'lastmonth'\n  | 'nextmonth'\n  | 'thisyear'\n  | 'lastyear'\n  | 'nextyear';\n\nexport type ExtraField = 'input' | 'datepicker' | ((h: HyperFunc<VNode>, config: {\n  value: any;\n  filter: FilterItem;\n  prop: ColumnProp;\n  index: number;\n  placeholder: string;\n  onInput: (value: any) => void;\n  onFocus: () => void;\n}) => VNode | VNode[]);\n\nexport type LogicFunctionParam = any;\nexport type LogicFunctionExtraParam =\n  | 'select'\n  | 'input'\n  | 'multi'\n  | 'datepicker'\n  | number\n  | Date\n  | DateEnum\n  | null\n  | undefined\n  | string\n  | string[]\n  | number[];\nexport interface LogicFunction<T1 = LogicFunctionParam, T2 = LogicFunctionExtraParam> {\n  (value: T1, extra?: T2): boolean;\n  extra?: ExtraField;\n}\n\nexport interface CustomFilter<T1 = LogicFunctionParam, T2 = LogicFunctionExtraParam> {\n  /**\n   * Property defined in column { filter: string/number/abstract/enum...etc }\n   */\n  columnFilterType: string;\n  /**\n   * Filter name\n   */\n  name: string;\n  /**\n   * Function to apply the filter\n   */\n  func: LogicFunction<T1, T2>;\n};\n\nexport interface FilterCaptions {\n  title: string;\n  save: string;\n  reset: string;\n  ok: string;\n  cancel: string;\n  add: string;\n  placeholder: string;\n  and: string;\n  or: string;\n};\n\nexport interface FilterLocalization {\n  captions: Partial<FilterCaptions>;\n  filterNames: Record<FilterType, string>;\n}\n/**\n * Filter configuration for a column. This is the type of the `filter` property on a column.\n */\nexport interface ColumnFilterConfig {\n  /**\n   * The collection of filters to be applied to the column.\n   */\n  collection?: Record<ColumnProp, FilterCollectionItem>;\n  /**\n   * The names of the filters to be included in the filter dropdown.\n   */\n  include?: string[];\n  /**\n   * A mapping of custom filter names to custom filter functions.\n   */\n  customFilters?: Record<string, CustomFilter>;\n  /**\n   * The property on the column idintifying which has the filter is applied.\n   */\n  filterProp?: string;\n  /**\n   * The localization for the filter dropdown.\n   */\n  localization?: FilterLocalization;\n  /**\n   * Information about the multi-filter items.\n   */\n  multiFilterItems?: MultiFilterItem;\n  /**\n   * Whether or not to disable dynamic filtering. If set to true, the filter will only be applied\n   * when the user clicks on the filter button.\n   */\n  disableDynamicFiltering?: boolean;\n\n  /**\n   * Whether or not to close the filter panel when clicking outside\n   */\n  closeFilterPanelOnOutsideClick?: boolean;\n}\n\nexport type FilterCollectionItem = {\n  type: FilterType;\n  value?: any;\n};\n\n\nexport interface FilterItem {\n  // column id\n  prop?: ColumnProp;\n  // filter type definition\n  type?: FilterType;\n  // value for additional filtering, text value or some id\n  value?: any;\n}\n\nexport interface FilterData {\n  id: number;\n  /**\n   * Filter type\n   */\n  type: FilterType;\n  /**\n   * Filter value\n   */\n  value?: any;\n  /**\n   * Filter invisible in filter panel\n   */\n  hidden?: boolean;\n  /**\n   * Filter relation\n   */\n  relation?: 'and' | 'or';\n};\n\nexport interface MultiFilterItem {\n  [prop: string]: FilterData[];\n}\n\nexport interface ShowData extends FilterItem, Omit<ColumnRegular, 'filter'> {\n  x: number;\n  y: number;\n  /**\n   * Auto correct position if it is out of document bounds\n   */\n  autoCorrect?: boolean;\n  filterTypes?: Record<string, string[]>;\n  filterItems?: MultiFilterItem;\n  // hide default filters\n  hideDefaultFilters?: boolean;\n  // pass vnodes from plugins\n  extraContent?: (data: ShowData) => any;\n}\n"]}