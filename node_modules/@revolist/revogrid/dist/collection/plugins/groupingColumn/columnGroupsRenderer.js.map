{"version":3,"file":"columnGroupsRenderer.js","sourceRoot":"","sources":["../../../src/plugins/groupingColumn/columnGroupsRenderer.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAClC,OAAO,SAAS,MAAM,kBAAkB,CAAC;AACzC,OAAO,EAAS,cAAc,EAAE,MAAM,QAAQ,CAAC;AAE/C,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AAcxD,MAAM,oBAAoB,GAAG,CAAC,EAC5B,cAAc,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAC7D,EAA0B,EAAE;IAChE,uBAAuB;IACvB,MAAM,QAAQ,GAA2B,EAAE,CAAC;IAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;QAC/B,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;YACd,KAAK,IAAI,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC5B,4BAA4B;gBAC5B,yDAAyD;gBACzD,MAAM,oBAAoB,GAAuB,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,OAAO,YAAY,CAAC,EAAE,CAAC,KAAK,QAAQ,CAAC,CAAC;gBAClH,IAAI,oBAAoB,GAAG,CAAC,CAAC,EAAE,CAAC;oBAC9B,MAAM,eAAe,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,mBAAmB;oBAC1F,MAAM,eAAe,GAAG,eAAe,GAAG,oBAAoB,CAAC,CAAC,8BAA8B;oBAC9F,MAAM,aAAa,GAAG,eAAe,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,6BAA6B;oBAE3F,cAAc;oBACd,MAAM,UAAU,GAAG,cAAc,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC,KAAK,CAAC;oBACvE,MAAM,QAAQ,GAAG,cAAc,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,GAAG,CAAC;oBACjE,QAAQ,CAAC,IAAI,CACX,EAAC,mBAAmB,IAClB,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,UAAU,EACjB,GAAG,EAAE,QAAQ,EACb,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,MAAM,EACd,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,CAAC,CAAC,EAAE,WAAC,OAAA,QAAQ,CAAC,MAAA,CAAC,CAAC,QAAQ,mCAAI,CAAC,EAAE,eAAe,EAAE,aAAa,CAAC,CAAA,EAAA,EACxE,cAAc,EAAE,cAAc,GAC9B,CACH,CAAC;gBACJ,CAAC;YACH,CAAC;QACH,CAAC;QACD,QAAQ,CAAC,IAAI,CAAC,WAAK,KAAK,EAAE,GAAG,gBAAgB,QAAQ,GAAI,CAAC,CAAC;IAC7D,CAAC;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAEF,eAAe,oBAAoB,CAAC","sourcesContent":["import { h } from '@stencil/core';\nimport findIndex from 'lodash/findIndex';\nimport { Group, getItemByIndex } from '@store';\nimport { DimensionSettingsState, Providers, DimensionCols } from '@type';\nimport { HEADER_ROW_CLASS } from '../../utils/consts';\nimport GroupHeaderRenderer from './headerGroupRenderer';\nimport { ResizeProps } from '../../components/header/resizable.directive';\n\ntype Props<T> = {\n  visibleProps: { [prop: string]: number };\n  groups: Record<number, Group[]>;\n  dimensionCol: Pick<DimensionSettingsState, 'indexes' | 'originItemSize' | 'indexToItem'>;\n  depth: number;\n  canResize: boolean;\n  providers: Providers<T>;\n  additionalData: any;\n  onResize(changedX: number, startIndex: number, endIndex: number): void;\n} & Partial<Pick<ResizeProps, 'active'>>;\n\nconst ColumnGroupsRenderer = ({\n  additionalData, providers, depth, groups, visibleProps, dimensionCol, canResize, active, onResize\n}: Props<DimensionCols | 'rowHeaders'>): ReturnType<typeof h>[] => {\n  // render group columns\n  const groupRow: ReturnType<typeof h>[] = [];\n  for (let i = 0; i < depth; i++) {\n    if (groups[i]) {\n      for (let group of groups[i]) {\n        // if group in visible range\n        // find first visible group prop in visible columns range\n        const indexFirstVisibleCol: number | undefined = findIndex(group.ids, id => typeof visibleProps[id] === 'number');\n        if (indexFirstVisibleCol > -1) {\n          const colVisibleIndex = visibleProps[group.ids[indexFirstVisibleCol]]; // get column index\n          const groupStartIndex = colVisibleIndex - indexFirstVisibleCol; // first column index in group\n          const groupEndIndex = groupStartIndex + group.ids.length - 1; // last column index in group\n\n          // coordinates\n          const groupStart = getItemByIndex(dimensionCol, groupStartIndex).start;\n          const groupEnd = getItemByIndex(dimensionCol, groupEndIndex).end;\n          groupRow.push(\n            <GroupHeaderRenderer\n              providers={providers}\n              start={groupStart}\n              end={groupEnd}\n              group={group}\n              active={active}\n              canResize={canResize}\n              onResize={e => onResize(e.changedX ?? 0, groupStartIndex, groupEndIndex)}\n              additionalData={additionalData}\n            />,\n          );\n        }\n      }\n    }\n    groupRow.push(<div class={`${HEADER_ROW_CLASS} group`} />);\n  }\n  return groupRow;\n};\n\nexport default ColumnGroupsRenderer;\n"]}