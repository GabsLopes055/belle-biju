{"version":3,"file":"add-rows-on-paste.plugin.js","sourceRoot":"","sources":["../../src/plugins/add-rows-on-paste.plugin.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C;;;GAGG;AACH,MAAM,OAAO,iBAAkB,SAAQ,UAAU;IAC/C,YAAY,QAA6B,EAAE,SAA0B;QACnE,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC3B,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAC9C,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CACjC,CAAC;IACJ,CAAC;IAED,sBAAsB,CACpB,KAIE;QAEF,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC;QAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC;QAExD,IAAI,CAAC,KAAK,IAAI,SAAS,EAAE,CAAC;YACxB,OAAO;QACT,CAAC;QAED,MAAM,SAAS,GACb,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;QAE7D,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;QAEpD,IAAI,SAAS,GAAG,MAAM,EAAE,CAAC;YACvB,MAAM,KAAK,GAAG,MAAM,GAAG,SAAS,CAAC;YACjC,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBACvD,KAAK,EAAE,SAAS,GAAG,CAAC;gBACpB,IAAI,EAAE,EAAE;aACT,CAAC,CAAC,CAAC;YAEJ,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;YAEzD,IAAI,KAAK,CAAC,gBAAgB,EAAE,CAAC;gBAC3B,OAAO;YACT,CAAC;YAED,MAAM,KAAK,GAAG;gBACZ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC;gBACvD,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;aACzC,CAAC;YAEF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;CACF","sourcesContent":["import type { PluginProviders } from '../types/plugin.types';\nimport { BasePlugin } from './base.plugin';\n\n/**\n * Automatically adds new rows when pasted data is larger than current rows\n * @event newRows - is triggered when new rows are added. Data of new rows can be filled with default values. If the event is prevented, no rows will be added\n */\nexport class AutoAddRowsPlugin extends BasePlugin {\n  constructor(revogrid: HTMLRevoGridElement, providers: PluginProviders) {\n    super(revogrid, providers);\n    this.addEventListener('beforepasteapply', evt =>\n      this.handleBeforePasteApply(evt),\n    );\n  }\n\n  handleBeforePasteApply(\n    event: CustomEvent<{\n      raw: string;\n      parsed: string[][];\n      event: ClipboardEvent;\n    }>,\n  ) {\n    const start = this.providers.selection.focused;\n    const isEditing = this.providers.selection.edit != null;\n\n    if (!start || isEditing) {\n      return;\n    }\n\n    const rowLength =\n      this.providers.data.stores.rgRow.store.get('items').length;\n\n    const endRow = start.y + event.detail.parsed.length;\n\n    if (rowLength < endRow) {\n      const count = endRow - rowLength;\n      const newRows = Array.from({ length: count }, (_, i) => ({\n        index: rowLength + i,\n        data: {},\n      }));\n\n      const event = this.emit('newRows', { newRows: newRows });\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      const items = [\n        ...this.providers.data.stores.rgRow.store.get('source'),\n        ...event.detail.newRows.map(j => j.data),\n      ];\n\n      this.providers.data.setData(items);\n    }\n  }\n}\n"]}