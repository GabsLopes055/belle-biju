{"file":"viewport.helpers-7e7f9dad.js","mappings":";;;AAAA;;;AAMA;;;MAGa,WAAW,GAAG,SAAS;MACvB,WAAW,GAAG,SAAS;MACvB,YAAY,GAAG,UAAU;MACzB,SAAS,GAAG,OAAO;AAEhC;;;;;SAKgB,WAAW,CACzB,IAAoB,EACpB,OAA2B;;IAG3B,MAAM,sBAAsB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;;IAGnF,MAAM,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;;IAG3E,OAAO;QACL,CAAC,EAAE,sBAAsB;QACzB,CAAC,EAAE,mBAAmB;KACvB,CAAC;AACJ,CAAC;SAGe,qBAAqB,CACnC,IAAoB,EACpB,IAAmB,EACnB,IAAc,EACd,KAAe;IAEf,OAAO;QACL,OAAO,EAAE,IAAI,CAAC,QAAQ;QACtB,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK;QAC/C,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK;;QAEvC,QAAQ,EAAE,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC;QACjC,IAAI;QACJ,IAAI;QACJ,OAAO,EAAE,CAAC,KAAK;QACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;QACvB,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK;QACrC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK;QACjD,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK;QACzC,KAAK,EAAE,KAAK;cACR,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE;cAC9D,SAAS;KACd,CAAC;AACJ;;;;","names":[],"sources":["src/components/revoGrid/viewport.helpers.ts"],"sourcesContent":["/**\n * Collects data for pinned columns in the required @ViewportProps format.\n */\n\nimport { DimensionRows, MultiDimensionType, SlotType, Cell, ViewportColumn } from '@type';\n\n/**\n * Represents the slot names for the viewport slots.\n */\nexport const HEADER_SLOT = 'header'; // Slot name for the header slot\nexport const FOOTER_SLOT = 'footer'; // Slot name for the footer slot\nexport const CONTENT_SLOT = 'content'; // Slot name for the content slot\nexport const DATA_SLOT = 'data'; // Slot name for the data slot\n\n/**\n * Returns the last visible cell in the viewport for a given row type.\n * Coordinates are not zero-based and are relative to the viewport.\n * If needed to be zero-based they can be adjusted by subtracting 1.\n */\nexport function getLastCell(\n  data: ViewportColumn,\n  rowType: MultiDimensionType,\n): Cell {\n  // Get the last visible column count from the viewport column data.\n  const lastVisibleColumnCount = data.viewports[data.colType].store.get('realCount');\n\n  // Get the last visible row count for the given row type from the viewport column data.\n  const lastVisibleRowCount = data.viewports[rowType].store.get('realCount');\n\n  // Return the last visible cell with the last visible column count and row count.\n  return {\n    x: lastVisibleColumnCount,\n    y: lastVisibleRowCount,\n  };\n}\n\n\nexport function viewportDataPartition(\n  data: ViewportColumn,\n  type: DimensionRows,\n  slot: SlotType,\n  fixed?: boolean,\n) {\n  return {\n    colData: data.colStore,\n    viewportCol: data.viewports[data.colType].store,\n    viewportRow: data.viewports[type].store,\n    // lastCell is the last real coordinate + 1\n    lastCell: getLastCell(data, type),\n    slot,\n    type,\n    canDrag: !fixed,\n    position: data.position,\n    dataStore: data.rowStores[type].store,\n    dimensionCol: data.dimensions[data.colType].store,\n    dimensionRow: data.dimensions[type].store,\n    style: fixed\n      ? { height: `${data.dimensions[type].store.get('realSize')}px` }\n      : undefined,\n  };\n}\n\nexport type VPPartition = ReturnType<typeof viewportDataPartition>;"],"version":3}