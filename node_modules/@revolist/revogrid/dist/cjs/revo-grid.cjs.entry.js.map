{"file":"revo-grid.entry.cjs.js","mappings":"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","names":["columnTypes","DataStore","getSourceItem","reduce","getSourceItemVirtualIndexByProp","getColumnType","setSourceByPhysicalIndex","setSourceByVirtualIndex","rowTypes","isRowType","getVisibleSourceItem","debounce","RESIZE_INTERVAL","DimensionStore","gatherTrimmedItems","getColumnSizes","getItemByIndex","ViewportStore","HEADER_SLOT","CONTENT_SLOT","FOOTER_SLOT","EMPTY_INDEX","viewportDataPartition","h","BasePlugin","getColumnByProp","timeout","getPropertyFromEvent","getColumns","GroupingRowPlugin","StretchColumn","isStretchPlugin","AutoSizeColumnPlugin","FilterPlugin","ExportFilePlugin","SortingPlugin","ColumnMovePlugin","SelectionStoreConnector","DATA_SLOT","Host"],"sources":["src/themeManager/theme.compact.ts","src/themeManager/theme.default.ts","src/themeManager/theme.material.ts","src/themeManager/theme.service.ts","src/services/column.data.provider.ts","src/services/data.provider.ts","src/services/dimension.provider.ts","src/services/viewport.provider.ts","src/components/revoGrid/viewport.service.ts","src/components/revoGrid/viewport.scrolling.service.ts","src/components/order/order-renderer.tsx","src/components/revoGrid/grid.helpers.ts","src/utils/mobile.ts","src/plugins/wcag/index.ts","src/components/revoGrid/plugin.service.ts","src/components/revoGrid/revo-grid-style.scss?tag=revo-grid","src/components/revoGrid/revo-grid.tsx"],"sourcesContent":["import { ThemePackage } from '../types/theme';\n\nexport class ThemeCompact implements ThemePackage {\n  defaultRowSize = 32;\n}\n","import { ThemePackage } from '../types/theme';\n\nexport class ThemeDefault implements ThemePackage {\n  defaultRowSize = 27;\n}\n","import { ThemePackage } from '../types/theme';\n\nexport class ThemeMaterial implements ThemePackage {\n  defaultRowSize = 42;\n}\n","import type { Theme, ThemeConfig, ThemePackage } from '../types/theme';\nimport { ThemeCompact } from './theme.compact';\nimport { ThemeDefault } from './theme.default';\nimport { ThemeMaterial } from './theme.material';\n\nexport const DEFAULT_THEME = 'default';\n\nexport const allowedThemes: Theme[] = [\n  DEFAULT_THEME,\n  'material',\n  'compact',\n  'darkMaterial',\n  'darkCompact',\n];\nexport default class ThemeService {\n  private currentTheme: ThemePackage;\n  private customRowSize = 0;\n\n  get theme() {\n    return this.currentTheme;\n  }\n\n  get rowSize() {\n    return this.customRowSize || this.currentTheme.defaultRowSize;\n  }\n\n  set rowSize(size: number) {\n    this.customRowSize = size;\n  }\n\n  constructor(cfg: ThemeConfig) {\n    this.customRowSize = cfg.rowSize;\n    this.register('default');\n  }\n\n  register(theme: Theme) {\n    const parsedTheme = getTheme(theme);\n    switch (parsedTheme) {\n      case 'material':\n      case 'darkMaterial':\n        this.currentTheme = new ThemeMaterial();\n        break;\n      case 'compact':\n      case 'darkCompact':\n        this.currentTheme = new ThemeCompact();\n        break;\n      default:\n        this.currentTheme = new ThemeDefault();\n        break;\n    }\n  }\n}\n\n\nexport function getTheme(theme?: string | null): Theme {\n  if (theme && allowedThemes.indexOf(theme as Theme) > -1) {\n    return theme as Theme;\n  }\n  return DEFAULT_THEME;\n}","import reduce from 'lodash/reduce';\nimport {\n  columnTypes,\n  DataStore,\n  getSourceItem,\n  getSourceItemVirtualIndexByProp,\n  Groups,\n  setSourceByPhysicalIndex,\n  setSourceByVirtualIndex,\n} from '@store';\nimport type {\n  ColumnProp,\n  ColumnRegular,\n  DimensionCols,\n} from '@type';\nimport { ColumnCollection, getColumnType } from '../utils/column.utils';\n\nexport type ColumnDataSources = Record<\n  DimensionCols,\n  DataStore<ColumnRegular, DimensionCols>\n>;\n\nexport default class ColumnDataProvider {\n  readonly dataSources: ColumnDataSources;\n  collection: ColumnCollection | null = null;\n\n  get stores() {\n    return this.dataSources;\n  }\n  constructor() {\n    this.dataSources = columnTypes.reduce(\n      (sources: ColumnDataSources, k: DimensionCols) => {\n        sources[k] = new DataStore(k);\n        return sources;\n      },\n      {} as ColumnDataSources,\n    );\n  }\n\n  column(c: number, type: DimensionCols = 'rgCol'): ColumnRegular | undefined {\n    return this.getColumn(c, type);\n  }\n\n  getColumn(\n    virtualIndex: number,\n    type: DimensionCols,\n  ): ColumnRegular | undefined {\n    return getSourceItem(this.dataSources[type].store, virtualIndex);\n  }\n\n  getRawColumns(): Record<DimensionCols, ColumnRegular[]> {\n    return reduce(\n      this.dataSources,\n      (\n        result: Record<DimensionCols, ColumnRegular[]>,\n        item,\n        type: DimensionCols,\n      ) => {\n        result[type] = item.store.get('source');\n        return result;\n      },\n      {\n        rgCol: [],\n        colPinStart: [],\n        colPinEnd: [],\n      },\n    );\n  }\n\n  getColumns(type: DimensionCols | 'all' = 'all'): ColumnRegular[] {\n    const columnsByType = this.getRawColumns();\n    if (type !== 'all') {\n      return columnsByType[type];\n    }\n    return columnTypes.reduce((r: ColumnRegular[], t) => [...r, ...columnsByType[t]], []);\n  }\n\n  getColumnIndexByProp(prop: ColumnProp, type: DimensionCols): number {\n    return getSourceItemVirtualIndexByProp(this.dataSources[type].store, prop);\n  }\n\n  getColumnByProp(prop: ColumnProp) {\n    return this.collection?.columnByProp[prop];\n  }\n\n  refreshByType(type: DimensionCols) {\n    this.dataSources[type].refresh();\n  }\n\n  /**\n   * Main method to set columns\n   */\n  setColumns(data: ColumnCollection): ColumnCollection {\n    columnTypes.forEach(k => {\n      // set columns data\n      this.dataSources[k].updateData(data.columns[k], {\n        // max depth level\n        depth: data.maxLevel,\n\n        // groups\n        groups: data.columnGrouping[k].reduce((res: Groups, g) => {\n          if (!res[g.level]) {\n            res[g.level] = [];\n          }\n          res[g.level].push(g);\n          return res;\n        }, {}),\n      });\n    });\n    this.collection = data;\n    return data;\n  }\n\n  /**\n   * Used in plugins\n   * Modify columns in store\n   */\n  updateColumns(updatedColumns: ColumnRegular[]) {\n    // collect column by type and propert\n    const columnByKey = updatedColumns.reduce(\n      (\n        res: Partial<Record<DimensionCols, Record<ColumnProp, ColumnRegular>>>,\n        c,\n      ) => {\n        const type = getColumnType(c);\n        if (!res[type]) {\n          res[type] = {};\n        }\n        res[type][c.prop] = c;\n        return res;\n      },\n      {},\n    );\n\n    // find indexes in source\n    const colByIndex: Partial<\n      Record<DimensionCols, Record<number, ColumnRegular>>\n    > = {};\n    for (const t in columnByKey) {\n      if (!columnByKey.hasOwnProperty(t)) {\n        continue;\n      }\n      const type = t as DimensionCols;\n      const colsToUpdate = columnByKey[type];\n      const sourceItems = this.dataSources[type].store.get('source');\n      colByIndex[type] = {};\n      for (let i = 0; i < sourceItems.length; i++) {\n        const column = sourceItems[i];\n        const colToUpdateIfExists = colsToUpdate?.[column.prop];\n\n        // update column if exists in source\n        if (colToUpdateIfExists) {\n          colByIndex[type][i] = colToUpdateIfExists;\n        }\n      }\n    }\n    for (const t in colByIndex) {\n      if (!colByIndex.hasOwnProperty(t)) {\n        continue;\n      }\n      const type = t as DimensionCols;\n      setSourceByPhysicalIndex(\n        this.dataSources[type].store,\n        colByIndex[type] || {},\n      );\n    }\n  }\n\n  updateColumn(column: ColumnRegular, index: number) {\n    const type = getColumnType(column);\n    setSourceByVirtualIndex(this.dataSources[type].store, { [index]: column });\n  }\n}\n","import reduce from 'lodash/reduce';\n\nimport {\n  isRowType,\n  rowTypes,\n  DataStore,\n  getSourceItem,\n  getVisibleSourceItem,\n  Groups,\n  Trimmed,\n} from '@store';\nimport DimensionProvider from './dimension.provider';\nimport type { GroupLabelTemplateFunc } from '../plugins/groupingRow/grouping.row.types';\nimport type {\n  DataLookup,\n  DimensionRows,\n  DataType,\n  BeforeSaveDataDetails,\n} from '@type';\n\nexport type RowDataSources = {\n  [T in DimensionRows]: DataStore<DataType, DimensionRows>;\n};\n\n/**\n * Data source provider\n * \n * @dependsOn DimensionProvider\n */\n\nexport class DataProvider {\n  public readonly stores: RowDataSources;\n  constructor(private dimensionProvider: DimensionProvider) {\n    this.stores = reduce(\n      rowTypes,\n      (sources: Partial<RowDataSources>, k: DimensionRows) => {\n        sources[k] = new DataStore(k);\n        return sources;\n      },\n      {},\n    ) as RowDataSources;\n  }\n\n  setData(\n    data: DataType[],\n    type: DimensionRows = 'rgRow',\n    disableVirtualRows = false,\n    grouping?: {\n      depth: number;\n      groups?: Groups;\n      customRenderer?: GroupLabelTemplateFunc;\n    },\n    silent = false,\n  ): DataType[] {\n    // set rgRow data\n    this.stores[type].updateData([...data], grouping, silent);\n\n    // for pinned row no need virtual data\n    const noVirtual = type !== 'rgRow' || disableVirtualRows;\n    this.dimensionProvider.setData(data.length, type, noVirtual);\n    return data;\n  }\n\n  getModel(virtualIndex: number, type: DimensionRows = 'rgRow') {\n    const store = this.stores[type].store;\n    return getSourceItem(store, virtualIndex);\n  }\n\n  changeOrder({ rowType = 'rgRow', from, to }: { rowType: DimensionRows, from: number; to: number }) {\n    const storeService = this.stores[rowType];\n\n    // take currently visible row indexes\n    const newItemsOrder = [...storeService.store.get('proxyItems')];\n    const prevItems = storeService.store.get('items');\n\n    // take out\n    const toMove = newItemsOrder.splice(\n      newItemsOrder.indexOf(prevItems[from]), // get index in proxy\n      1\n    );\n    // insert before\n    newItemsOrder.splice(\n      newItemsOrder.indexOf(prevItems[to]),  // get index in proxy\n      0,\n      ...toMove\n    );\n    storeService.setData({\n      proxyItems: newItemsOrder,\n    });\n\n    // take currently visible row indexes\n    const newItems = storeService.store.get('items');\n    this.dimensionProvider.updateSizesPositionByNewDataIndexes(\n      rowType,\n      newItems,\n      prevItems\n    );\n  }\n\n  setCellData(\n    { type, rowIndex, prop, val }: Pick<BeforeSaveDataDetails, 'type' | 'rowIndex' | 'prop' | 'val'>, \n    mutate = true,\n  ) {\n    const model = this.getModel(rowIndex, type);\n    model[prop] = val;\n    this.stores[type].setSourceData({ [rowIndex]: model }, mutate);\n  }\n\n  setRangeData(data: DataLookup, type: DimensionRows) {\n    const items: Record<number, DataType> = {};\n    for (let rowIndex in data) {\n      const oldModel = (items[rowIndex] = getSourceItem(\n        this.stores[type].store,\n        parseInt(rowIndex, 10),\n      ));\n      if (!oldModel) {\n        continue;\n      }\n      for (let prop in data[rowIndex]) {\n        oldModel[prop] = data[rowIndex][prop];\n      }\n    }\n    this.stores[type].setSourceData(items);\n  }\n\n  refresh(type: DimensionRows | 'all' = 'all') {\n    if (isRowType(type)) {\n      this.refreshItems(type);\n    }\n    rowTypes.forEach((t: DimensionRows) => this.refreshItems(t));\n  }\n\n  refreshItems(type: DimensionRows = 'rgRow') {\n    const items = this.stores[type].store.get('items');\n    this.stores[type].setData({ items: [...items] });\n  }\n\n  setGrouping({ depth }: { depth: number }, type: DimensionRows = 'rgRow') {\n    this.stores[type].setData({ groupingDepth: depth });\n  }\n\n  setTrimmed(trimmed: Trimmed, type: DimensionRows = 'rgRow') {\n    const store = this.stores[type];\n    store.addTrimmed(trimmed);\n    this.dimensionProvider.setTrimmed(trimmed, type);\n    if (type === 'rgRow') {\n      this.dimensionProvider.setData(\n        getVisibleSourceItem(store.store).length,\n        type,\n      );\n    }\n  }\n}\n","import reduce from 'lodash/reduce';\nimport debounce from 'lodash/debounce';\nimport ViewportProvider from './viewport.provider';\nimport { RESIZE_INTERVAL } from '../utils/consts';\n\nimport {\n  columnTypes,\n  rowTypes,\n  getItemByIndex,\n  DimensionStore,\n  DimensionStoreCollection,\n  gatherTrimmedItems,\n  Trimmed,\n} from '@store';\nimport type {\n  DimensionCols,\n  DimensionType,\n  MultiDimensionType,\n  ColumnRegular,\n  DimensionSettingsState,\n  ViewPortScrollEvent,\n  ViewSettingSizeProp,\n  ViewportState,\n} from '@type';\nimport { getColumnSizes } from '../utils/column.utils';\n\nexport type DimensionConfig = {\n  realSizeChanged(k: MultiDimensionType): void;\n};\n/**\n * Dimension provider\n * Stores dimension information and custom sizes\n * \n * @dependsOn ViewportProvider\n */\nexport default class DimensionProvider {\n  readonly stores: DimensionStoreCollection;\n  constructor(\n    private viewports: ViewportProvider,\n    config: DimensionConfig,\n  ) {\n    const sizeChanged = debounce(\n      (k: MultiDimensionType) => config.realSizeChanged(k),\n      RESIZE_INTERVAL,\n    );\n    this.stores = reduce(\n      [...rowTypes, ...columnTypes],\n      (sources: Partial<DimensionStoreCollection>, t: MultiDimensionType) => {\n        sources[t] = new DimensionStore(t);\n        sources[t].store.onChange('realSize', () => sizeChanged(t));\n        return sources;\n      },\n      {},\n    ) as DimensionStoreCollection;\n  }\n\n  /**\n   * Clear old sizes from dimension and viewports\n   * @param type - dimension type\n   * @param count - count of items\n   */\n  clearSize(t: MultiDimensionType, count: number) {\n    this.stores[t].drop();\n    // after we done with drop trigger viewport recalculaction\n    this.viewports.stores[t].setOriginalSizes(\n      this.stores[t].store.get('originItemSize'),\n    );\n    this.setItemCount(count, t);\n  }\n\n  /**\n   * Apply new custom sizes to dimension and view port\n   * @param type - dimension type\n   * @param sizes - new custom sizes\n   * @param keepOld - keep old sizes merge new with old\n   */\n  setCustomSizes(\n    type: MultiDimensionType,\n    sizes: ViewSettingSizeProp,\n    keepOld = false,\n  ) {\n    let newSizes = sizes;\n    if (keepOld) {\n      const oldSizes = this.stores[type].store.get('sizes');\n      newSizes = {\n        ...oldSizes,\n        ...sizes,\n      };\n    }\n    this.stores[type].setDimensionSize(newSizes);\n    this.setViewPortCoordinate({\n      type,\n      force: true,\n    });\n  }\n\n  setItemCount(realCount: number, type: MultiDimensionType) {\n    this.viewports.stores[type].setViewport({ realCount });\n    this.stores[type].setStore({ count: realCount });\n  }\n\n  /**\n   * Apply trimmed items\n   * @param trimmed - trimmed items\n   * @param type\n   */\n  setTrimmed(trimmed: Trimmed, type: MultiDimensionType) {\n    const allTrimmed = gatherTrimmedItems(trimmed);\n    const dimStoreType = this.stores[type];\n    dimStoreType.setStore({ trimmed: allTrimmed });\n    this.setViewPortCoordinate({\n      type,\n      force: true,\n    });\n  }\n\n  /**\n   * Sets dimension data and viewport coordinate\n   * @param itemCount\n   * @param type - dimension type\n   * @param noVirtual - disable virtual data\n   */\n  setData(itemCount: number, type: MultiDimensionType, noVirtual = false) {\n    this.setItemCount(itemCount, type);\n\n    // Virtualization will get disabled\n    if (noVirtual) {\n      const dimension = this.stores[type].getCurrentState();\n      this.viewports.stores[type].setViewport({\n        virtualSize: dimension.realSize,\n      });\n    }\n    this.setViewPortCoordinate({\n      type,\n    });\n  }\n\n  /**\n   * Applies new columns to the dimension provider\n   * @param columns - new columns data\n   * @param disableVirtualX - disable virtual data for X axis\n   */\n  applyNewColumns(\n    columns: Record<DimensionCols, ColumnRegular[]>,\n    disableVirtualX: boolean,\n    keepOld = false,\n  ) {\n    // Apply new columns to dimension provider\n    for (let type of columnTypes) {\n      if (!keepOld) {\n        // Clear existing data in the dimension provider\n        this.stores[type].drop();\n      }\n\n      // Get the new columns for the current type\n      const items = columns[type];\n\n      // Determine if virtual data should be disabled for the current type\n      const noVirtual = type !== 'rgCol' || disableVirtualX;\n\n      // Set the items count in the dimension provider\n      this.stores[type].setStore({ count: items.length });\n\n      // Set the custom sizes for the columns\n      const newSizes = getColumnSizes(items);\n      this.stores[type].setDimensionSize(newSizes);\n\n      // Update the viewport with new data\n      const vpUpdate: Partial<ViewportState> = {\n        // This triggers drop on realCount change\n        realCount: items.length,\n      };\n\n      // If virtual data is disabled, set the virtual size to the real size\n      if (noVirtual) {\n        vpUpdate.virtualSize = this.stores[type].getCurrentState().realSize;\n      }\n\n      // Update the viewport\n      this.viewports.stores[type].setViewport(vpUpdate);\n      this.setViewPortCoordinate({\n        type,\n      });\n    }\n  }\n\n  /**\n   * Gets the full size of the grid by summing up the sizes of all dimensions\n   * Goes through all dimensions columnTypes (x) and rowTypes (y) and sums up their sizes\n   */\n\n  getFullSize(): { x: number; y: number } {\n    let x = 0;\n    let y = 0;\n    for (let type of columnTypes) {\n      x += this.stores[type]?.store.get('realSize') || 0;\n    }\n    for (let type of rowTypes) {\n      y += this.stores[type]?.store.get('realSize') || 0;\n    }\n    return { y, x };\n  }\n\n  setViewPortCoordinate({\n    type,\n    coordinate = this.viewports.stores[type].lastCoordinate,\n    force = false,\n  }: {\n    coordinate?: number;\n    type: MultiDimensionType;\n    force?: boolean;\n  }) {\n    const dimension = this.stores[type].getCurrentState();\n    this.viewports.stores[type].setViewPortCoordinate(\n      coordinate,\n      dimension,\n      force,\n    );\n  }\n\n  getViewPortPos(e: ViewPortScrollEvent): number {\n    const dimension = this.stores[e.dimension].getCurrentState();\n    const item = getItemByIndex(dimension, e.coordinate);\n\n    return item.start;\n  }\n\n  setSettings(\n    data: Partial<DimensionSettingsState>,\n    dimensionType: DimensionType,\n  ) {\n    let stores: MultiDimensionType[] = [];\n    switch (dimensionType) {\n      case 'rgCol':\n        stores = columnTypes;\n        break;\n      case 'rgRow':\n        stores = rowTypes;\n        break;\n    }\n    for (let s of stores) {\n      this.stores[s].setStore(data);\n    }\n  }\n\n  updateSizesPositionByNewDataIndexes(\n    type: MultiDimensionType,\n    newItemsOrder: number[],\n    prevItemsOrder: number[] = [],\n  ) {\n    // Move custom sizes to new order\n    this.stores[type].updateSizesPositionByIndexes(\n      newItemsOrder,\n      prevItemsOrder,\n    );\n    this.setViewPortCoordinate({\n      type,\n      force: true,\n    });\n  }\n}\n","import reduce from 'lodash/reduce';\nimport { columnTypes, rowTypes, type ViewportStoreCollection, ViewportStore } from '@store';\nimport type { MultiDimensionType, ViewportState } from '@type';\n\n\nexport default class ViewportProvider {\n  readonly stores: ViewportStoreCollection;\n  constructor() {\n    this.stores = reduce(\n      [...rowTypes, ...columnTypes],\n      (sources: Partial<ViewportStoreCollection>, k: MultiDimensionType) => {\n        sources[k] = new ViewportStore(k);\n        return sources;\n      },\n      {},\n    ) as ViewportStoreCollection;\n  }\n\n  setViewport(type: MultiDimensionType, data: Partial<ViewportState>) {\n    this.stores[type].setViewport(data);\n  }\n}\n","import DimensionProvider from '../../services/dimension.provider';\nimport { type SelectionStoreConnector, EMPTY_INDEX } from '../../services/selection.store.connector';\nimport ViewportProvider from '../../services/viewport.provider';\nimport { columnTypes, DSourceState, getSourceItem, getVisibleSourceItem, rowTypes } from '@store';\nimport { OrdererService } from '../order/order-renderer';\nimport GridScrollingService from './viewport.scrolling.service';\nimport { CONTENT_SLOT, FOOTER_SLOT, HEADER_SLOT, viewportDataPartition, VPPartition } from './viewport.helpers';\n\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport type {\n  AllDimensionType,\n  Cell,\n  ColumnRegular,\n  DimensionCols,\n  DimensionRows,\n  HeaderProperties,\n  RangeArea,\n  SlotType,\n  ViewportColumn,\n  ViewportData,\n  ViewportProperties,\n  ViewportProps,\n  ViewPortResizeEvent,\n  ViewportState,\n  ViewSettingSizeProp,\n} from '@type';\nimport { Observable } from '../../utils';\n\nexport type ResizeDetails = { [index: number]: ColumnRegular };\ntype Config = {\n  columnProvider: ColumnDataProvider;\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  viewportProvider: ViewportProvider;\n  scrollingService: GridScrollingService;\n  orderService: OrdererService;\n  selectionStoreConnector: SelectionStoreConnector;\n\n  disableVirtualX?: boolean;\n  disableVirtualY?: boolean;\n\n  resize(r: ResizeDetails): void;\n};\n\nexport type FocusedData = {\n  model: any;\n  cell: Cell;\n  colType: DimensionCols;\n  rowType: DimensionRows;\n  column?: ColumnRegular;\n};\n\n/** Collect Column data */\nfunction gatherColumnData(data: ViewportColumn) {\n  const colDimension = data.dimensions[data.colType].store;\n  const realWidth = colDimension.get('realSize');\n\n  const prop: ViewportProperties = {\n    contentWidth: realWidth,\n    class: data.colType,\n    contentHeight: data.contentHeight,\n    key: data.colType,\n    colType: data.colType,\n    onResizeviewport: data.onResizeviewport,\n    // set viewport size to real size\n    style: data.fixWidth ? { minWidth: `${realWidth}px` } : undefined,\n  };\n\n  const headerProp: HeaderProperties = {\n    colData: getVisibleSourceItem(data.colStore),\n    dimensionCol: colDimension,\n    type: data.colType,\n    groups: data.colStore.get('groups'),\n    groupingDepth: data.colStore.get('groupingDepth'),\n    resizeHandler: data.colType === 'colPinEnd' ? ['l'] : undefined,\n    onHeaderresize: data.onHeaderresize,\n  };\n\n  return {\n    prop,\n    type: data.colType,\n    position: data.position,\n    headerProp,\n    viewportCol: data.viewports[data.colType].store,\n  };\n}\n\nexport default class ViewportService {\n  readonly columns: ViewportProps[];\n  constructor(\n    private config: Config,\n    contentHeight: number,\n  ) {\n    this.config.selectionStoreConnector?.beforeUpdate();\n\n    // ----------- Handle columns ----------- //\n\n    // Transform data from stores and apply it to different components\n    const columns: ViewportProps[] = [];\n    let x = 0; // we increase x only if column present\n    columnTypes.forEach(val => {\n      const colStore = config.columnProvider.stores[val].store;\n      // only columns that have data show\n      if (!colStore.get('items').length) {\n        return;\n      }\n      const column: ViewportColumn = {\n        colType: val,\n        position: { x, y: 1 },\n\n        contentHeight,\n        // only central column has dynamic width\n        fixWidth: val !== 'rgCol',\n\n        viewports: config.viewportProvider.stores,\n        dimensions: config.dimensionProvider.stores,\n        rowStores: config.dataProvider.stores,\n\n        colStore,\n        onHeaderresize: e => this.onColumnResize(val, e, colStore),\n      };\n      if (val === 'rgCol') {\n        column.onResizeviewport = (e: CustomEvent<ViewPortResizeEvent>) => {\n          const vpState: Partial<ViewportState> = {\n            clientSize: e.detail.size,\n          };\n\n          // virtual size will be handled by dimension provider if disabled\n          if ((e.detail.dimension === 'rgRow' && !config.disableVirtualY)\n              || (e.detail.dimension === 'rgCol' && !config.disableVirtualX)) {\n                vpState.virtualSize = e.detail.size;\n          }\n          config.viewportProvider?.setViewport(e.detail.dimension, vpState);\n        };\n      }\n      const colData = gatherColumnData(column);\n      const columnSelectionStore = this.registerCol(colData.position.x, val);\n\n      // render per each column data collections vertically\n      const dataPorts = this.dataViewPort(column).reduce<ViewportData[]>(\n        (r, rgRow) => {\n          // register selection store for Segment\n          const segmentSelection = this.registerSegment(rgRow.position);\n          segmentSelection.setLastCell(rgRow.lastCell);\n\n          // register selection store for Row\n          const rowSelectionStore = this.registerRow(\n            rgRow.position.y,\n            rgRow.type,\n          );\n          const rowDef: ViewportData = {\n            colType: val,\n            ...rgRow,\n            rowSelectionStore,\n            selectionStore: segmentSelection.store,\n            ref: (e) =>\n              config.selectionStoreConnector.registerSection(e),\n            onSetrange: e => {\n              segmentSelection.setRangeArea(e.detail);\n            },\n            onSettemprange: e => segmentSelection.setTempArea(e.detail),\n            onFocuscell: e => {\n              // todo: multi focus\n              segmentSelection.clearFocus();\n              config.selectionStoreConnector.focus(segmentSelection, e.detail);\n            },\n          };\n          r.push(rowDef);\n          return r;\n        },\n        [],\n      );\n      columns.push({\n        ...colData,\n        columnSelectionStore,\n        dataPorts,\n      });\n      x++;\n    });\n    this.columns = columns;\n    // ----------- Handle columns end ----------- //\n\n    this.config.scrollingService?.unregister();\n  }\n\n  private onColumnResize(\n    type: DimensionCols,\n    { detail }: CustomEvent<ViewSettingSizeProp>,\n    store: Observable<DSourceState<ColumnRegular, DimensionCols>>,\n  ) {\n    // apply to dimension provider\n    this.config.dimensionProvider?.setCustomSizes(type, detail, true);\n\n    // set resize event\n    const changedItems: ResizeDetails = {};\n    for (const [i, size] of Object.entries(detail || {})) {\n      const virtualIndex = parseInt(i, 10);\n      const item = getSourceItem(store, virtualIndex);\n      if (item) {\n        changedItems[virtualIndex] = { ...item, size };\n      }\n    }\n    this.config.resize(changedItems);\n  }\n\n  /** register selection store for Segment */\n  private registerSegment(position: Cell) {\n    return this.config.selectionStoreConnector.register(position);\n  }\n\n  /** register selection store for Row */\n  private registerRow(y: number, type: DimensionRows) {\n    return this.config.selectionStoreConnector.registerRow(y, type).store;\n  }\n\n  /** register selection store for Column */\n  private registerCol(x: number, type: DimensionCols) {\n    return this.config.selectionStoreConnector.registerColumn(x, type).store;\n  }\n\n  /** Collect Row data */\n  private dataViewPort(data: ViewportColumn) {\n    const slots: { [key in DimensionRows]: SlotType } = {\n      rowPinStart: HEADER_SLOT,\n      rgRow: CONTENT_SLOT,\n      rowPinEnd: FOOTER_SLOT,\n    };\n\n    // y position for selection\n    let y = 0;\n    return rowTypes.reduce((result: VPPartition[], type) => {\n      // filter out empty sources, we still need to return source to keep slot working\n      const isPresent =\n        data.viewports[type].store.get('realCount') || type === 'rgRow';\n      const rgCol = {\n        ...data,\n        position: { ...data.position, y: isPresent ? y : EMPTY_INDEX },\n      };\n      const partition = viewportDataPartition(\n        rgCol,\n        type,\n        slots[type],\n        type !== 'rgRow', // is fixed row\n      );\n      result.push(partition);\n      if (isPresent) {\n        y++;\n      }\n      return result;\n    }, []);\n  }\n\n  scrollToCell(cell: Partial<Cell>) {\n    for (let key in cell) {\n      const coordinate = cell[key as keyof Cell];\n      if (typeof coordinate === 'number') {\n        this.config.scrollingService.proxyScroll({\n          dimension: key === 'x' ? 'rgCol' : 'rgRow',\n          coordinate,\n        });\n      }\n    }\n  }\n\n  /**\n   * Clear current grid focus\n   */\n  clearFocused() {\n    this.config.selectionStoreConnector.clearAll();\n  }\n\n  clearEdit() {\n    this.config.selectionStoreConnector.setEdit(false);\n  }\n\n  /**\n   * Collect focused element data\n   */\n  getFocused(): FocusedData | null {\n    const focused = this.config.selectionStoreConnector.focusedStore;\n    if (!focused) {\n      return null;\n    }\n    // get column data\n    const colType =\n      this.config.selectionStoreConnector.storesXToType[focused.position.x];\n    const column = this.config.columnProvider.getColumn(\n      focused.cell.x,\n      colType,\n    );\n\n    // get row data\n    const rowType =\n      this.config.selectionStoreConnector.storesYToType[focused.position.y];\n    const model = this.config.dataProvider.getModel(focused.cell.y, rowType);\n    return {\n      column,\n      model,\n      cell: focused.cell,\n      colType,\n      rowType,\n    };\n  }\n\n  getStoreCoordinateByType(colType: DimensionCols, rowType: DimensionRows): Cell | undefined {\n    const stores = this.config.selectionStoreConnector.storesByType;\n    if (typeof stores[colType] === 'undefined' || typeof stores[rowType] === 'undefined') {\n      return;\n    }\n    return {\n      x: stores[colType],\n      y: stores[rowType],\n    };\n  }\n\n  setFocus(colType: string, rowType: string, start: Cell, end: Cell) {\n    const coordinate = this.getStoreCoordinateByType(colType as DimensionCols, rowType as DimensionRows);\n    if (coordinate) {\n      this.config.selectionStoreConnector?.focusByCell(\n        coordinate,\n        start,\n        end,\n      );\n    }\n  }\n\n  getSelectedRange(): RangeArea & AllDimensionType | null | undefined {\n\n    const focused = this.config.selectionStoreConnector.focusedStore;\n    if (!focused) {\n      return null;\n    }\n    // get column data\n    const colType =\n      this.config.selectionStoreConnector.storesXToType[focused.position.x];\n\n    // get row data\n    const rowType =\n      this.config.selectionStoreConnector.storesYToType[focused.position.y];\n\n    const range = focused.entity.store.get('range');\n    if (!range) {\n      return null;\n    }\n    return {\n      ...range,\n      colType,\n      rowType,\n    }\n  }\n\n  setEdit(\n    rowIndex: number,\n    colIndex: number,\n    colType: DimensionCols,\n    rowType: DimensionRows,\n  ) {\n    const coordinate = this.getStoreCoordinateByType(colType as DimensionCols, rowType as DimensionRows);\n    if (coordinate) {\n      this.config.selectionStoreConnector?.setEditByCell(\n        coordinate,\n        { x: colIndex, y: rowIndex },\n      );\n    }\n  }\n}\n","import { columnTypes } from '@store';\nimport {\n  DimensionColPin,\n  ViewPortScrollEvent,\n  ElementsScroll,\n  ElementScroll,\n} from '@type';\n\nexport default class GridScrollingService {\n  private elements: ElementsScroll = {};\n  constructor(private setViewport: (e: ViewPortScrollEvent) => void) {}\n\n  async proxyScroll(e: ViewPortScrollEvent, key?: DimensionColPin | string) {\n    let newEventPromise: Promise<ViewPortScrollEvent | undefined> | undefined;\n    let event = e;\n    for (let elKey in this.elements) {\n      // skip\n      if (e.dimension === 'rgCol' && elKey === 'headerRow') {\n        continue;\n        // pinned column only\n      } else if (this.isPinnedColumn(key) && e.dimension === 'rgCol') {\n        if (elKey === key || !e.delta) {\n          continue;\n        }\n        for (let el of this.elements[elKey]) {\n          if (el.changeScroll) {\n            newEventPromise = el.changeScroll(e);\n          }\n        }\n      } else {\n        for (let el of this.elements[elKey]) {\n          await el.setScroll?.(e);\n        }\n      }\n    }\n    const newEvent = await newEventPromise;\n    if (newEvent) {\n      event = newEvent;\n    }\n    this.setViewport(event);\n  }\n\n  /**\n   * Silent scroll update for mobile devices when we have negative scroll top\n   */\n  async scrollSilentService(\n    e: ViewPortScrollEvent,\n    key?: DimensionColPin | string,\n  ) {\n    for (let elKey in this.elements) {\n      // skip same element update\n      if (elKey === key) {\n        continue;\n      }\n      if (\n        columnTypes.includes(key as DimensionColPin) &&\n        (elKey === 'headerRow' ||\n          columnTypes.includes(elKey as DimensionColPin))\n      ) {\n        for (let el of this.elements[elKey]) {\n          await el.changeScroll?.(e, true);\n        }\n        continue;\n      }\n    }\n  }\n\n  private isPinnedColumn(\n    key?: DimensionColPin | string,\n  ): key is DimensionColPin {\n    return !!key && ['colPinStart', 'colPinEnd'].indexOf(key) > -1;\n  }\n\n  registerElements(els: ElementsScroll) {\n    this.elements = els;\n  }\n\n  /**\n   * Register new element for farther scroll support\n   * @param el - can be null if holder removed\n   * @param key - element key\n   */\n  registerElement(el: ElementScroll | null | undefined, key: string) {\n    if (!this.elements[key]) {\n      this.elements[key] = [];\n    }\n    // new element added\n    if (el) {\n      this.elements[key].push(el);\n    } else if (this.elements[key]) {\n      // element removed\n      delete this.elements[key];\n    }\n  }\n\n  unregister() {\n    this.elements = {};\n  }\n}\n","import { h, type VNode } from '@stencil/core';\nimport { PositionItem } from '@type';\nimport { Cell } from '@type';\n\ntype Props = { ref: { (e: OrdererService): void } };\n\n/**\n * Draw drag\n */\nexport class OrdererService {\n  private parentY = 0;\n  el?: HTMLElement;\n  rgRow?: HTMLElement;\n  text?: HTMLElement;\n  draggable?: HTMLElement;\n\n  start(parent: HTMLElement, { pos, text, event }: { pos: PositionItem; text: string; event: MouseEvent }) {\n    const { top } = parent.getBoundingClientRect();\n    this.parentY = top;\n    if (this.text) {\n      this.text.innerText = text;\n    }\n    this.move(pos);\n    this.moveTip({ x: event.x, y: event.y });\n    this.el?.classList.remove('hidden');\n  }\n  end() {\n    this.el?.classList.add('hidden');\n  }\n  move(pos: PositionItem) {\n    this.moveElement(pos.end - this.parentY);\n  }\n  moveTip({ x, y }: Cell) {\n    if (!this.draggable) {\n      return;\n    }\n    this.draggable.style.left = `${x}px`;\n    this.draggable.style.top = `${y}px`;\n  }\n\n  private moveElement(y: number) {\n    if (!this.rgRow) {\n      return;\n    }\n    this.rgRow.style.transform = `translateY(${y}px)`;\n  }\n}\n\nconst OrderRenderer = ({ ref }: Props): VNode[] => {\n  const service = new OrdererService();\n  ref(service);\n  return (\n    <div class=\"draggable-wrapper hidden\" ref={e => (service.el = e)}>\n      <div class=\"draggable\" ref={el => (service.draggable = el)}>\n        <span class=\"revo-alt-icon\" />\n        <span ref={e => (service.text = e)} />\n      </div>\n      <div class=\"drag-position\" ref={e => (service.rgRow = e)} />\n    </div>\n  );\n};\nexport default OrderRenderer;\n","import { RowDefinition, DimensionRows } from '@type';\n\ntype Result = Partial<{\n  [T in DimensionRows]: { sizes?: Record<number, number>; };\n}>;\ntype RemoveResult = Partial<{\n  [T in DimensionRows]: number[];\n}>;\nexport const rowDefinitionByType = (newVal: RowDefinition[] = []) => {\n  const result: Result = {};\n  for (const v of newVal) {\n    let rowDefs = result[v.type];\n    if (!rowDefs) {\n      rowDefs = result[v.type] = {};\n    }\n    if (v.size) {\n      if (!rowDefs.sizes) {\n        rowDefs.sizes = {};\n      }\n      rowDefs.sizes[v.index] = v.size;\n    }\n  }\n  return result;\n};\n\nexport const rowDefinitionRemoveByType = (oldVal: RowDefinition[] = []) => {\n  const result: RemoveResult = {};\n  for (const v of oldVal) {\n    let rowDefs = result[v.type];\n    if (!rowDefs) {\n      rowDefs = result[v.type] = [];\n    }\n    if (v.size) {\n      rowDefs.push(v.index);\n    }\n  }\n  return result;\n};\n","export function isMobileDevice() {\n    return /Mobi/i.test(navigator.userAgent) || /Android/i.test(navigator.userAgent) || navigator.maxTouchPoints > 0;\n}\n","import { CellProps, PluginProviders } from '@type';\nimport { BasePlugin } from '../base.plugin';\nimport { ColumnCollection } from 'src/utils';\n\n/**\n * WCAG Plugin is responsible for enhancing the accessibility features of the RevoGrid component.\n * It ensures that the grid is fully compliant with Web Content Accessibility Guidelines (WCAG) 2.1.\n * This plugin should be the last plugin you add, as it modifies the grid's default behavior.\n *\n * The WCAG Plugin performs the following tasks:\n * - Sets the 'dir' attribute to 'ltr' for left-to-right text direction.\n * - Sets the 'role' attribute to 'treegrid' for treelike hierarchical structure.\n * - Sets the 'aria-keyshortcuts' attribute to 'Enter' and 'Esc' for keyboard shortcuts.\n * - Adds event listeners for keyboard navigation and editing.\n *\n * By default, the plugin adds ARIA roles and properties to the grid elements, providing semantic information\n * for assistive technologies. These roles include 'grid', 'row', and 'gridcell'. The plugin also sets\n * ARIA attributes such as 'aria-rowindex', 'aria-colindex', and 'aria-selected'.\n *\n * The WCAG Plugin ensures that the grid is fully functional and usable for users with various disabilities,\n * including visual impairments, deaf-blindness, and cognitive disabilities.\n *\n * Note: The WCAG Plugin should be added as the last plugin in the list of plugins, as it modifies the grid's\n * default behavior and may conflict with other plugins if added earlier.\n */\nexport class WCAGPlugin extends BasePlugin {\n  constructor(revogrid: HTMLRevoGridElement, providers: PluginProviders) {\n    super(revogrid, providers);\n\n    revogrid.setAttribute('dir', 'ltr');\n    revogrid.setAttribute('role', 'treegrid');\n    revogrid.setAttribute('aria-keyshortcuts', 'Enter');\n    revogrid.setAttribute('aria-multiselectable', 'true');\n    revogrid.setAttribute('tabindex', '0');\n\n    /**\n     * Before Columns Set Event\n     */\n    this.addEventListener(\n      'beforecolumnsset',\n      ({ detail }: CustomEvent<ColumnCollection>) => {\n        const columns = [\n          ...detail.columns.colPinStart,\n          ...detail.columns.rgCol,\n          ...detail.columns.colPinEnd,\n        ];\n\n        revogrid.setAttribute('aria-colcount', `${columns.length}`);\n\n        columns.forEach((column, index) => {\n          const { columnProperties, cellProperties } = column;\n\n          column.columnProperties = (...args) => {\n            const result = columnProperties?.(...args) || {};\n\n            result.role = 'columnheader';\n            result['aria-colindex'] = `${index}`;\n\n            return result;\n          };\n\n          column.cellProperties = (...args) => {\n            const wcagProps: CellProps = {\n              ['role']: 'gridcell',\n              ['aria-colindex']: `${index}`,\n              ['aria-rowindex']: `${args[0].rowIndex}`,\n              ['tabindex']: -1,\n            };\n            const columnProps: CellProps = cellProperties?.(...args) || {};\n\n            return {\n              ...wcagProps,\n              ...columnProps,\n            };\n          };\n        });\n      },\n    );\n\n    /**\n     * Before Row Set Event\n     */\n    this.addEventListener(\n      'beforesourceset',\n      ({\n        detail,\n      }: CustomEvent<HTMLRevoGridElementEventMap['beforesourceset']>) => {\n        revogrid.setAttribute('aria-rowcount', `${detail.source.length}`);\n      },\n    );\n    this.addEventListener(\n      'beforerowrender',\n      ({\n        detail,\n      }: CustomEvent<HTMLRevogrDataElementEventMap['beforerowrender']>) => {\n        detail.node.$attrs$ = {\n          ...detail.node.$attrs$,\n          role: 'row',\n          ['aria-rowindex']: detail.item.itemIndex,\n        };\n      },\n    );\n\n    // focuscell\n    this.addEventListener(\n      'afterfocus',\n      async (\n        e: CustomEvent<HTMLRevogrFocusElementEventMap['afterfocus']>,\n      ) => {\n        if (e.defaultPrevented) {\n          return;\n        }\n        const el = this.revogrid.querySelector(\n          `revogr-data[type=\"${e.detail.rowType}\"][col-type=\"${e.detail.colType}\"] [data-rgrow=\"${e.detail.rowIndex}\"][data-rgcol=\"${e.detail.colIndex}\"]`,\n        );\n        if (el instanceof HTMLElement) {\n          el.focus();\n        }\n      },\n    );\n  }\n}\n","import { PluginBaseComponent, PluginProviders, PluginServiceBase } from '@type';\nimport { GridPlugin } from 'src/plugins';\n\n/**\n * Plugin service\n * Manages plugins\n */\nexport class PluginService implements PluginServiceBase {\n  /**\n   * Plugins\n   * Define plugins collection\n   */\n  internalPlugins: PluginBaseComponent[] = [];\n\n  /**\n   * Get all plugins\n   */\n  get() {\n    return [...this.internalPlugins];\n  }\n\n  /**\n   * Add plugin to collection\n   */\n  add(plugin: PluginBaseComponent) {\n    this.internalPlugins.push(plugin);\n  }\n\n  /**\n   * Add user plugins and create\n   */\n  addUserPluginsAndCreate(\n    element: HTMLRevoGridElement,\n    plugins: GridPlugin[] = [],\n    prevPlugins?: GridPlugin[],\n    pluginData?: PluginProviders,\n  ) {\n    if (!pluginData) {\n      return;\n    }\n\n    // Step 1: Identify plugins to remove, compare new and old plugins\n    const pluginsToRemove =\n      prevPlugins?.filter(\n        prevPlugin => !plugins.some(userPlugin => userPlugin === prevPlugin),\n      ) || [];\n\n    // Step 2: Remove old plugins\n    pluginsToRemove.forEach(plugin => {\n      const index = this.internalPlugins.findIndex(\n        createdPlugin => createdPlugin instanceof plugin,\n      );\n      if (index !== -1) {\n        this.internalPlugins[index].destroy?.();\n        this.internalPlugins.splice(index, 1); // Remove the plugin\n      }\n    });\n\n    // Step 3: Register user plugins\n    plugins?.forEach(userPlugin => {\n      // check if plugin already exists, if so, skip\n      const existingPlugin = this.internalPlugins.find(\n        createdPlugin => createdPlugin instanceof userPlugin,\n      );\n      if (existingPlugin) {\n        return;\n      }\n      this.add(new userPlugin(element, pluginData));\n    });\n  }\n\n  /**\n   * Get plugin by class\n   */\n  getByClass<T extends PluginBaseComponent>(\n    pluginClass: new (...args: any[]) => T,\n  ): T | undefined {\n    return this.internalPlugins.find(p => p instanceof pluginClass) as\n      | T\n      | undefined;\n  }\n\n  /**\n   * Remove plugin\n   */\n  remove(plugin: PluginBaseComponent) {\n    const index = this.internalPlugins.indexOf(plugin);\n    if (index > -1) {\n      this.internalPlugins[index].destroy?.();\n      this.internalPlugins.splice(index, 1);\n    }\n  }\n\n  /**\n   * Remove all plugins\n   */\n\n  destroy() {\n    this.internalPlugins.forEach(p => p.destroy?.());\n    this.internalPlugins = [];\n  }\n}\n","@import './styles/revo-grid.mixin.scss';\n@import './styles/revo-grid.common.scss';\n@import './styles/revo-grid.default.scss';\n@import './styles/revo-grid.material.scss';\n@import './styles/revo-grid.dark.material.scss';\n@import './styles/revo-grid.dark.compact.scss';\n@import './styles/revo-grid.compact.scss';\n\nrevo-grid {\n  /* Base theme variables */\n  --revo-grid-primary: #266ae8;\n  --revo-grid-primary-transparent: rgba(38, 106, 232, 0.9);\n  --revo-grid-background: #fff;\n  --revo-grid-foreground: black;\n  --revo-grid-divider: gray;\n  --revo-grid-shadow: rgba(0, 0, 0, 0.15);\n  --revo-grid-text: black;\n  --revo-grid-border: rgba(0, 0, 0, 0.2);\n  \n  /* Filter panel variables */\n  --revo-grid-filter-panel-bg: #fff;\n  --revo-grid-filter-panel-border: #d9d9d9;\n  --revo-grid-filter-panel-shadow: rgba(0, 0, 0, 0.15);\n  --revo-grid-filter-panel-input-bg: #eaeaeb;\n  --revo-grid-filter-panel-divider: #d9d9d9;\n  --revo-grid-filter-panel-select-border: transparent;\n  --revo-grid-filter-panel-select-border-hover: transparent;\n\n  /* Grid specific variables */\n  --revo-grid-header-bg: #f8f9fa;\n  --revo-grid-header-color: #000;\n  --revo-grid-header-border: #cecece;\n  --revo-grid-cell-border: #e2e3e3;\n  --revo-grid-focused-bg: rgba(233, 234, 237, 0.5);\n  --revo-grid-row-hover: #f1f1f1;\n  --revo-grid-row-headers-bg: #f7faff;\n  --revo-grid-row-headers-color: #757a82;\n  --revo-grid-cell-disabled-bg: rgba(0, 0, 0, 0.07);\n  \n  /* Dark theme overrides - applied when theme contains 'dark' */\n  &[theme*='dark'] {\n    --revo-grid-background: #212529;\n    --revo-grid-foreground: #fff;\n    --revo-grid-text: rgba(255, 255, 255, 0.9);\n    --revo-grid-divider: #505050;\n    --revo-grid-border: rgba(255, 255, 255, 0.2);\n\n    /* Filter panel variables */\n    --revo-grid-filter-panel-bg: #212529;\n    --revo-grid-filter-panel-border: #505050;\n    --revo-grid-filter-panel-input-bg: #343a40;\n    --revo-grid-filter-panel-divider: #505050;\n\n    --revo-grid-header-bg: #343a40;\n    --revo-grid-header-color: #fff;\n    --revo-grid-header-border: #505050;\n    --revo-grid-cell-border: #424242;\n    --revo-grid-focused-bg: rgba(52, 58, 64, 0.5);\n    --revo-grid-row-hover: rgba(80, 80, 80, 0.5);\n    --revo-grid-row-headers-bg: rgba(52, 58, 64, 0.8);\n    --revo-grid-row-headers-color: rgba(255, 255, 255, 0.8);\n    --revo-grid-cell-disabled-bg: rgba(255, 255, 255, 0.07);\n  }\n  \n  @include revoGridCommon;\n  \n  /*\n  * Grid required to have a flex property to be able to stretch\n  */\n  display: flex !important;\n  height: 100%;\n  /**\n  * In some cases the min-height is not enough for safari\n  * so setting up the grid  height works\n  */\n  min-height: 300px;\n  font-family: Helvetica, Arial, Sans-Serif, serif;\n  font-size: 14px;\n  position: relative;\n  color: var(--revo-grid-text);\n\n  @include noSelect;\n\n  .attribution {\n    $size: 4px;\n    $color: var(--revo-grid-primary-transparent);\n\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 1000;\n    width: 0;\n    height: 0;\n    border-left: $size solid $color;\n    border-bottom: $size solid $color;\n    border-top: $size solid transparent;\n    border-right: $size solid transparent;\n    cursor: pointer;\n\n    .value {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      background-color: var(--revo-grid-background);\n      padding: 4px;\n      border-radius: 4px;\n      box-shadow: 0 1px 10px var(--revo-grid-border);\n      white-space: nowrap;\n      text-decoration: none;\n      color: var(--revo-grid-text);\n      letter-spacing: 0.3px;\n      font-size: 11px;\n      opacity: 0;\n      width: $size;\n      overflow: hidden;\n      transition: opacity 0.5s ease-in-out, width 0.3s ease-in-out;\n    }\n\n    &:hover {\n      .value {\n        width: 63px;\n        opacity: 1;\n      }\n    }\n  }\n\n  &.column-draggable.column-drag-start {\n    &, * {\n      &:hover {\n        cursor: grabbing;\n      }\n    }\n  }\n\n  .footer-wrapper,\n  .header-wrapper {\n    width: 100%;\n\n    revogr-data {\n      z-index: 3;\n    }\n  }\n\n  revo-dropdown {\n    width: 100%;\n\n    .rv-dr-root {\n      max-height: 100%;\n    }\n    &.shrink label {\n      opacity: 0;\n    }\n  }\n\n  .viewports {\n    // max-height: 100%; // for safari\n    max-width: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    flex-grow: 1;\n  }\n\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n\n  .main-viewport {\n    flex-grow: 1;\n    height: 0;\n    display: flex;\n    justify-content: space-between;\n    flex-direction: row;\n  }\n\n  .draggable {\n    $s: 30px;\n    position: fixed;\n    height: $s;\n    line-height: $s;\n    background: var(--revo-grid-background);\n    border-radius: 3px;\n    display: block;\n    z-index: 100;\n    margin-top: 5px;\n    margin-right: -20px;\n    box-shadow: 0 4px 20px 0 var(--revo-grid-shadow);\n    padding-left: 20px;\n    padding-right: 5px;\n\n    &.hidden {\n      display: none;\n    }\n\n    .revo-alt-icon {\n      $alt-icon-color: var(--revo-grid-foreground);\n      background-color: $alt-icon-color;\n      position: absolute;\n      left: 5px;\n      top: 10px;\n    }\n  }\n\n  .draggable-wrapper {\n    &.hidden {\n      display: none;\n    }\n  }\n\n  .drag-position {\n    position: absolute;\n    left: 0;\n    right: 0;\n    height: 1px;\n    z-index: 2;\n    background: var(--revo-grid-divider);\n    pointer-events: none;\n  }\n\n  .drag-position-y {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    z-index: 2;\n    background: var(--revo-grid-divider);\n    pointer-events: none;\n  }\n\n  .drag-auto-scroll-y {\n    pointer-events: none;\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 50px;\n    width: 1px;\n  }\n\n  .clipboard {\n    position: absolute;\n    left: 0;\n    top: 0;\n  }\n\n  revogr-scroll-virtual {\n    position: relative;\n    &.vertical,\n    &.horizontal {\n      z-index: 3;\n    }\n  }\n}\n","import {\n  type VNode,\n  Component,\n  Prop,\n  h,\n  Watch,\n  Element,\n  Listen,\n  Event,\n  EventEmitter,\n  Method,\n  Host,\n} from '@stencil/core';\n\nimport type {\n  MultiDimensionType,\n  DimensionRows,\n  DimensionCols,\n  DimensionType,\n  DimensionTypeCol,\n  RowHeaders,\n  ColumnRegular,\n  ColumnGrouping,\n  DataType,\n  RowDefinition,\n  ColumnType,\n  FocusTemplateFunc,\n  PositionItem,\n  ColumnProp,\n  ViewPortScrollEvent,\n  InitialHeaderClick,\n  AllDimensionType,\n  Editors,\n  BeforeSaveDataDetails,\n  BeforeRangeSaveDataDetails,\n  Cell,\n  ChangedRange,\n  RangeArea,\n  AfterEditEvent,\n  Theme,\n  PluginBaseComponent,\n  HeaderProperties,\n  PluginProviders,\n  FocusAfterRenderEvent,\n  ExtraNodeFuncConfig,\n  RowDragStartDetails,\n  AdditionalData,\n} from '@type';\n\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport { DSourceState, getVisibleSourceItem, rowTypes } from '@store';\nimport DimensionProvider from '../../services/dimension.provider';\nimport ViewportProvider from '../../services/viewport.provider';\nimport ThemeService from '../../themeManager/theme.service';\nimport { timeout } from '../../utils';\nimport {\n  AutoSizeColumnPlugin,\n  type AutoSizeColumnConfig,\n} from '../../plugins/column.auto-size.plugin';\n\nimport {\n  FilterPlugin,\n} from '../../plugins/filter/filter.plugin';\nimport { SortingPlugin } from '../../plugins/sorting/sorting.plugin';\nimport { ExportFilePlugin } from '../../plugins/export/export.plugin';\nimport { DataInput } from '../../plugins/export/types';\nimport { GroupingRowPlugin } from '../../plugins/groupingRow/grouping.row.plugin';\nimport type { GroupingOptions } from '../../plugins/groupingRow/grouping.row.types';\nimport ViewportService, { FocusedData } from './viewport.service';\nimport { DATA_SLOT, HEADER_SLOT } from './viewport.helpers';\nimport GridScrollingService from './viewport.scrolling.service';\nimport { SelectionStoreConnector } from '../../services/selection.store.connector';\nimport OrderRenderer, { OrdererService } from '../order/order-renderer';\nimport {\n  StretchColumn,\n  isStretchPlugin,\n} from '../../plugins/column.stretch.plugin';\nimport { rowDefinitionByType, rowDefinitionRemoveByType } from './grid.helpers';\nimport { ColumnMovePlugin } from '../../plugins/moveColumn/column.drag.plugin';\nimport { getPropertyFromEvent } from '../../utils/events';\nimport { isMobileDevice } from '../../utils/mobile';\nimport type { Observable } from '../../utils';\nimport type { GridPlugin } from '../../plugins/base.plugin';\nimport { ColumnCollection, getColumnByProp, getColumns } from '../../utils/column.utils';\nimport { WCAGPlugin } from '../../plugins/wcag';\nimport { ColumnFilterConfig, FilterCollectionItem } from '../../plugins/filter/filter.types';\nimport { PluginService } from './plugin.service';\nimport { SortingConfig, SortingOrder } from '../../plugins';\n\n\n/**\n * Revogrid - High-performance, customizable grid library for managing large datasets.\n * ### Events guide\n *\n * For a comprehensive events guide, check the [Events API Page](/guide/api/events).\n * All events propagate to the root level of the grid. [Dependency tree](#Dependencies).\n * \n * ### Type definitions\n *\n * Read [type definition file](https://github.com/revolist/revogrid/blob/master/src/interfaces.d.ts) for the full interface information.\n * \n * All complex property types such as `ColumnRegular`, `ColumnProp`, `ColumnDataSchemaModel` can be found there.\n * \n * ### HTMLRevoGridElement\n *\n * @slot data-{column-type}-{row-type}. @example data-rgCol-rgRow - main data slot. Applies extra elements in <revogr-data />.\n * @slot focus-{column-type}-{row-type}. @example focus-rgCol-rgRow - focus layer for main data. Applies extra elements in <revogr-focus />.\n * @slot viewport - Viewport slot.\n * @slot header - Header slot.\n * @slot footer - Footer slot.\n*/\n@Component({\n  tag: 'revo-grid',\n  styleUrl: 'revo-grid-style.scss',\n})\nexport class RevoGridComponent {\n  // #region Properties\n  /** Excel like functionality.\n   * Show row numbers.\n   * Also can be used for custom row header render if object provided.\n   */\n  @Prop() rowHeaders: RowHeaders | boolean;\n\n  /**\n   * Defines how many rows/columns should be rendered outside visible area.\n   */\n  @Prop() frameSize = 1;\n\n  /**\n   * Indicates default rgRow size.\n   * By default 0, means theme package size will be applied\n   *\n   * Alternatively you can use `rowSize` to reset viewport\n   */\n  @Prop() rowSize = 0;\n\n  /** Indicates default column size. */\n  @Prop() colSize = 100;\n\n  /** When true, user can range selection. */\n  @Prop() range = false;\n\n  /** When true, grid in read only mode. */\n  @Prop() readonly = false;\n\n  /** When true, columns are resizable. */\n  @Prop() resize = false;\n\n  /** When true cell focus appear. */\n  @Prop() canFocus = true;\n\n  /** When true enable clipboard. */\n  @Prop() useClipboard = true;\n\n  /**\n   * Columns - defines an array of grid columns.\n   * Can be column or grouped column.\n   */\n  @Prop() columns: (ColumnRegular | ColumnGrouping)[] = [];\n  /**\n   * Source - defines main data source.\n   * Can be an Object or 2 dimensional array([][]);\n   * Keys/indexes referenced from columns Prop.\n   */\n  @Prop() source: DataType[] = [];\n\n  /** Pinned top Source: {[T in ColumnProp]: any} - defines pinned top rows data source. */\n  @Prop() pinnedTopSource: DataType[] = [];\n\n  /** Pinned bottom Source: {[T in ColumnProp]: any} - defines pinned bottom rows data source. */\n  @Prop() pinnedBottomSource: DataType[] = [];\n\n  /** Custom row properies to be applied. See `RowDefinition` for more info. */\n  @Prop() rowDefinitions: RowDefinition[] = [];\n\n  /** Custom editors register. */\n  @Prop() editors: Editors = {};\n\n  /**\n   * Apply changes in editor when closed except 'Escape' cases.\n   * If custom editor in use method getValue required.\n   * Check interfaces.d.ts `EditorBase` for more info.\n   */\n  @Prop() applyOnClose = false;\n\n  /**\n   * Custom grid plugins. Can be added or removed at runtime.\n   * Every plugin should be inherited from BasePlugin class.\n   * \n   * For more details check [Plugin guide](https://rv-grid.com/guide/plugin/)\n   */\n  @Prop() plugins: GridPlugin[] = [];\n\n  /**\n   * Column Types Format.\n   * Every type represent multiple column properties.\n   * Types will be merged but can be replaced with column properties.\n   * Types were made as separate objects to be reusable per multiple columns.\n   */\n  @Prop() columnTypes: { [name: string]: ColumnType } = {};\n\n  /** Theme name. */\n  @Prop({ reflect: true, mutable: true }) theme: Theme = 'default';\n\n  /**\n   * Row class property mapping.\n   * Map custom classes to rows from row object data.\n   * Define this property in rgRow object and this will be mapped as rgRow class.\n   */\n  @Prop({ reflect: true }) rowClass = '';\n\n  /**\n   * Autosize config.\n   * Enables columns autoSize.\n   * For more details check `autoSizeColumn` plugin.\n   * By default disabled, hence operation is not performance efficient.\n   * `true` to enable with default params (double header separator click for autosize).\n   * Or define config. See `AutoSizeColumnConfig` for more details.\n   */\n  @Prop() autoSizeColumn: boolean | AutoSizeColumnConfig = false;\n\n  /**\n   * Enables filter plugin.\n   * Can be boolean.\n   * Or can be filter collection See `FilterCollection` for more info.\n   */\n  @Prop() filter: boolean | ColumnFilterConfig = false;\n\n  /**\n   * Alternative way to set sorting.\n   * `{columns: [{prop: 'name', order: 'asc'}]}`\n   * Use SortingPlugin to get current sorting state\n   */\n  @Prop() sorting?: SortingConfig;\n\n  /**\n   * Apply changes typed in editor on editor close except Escape cases.\n   * If custom editor in use method `getValue` required.\n   * Check `interfaces.d.ts` `EditorBase` for more info.\n   */\n  @Prop() focusTemplate: FocusTemplateFunc;\n\n  /**\n   * Enable column move plugin.\n   */\n  @Prop() canMoveColumns = false;\n  /**\n   * Trimmed rows.\n   * Functionality which allows to hide rows from main data set.\n   * `trimmedRows` are physical `rgRow` indexes to hide.\n   */\n  @Prop() trimmedRows: Record<number, boolean> = {};\n\n  /**\n   * Enable export plugin.\n   */\n  @Prop() exporting = false;\n\n  /**\n   * Group rows based on this property.\n   * Define properties to be groped by grouping plugin See `GroupingOptions`.\n   */\n  @Prop() grouping: GroupingOptions;\n\n  /**\n   * Stretch strategy for columns by `StretchColumn` plugin.\n   * For example if there are more space on the right last column size would be increased.\n   */\n  @Prop() stretch: boolean | string = false;\n\n  /**\n   * Additional data to be passed to plugins, renders or editors.\n   * For example if you need to pass Vue component instance.\n   */\n  @Prop() additionalData: AdditionalData = {};\n\n  /**\n   * Disable lazy rendering mode for the `X axis`.\n   * Use when not many columns present and you don't need rerenader cells during scroll.\n   * Can be used for initial rendering performance improvement.\n   */\n  @Prop() disableVirtualX = false;\n  /**\n   * Disable lazy rendering mode for the `Y axis`.\n   * Use when not many rows present and you don't need rerenader cells during scroll.\n   * Can be used for initial rendering performance improvement.\n   */\n  @Prop() disableVirtualY = false;\n\n  /**\n   * Please only hide the attribution if you are subscribed to Pro version\n   */\n  @Prop() hideAttribution = false;\n\n  /**\n   * Prevent rendering until job is done.\n   * Can be used for initial rendering performance improvement.\n   * When several plugins require initial rendering this will prevent double initial rendering.\n   */\n  @Prop() jobsBeforeRender: Promise<any>[] = [];\n\n  /**\n   * Register new virtual node inside of grid.\n   * Used for additional items creation such as plugin elements.\n   * Should be set before grid render inside of plugins.\n   * Can return VNode result of h() function or a function that returns VNode.\n   * Function can be used for performance improvement and additional renders.\n   */\n  @Prop() registerVNode: (\n    | VNode\n    | ((c: ExtraNodeFuncConfig) => VNode)\n  )[] = [];\n\n\n  /**\n   * Enable accessibility. If disabled, the grid will not be accessible.\n   * @default true\n   */\n  @Prop() accessible = true;\n\n\n\n  /**\n   * Disable native drag&drop plugin.\n   */\n  @Prop() canDrag = true;\n\n  // #endregion\n\n  // #region Events\n  /**\n   * New content size has been applied. The size excludes the header.\n   * Currently, the event responsible for applying the new content size does not provide the actual size.\n   * To retrieve the actual content size, you can utilize the `getContentSize` function after the event has been triggered.\n   */\n  @Event() contentsizechanged: EventEmitter<MultiDimensionType>;\n\n  /**\n   * Before the data is edited.\n   * To prevent the default behavior of editing data and use your own implementation, call `e.preventDefault()`.\n   * To override the edit result with your own value, set the `e.val` property to your desired value.\n   */\n  @Event() beforeedit: EventEmitter<BeforeSaveDataDetails>;\n\n  /**\n   * Before applying range data, specifically when a range selection occurs.\n   * To customize the data and prevent the default edit data from being set, you can call `e.preventDefault()`.\n   */\n  @Event() beforerangeedit: EventEmitter<BeforeRangeSaveDataDetails>;\n\n  /**\n   * After data applied or range changed.\n   */\n  @Event() afteredit: EventEmitter<AfterEditEvent>;\n\n  /**\n   * Before autofill is applied.\n   * To prevent the default behavior of applying the edit data, you can call `e.preventDefault()`.\n   */\n  @Event() beforeautofill: EventEmitter<ChangedRange>;\n\n  /**\n   * Before autofill is applied. Runs before beforeautofill event.\n   * Use e.preventDefault() to prevent range.\n   */\n  @Event() beforerange: EventEmitter<ChangedRange>;\n\n  /**\n   * After focus render finished.\n   * Can be used to access a focus element through `event.target`.\n   * This is just a duplicate of `afterfocus` from `revogr-focus.tsx`.\n   */\n  @Event() afterfocus: EventEmitter<FocusAfterRenderEvent>;\n\n  /**\n   * Before the order of `rgRow` is applied.\n   * To prevent the default behavior of changing the order of `rgRow`, you can call `e.preventDefault()`.\n   */\n  @Event() roworderchanged: EventEmitter<{ from: number; to: number }>;\n\n  /**\n   * By `SortingPlugin`\n   * <br>Triggered immediately after header click.\n   * <br>First in sorting event sequence. Ff this event stops no other event called.\n   * <br>Use `e.preventDefault()` to prevent sorting.\n   */\n  @Event() beforesorting: EventEmitter<{\n    column: ColumnRegular;\n    order: 'desc' | 'asc';\n    additive: boolean;\n  }>;\n\n  /**\n   * By `SortingPlugin`\n   * <br>Same as `beforesorting` but triggered after `beforeanysource` (when source is changed).\n   * <br>Use `e.preventDefault()` to prevent sorting data change.\n   */\n  @Event() beforesourcesortingapply: EventEmitter<{\n    type: DimensionRows;\n    sorting?: SortingOrder;\n  }>;\n\n  /**\n   * By `SortingPlugin`\n   * <br> After `beforesorting`\n   * <br>Triggered after column data updated with new sorting order.\n   * <br>Use `e.preventDefault()` to prevent sorting data change.\n   */\n  @Event() beforesortingapply: EventEmitter<{\n    column: ColumnRegular;\n    order: 'desc' | 'asc';\n    additive: boolean;\n  }>;\n\n  /**\n   * This event is triggered when the row order change is started.\n   * To prevent the default behavior of changing the row order, you can call `e.preventDefault()`.\n   * To change the item name at the start of the row order change, you can set `e.text` to the desired new name.\n   */\n  @Event() rowdragstart: EventEmitter<RowDragStartDetails>;\n\n  /**\n   * On header click.\n   */\n  @Event() headerclick: EventEmitter<ColumnRegular>;\n\n  /**\n   * Before the cell focus is changed.\n   * To prevent the default behavior of changing the cell focus, you can call `e.preventDefault()`.\n   */\n  @Event() beforecellfocus: EventEmitter<BeforeSaveDataDetails>;\n\n  /**\n   * Before the grid focus is lost.\n   * To prevent the default behavior of changing the cell focus, you can call `e.preventDefault()`.\n   */\n  @Event() beforefocuslost: EventEmitter<FocusedData | null>;\n\n  /**\n   * Before main source/rows data apply.\n   * You can override data source here\n   */\n  @Event() beforesourceset: EventEmitter<{\n    type: DimensionRows;\n    source: DataType[];\n  }>;\n\n  /**\n   * Before data apply on any source type. Can be source from pinned and main viewport.\n   * You can override data source here\n   */\n  @Event() beforeanysource: EventEmitter<{\n    type: DimensionRows;\n    source: DataType[];\n  }>;\n\n  /**\n   * After main source/rows updated\n   */\n  @Event() aftersourceset: EventEmitter<{\n    type: DimensionRows;\n    source: DataType[];\n  }>;\n\n  /**\n   * Emitted after each source update, whether from the pinned or main viewport.\n   * Useful for tracking all changes originating from sources in both the pinned and main viewports.\n   */\n  @Event() afteranysource: EventEmitter<{\n    type: DimensionRows;\n    source: DataType[];\n  }>;\n\n  /**\n   * Emitted before a column update is applied.\n   * Listeners can use this event to perform any necessary actions or modifications before the column update is finalized.\n   */\n  @Event() beforecolumnsset: EventEmitter<ColumnCollection>;\n\n  /**\n   * Emitted before a column update is applied, after the column set is gathered and the viewport is updated.\n   * Useful for performing actions or modifications before the final application of the column update.\n   */\n  @Event() beforecolumnapplied: EventEmitter<ColumnCollection>;\n\n  /**  Column updated */\n  @Event() aftercolumnsset: EventEmitter<{\n    columns: ColumnCollection;\n    order: SortingOrder;\n  }>;\n\n  /**\n   * Emitted before applying a filter to the data source.\n   * Use e.preventDefault() to prevent cell focus change.\n   * Modify if you need to change filters.\n   */\n  @Event() beforefilterapply: EventEmitter<{ collection: Record<ColumnProp, FilterCollectionItem> }>;\n\n  /**\n   * Emitted before applying a filter to the data source.\n   * Use e.preventDefault() to prevent the default behavior of trimming values and applying the filter.\n   * Modify the `collection` property if you want to change the filters.\n   * Modify the `itemsToFilter` property if you want to filter the indexes for trimming.\n   */\n  @Event() beforefiltertrimmed: EventEmitter<{\n    collection: Record<ColumnProp, FilterCollectionItem>;\n    itemsToFilter: Record<number, boolean>;\n  }>;\n\n  /**\n   * Emitted before trimming values.\n   * Use e.preventDefault() to prevent the default behavior of trimming values.\n   * Modify the `trimmed` property if you want to filter the indexes for trimming.\n   */\n  @Event() beforetrimmed: EventEmitter<{\n    trimmed: Record<number, boolean>;\n    trimmedType: string;\n    type: string;\n  }>;\n\n  /**\n   * Emitted after trimmed values have been applied.\n   * Useful for notifying when trimming of values has taken place.\n   */\n  @Event() aftertrimmed: EventEmitter;\n\n  /**\n   * Emitted when the viewport is scrolled.\n   * Useful for tracking viewport scrolling events.\n   */\n  @Event() viewportscroll: EventEmitter<ViewPortScrollEvent>;\n\n  /**\n   * Before export\n   * Use e.preventDefault() to prevent export\n   * Replace data in Event in case you want to modify it in export\n   */\n  @Event() beforeexport: EventEmitter<DataInput>;\n\n  /**\n   * Emitted before editing starts.\n   * Use e.preventDefault() to prevent the default edit behavior.\n   */\n  @Event() beforeeditstart: EventEmitter<BeforeSaveDataDetails>;\n\n  /**\n   * Emitted after column resizing.\n   * Useful for retrieving the resized columns.\n   */\n  @Event() aftercolumnresize: EventEmitter<{\n    [index: number]: ColumnRegular;\n  }>;\n\n  /**\n   * Emitted before the row definition is applied.\n   * Useful for modifying or preventing the default row definition behavior.\n   */\n  @Event() beforerowdefinition: EventEmitter<{ vals: any; oldVals: any }>;\n\n  /**\n   * Emitted when the filter configuration is changed\n   */\n  @Event() filterconfigchanged: EventEmitter;\n\n  /**\n   * Emitted when the sorting configuration is changed\n   * SortingPlugin subsribed to this event\n   */\n  @Event() sortingconfigchanged: EventEmitter<SortingConfig>;\n\n  /**\n   * Emmited when the row headers are changed.\n   */\n  @Event() rowheaderschanged: EventEmitter;\n\n  /**\n   * Emmited before the grid is rendered.\n   */\n  @Event() beforegridrender: EventEmitter;\n\n\n  /**\n   * Emmited after the grid is rendered.\n   */\n  @Event() aftergridrender: EventEmitter;\n\n  /**\n   * Emmited after the grid is initialized. Connected to the DOM.\n   */\n  @Event() aftergridinit: EventEmitter;\n\n  /**\n   * Emmited after the additional data is changed\n   */\n  @Event() additionaldatachanged: EventEmitter<any>;\n\n  /**\n   * Emmited after the theme is changed\n   */\n  @Event() afterthemechanged: EventEmitter<Theme>;\n\n\n  /**\n   * Emmited after grid created\n   */\n  @Event() created: EventEmitter;\n\n  // #endregion\n\n  // #region Methods\n  /**\n   * Refreshes data viewport.\n   * Can be specific part as rgRow or pinned rgRow or 'all' by default.\n   */\n  @Method() async refresh(type: DimensionRows | 'all' = 'all') {\n    if (!this.dataProvider) {\n      throw new Error('Not connected');\n    }\n    this.dataProvider.refresh(type);\n  }\n\n  /**\n   * Refreshes data at specified cell.\n   * Useful for performance optimization.\n   * No viewport update will be triggered.\n   * \n   * @example\n   * const grid = document.querySelector('revo-grid');\n   * grid.setDataAt({ row: 0, col: 0, val: 'test' }); // refresh\n   */\n  @Method() async setDataAt(\n    { row, col, colType = 'rgCol', rowType = 'rgRow', val, skipDataUpdate = false }: {\n      row: number; // virtual\n      col: number; // virtual\n      val?: any;\n      skipDataUpdate?: boolean;\n    } & AllDimensionType,\n  ) {\n    if (this.dataProvider && this.columnProvider && !skipDataUpdate) {\n      const columnProp = this.columnProvider.getColumn(col, colType)?.prop;\n      if (typeof columnProp !== 'undefined') {\n        this.dataProvider.setCellData({\n          type: rowType,\n          rowIndex: row,\n          prop: columnProp,\n          val,\n        }, false);\n      }\n    }\n    const dataElement: HTMLRevogrDataElement | null =\n      this.element.querySelector(\n        `revogr-data[type=\"${rowType}\"][col-type=\"${colType}\"]`,\n      );\n    return dataElement?.updateCell({\n      row,\n      col,\n    });\n  }\n\n  /**\n   * Scrolls viewport to specified row by index.\n   */\n  @Method() async scrollToRow(coordinate = 0) {\n    if (!this.dimensionProvider) {\n      throw new Error('Not connected');\n    }\n    const y = this.dimensionProvider.getViewPortPos({\n      coordinate,\n      dimension: 'rgRow',\n    });\n    await this.scrollToCoordinate({ y });\n  }\n\n  /**\n   * Scrolls viewport to specified column by index.\n   */\n  @Method() async scrollToColumnIndex(coordinate = 0) {\n    if (!this.dimensionProvider) {\n      throw new Error('Not connected');\n    }\n    const x = this.dimensionProvider.getViewPortPos({\n      coordinate,\n      dimension: 'rgCol',\n    });\n    await this.scrollToCoordinate({ x });\n  }\n\n  /**\n   * Scrolls viewport to specified column by prop\n   */\n  @Method() async scrollToColumnProp(\n    prop: ColumnProp,\n    dimension: DimensionTypeCol = 'rgCol',\n  ) {\n    if (!this.dimensionProvider || !this.columnProvider) {\n      throw new Error('Not connected');\n    }\n\n    const coordinate = this.columnProvider.getColumnIndexByProp(\n      prop,\n      dimension,\n    );\n    if (coordinate < 0) {\n      // already on the screen\n      return;\n    }\n    const x = this.dimensionProvider.getViewPortPos({\n      coordinate,\n      dimension,\n    });\n    await this.scrollToCoordinate({ x });\n  }\n\n  /** Update columns */\n  @Method() async updateColumns(cols: ColumnRegular[]) {\n    this.columnProvider?.updateColumns(cols);\n  }\n\n  /** Add trimmed by type */\n  @Method() async addTrimmed(\n    trimmed: Record<number, boolean>,\n    trimmedType = 'external',\n    type: DimensionRows = 'rgRow',\n  ) {\n    if (!this.dataProvider) {\n      throw new Error('Not connected');\n    }\n    const event = this.beforetrimmed.emit({\n      trimmed,\n      trimmedType,\n      type,\n    });\n    if (event.defaultPrevented) {\n      return event;\n    }\n    this.dataProvider.setTrimmed({ [trimmedType]: event.detail.trimmed }, type);\n    this.aftertrimmed.emit();\n    return event;\n  }\n\n  /**  Scrolls view port to coordinate */\n  @Method() async scrollToCoordinate(cell: Partial<Cell>) {\n    this.viewport?.scrollToCell(cell);\n  }\n\n  /**  Open editor for cell. */\n  @Method() async setCellEdit(\n    rgRow: number,\n    prop: ColumnProp,\n    rowSource: DimensionRows = 'rgRow',\n  ) {\n    const rgCol = getColumnByProp(this.columns, prop);\n    if (!rgCol) {\n      return;\n    }\n    await timeout();\n    const colGroup = rgCol.pin || 'rgCol';\n    if (!this.columnProvider) {\n      throw new Error('Not connected');\n    }\n    this.viewport?.setEdit(\n      rgRow,\n      this.columnProvider.getColumnIndexByProp(prop, colGroup),\n      colGroup,\n      rowSource,\n    );\n  }\n\n  /**  Set focus range. */\n  @Method() async setCellsFocus(\n    cellStart: Cell = { x: 0, y: 0 },\n    cellEnd: Cell = { x: 0, y: 0 },\n    colType = 'rgCol',\n    rowType = 'rgRow',\n  ) {\n    this.viewport?.setFocus(colType, rowType, cellStart, cellEnd);\n  }\n\n  /**  Get data from source */\n  @Method() async getSource(type: DimensionRows = 'rgRow') {\n    if (!this.dataProvider) {\n      throw new Error('Not connected');\n    }\n    return this.dataProvider.stores[type].store.get('source');\n  }\n\n  /**\n   * Get data from visible part of source\n   * Trimmed/filtered rows will be excluded\n   * @param type - type of source\n   */\n  @Method() async getVisibleSource(type: DimensionRows = 'rgRow') {\n    if (!this.dataProvider) {\n      throw new Error('Not connected');\n    }\n    return getVisibleSourceItem(this.dataProvider.stores[type].store);\n  }\n\n  /**\n   * Provides access to rows internal store observer\n   * Can be used for plugin support\n   * @param type - type of source\n   */\n  @Method() async getSourceStore(\n    type: DimensionRows = 'rgRow',\n  ): Promise<Observable<DSourceState<DataType, DimensionRows>>> {\n    if (!this.dataProvider) {\n      throw new Error('Not connected');\n    }\n    return this.dataProvider.stores[type].store;\n  }\n  /**\n   * Provides access to column internal store observer\n   * Can be used for plugin support\n   * @param type - type of column\n   */\n  @Method() async getColumnStore(\n    type: DimensionCols = 'rgCol',\n  ): Promise<Observable<DSourceState<ColumnRegular, DimensionCols>>> {\n    if (!this.columnProvider) {\n      throw new Error('Not connected');\n    }\n    return this.columnProvider.stores[type].store;\n  }\n\n  /**\n   * Update column sorting\n   * @param column - column prop and cellCompare\n   * @param order - order to apply\n   * @param additive - if false will replace current order\n   * \n   * later passed to SortingPlugin\n   */\n  @Method() async updateColumnSorting(\n    column: Pick<ColumnRegular, 'prop' | 'cellCompare'>,\n    order: 'asc' | 'desc' | undefined,\n    additive: boolean,\n  ) {\n    this.sortingconfigchanged.emit({\n      columns: [{\n        prop: column.prop,\n        order,\n        cellCompare: column.cellCompare,\n      }],\n      additive,\n    });\n  }\n\n  /**\n   * Clears column sorting\n   */\n  @Method() async clearSorting() {\n    this.sortingconfigchanged.emit({\n      columns: [],\n    });\n  }\n\n  /**\n   * Receive all columns in data source\n   */\n  @Method() async getColumns(): Promise<ColumnRegular[]> {\n    if (!this.columnProvider) {\n      throw new Error('Not connected');\n    }\n    return this.columnProvider.getColumns();\n  }\n\n  /**\n   * Clear current grid focus. Grid has no longer focus on it.\n   */\n  @Method() async clearFocus() {\n    const focused = this.viewport?.getFocused();\n    const event = this.beforefocuslost.emit(focused);\n    if (event.defaultPrevented) {\n      return;\n    }\n    this.selectionStoreConnector?.clearAll();\n  }\n\n  /**\n   * Get all active plugins instances\n   */\n  @Method() async getPlugins(): Promise<PluginBaseComponent[]> {\n    return this.pluginService.get();\n  }\n\n  /**\n   * Get the currently focused cell.\n   */\n  @Method() async getFocused(): Promise<FocusedData | null> {\n    return this.viewport?.getFocused() ?? null;\n  }\n\n  /**\n   * Get size of content\n   * Including all pinned data\n   */\n  @Method() async getContentSize(): Promise<Cell> {\n    if (!this.dimensionProvider) {\n      throw new Error('Not connected');\n    }\n    return this.dimensionProvider?.getFullSize();\n  }\n  /**\n   * Get the currently selected Range.\n   */\n  @Method() async getSelectedRange(): Promise<RangeArea & AllDimensionType | null> {\n    return this.viewport?.getSelectedRange() ?? null;\n  }\n\n  /**\n   * Refresh extra elements. Triggers re-rendering of extra elements and functions.\n   * Part of extraElements and registerVNode methods.\n   * Useful for plugins.\n   */\n  @Method() async refreshExtraElements() {\n    this.extraService?.refresh();\n  }\n\n  /**\n   * Get all providers for grid\n   * Useful for external grid integration\n   */\n  @Method() async getProviders() {\n    return this.getPluginData();\n  }\n\n  // #endregion\n\n  // #region Listeners outside scope\n  private clickTrackForFocusClear?: number;\n  @Listen('touchstart', { target: 'document' })\n  @Listen('mousedown', { target: 'document' })\n  mousedownHandle(event: MouseEvent | TouchEvent) {\n    const screenX = getPropertyFromEvent(event, 'screenX');\n    const screenY = getPropertyFromEvent(event, 'screenY');\n    if (screenX === null || screenY === null) {\n      return;\n    }\n\n    this.clickTrackForFocusClear = screenX + screenY;\n  }\n  /**\n   * To keep your elements from losing focus use mouseup/touchend e.preventDefault();\n   */\n  @Listen('touchend', { target: 'document' })\n  @Listen('mouseup', { target: 'document' })\n  async mouseupHandle(event: MouseEvent | TouchEvent) {\n    const screenX = getPropertyFromEvent(event, 'screenX');\n    const screenY = getPropertyFromEvent(event, 'screenY');\n    if (screenX === null || screenY === null) {\n      return;\n    }\n\n    if (event.defaultPrevented) {\n      return;\n    }\n    const pos = screenX + screenY;\n    // detect if mousemove then do nothing\n    if (Math.abs((this.clickTrackForFocusClear ?? 0) - pos) > 10) {\n      return;\n    }\n\n    // Check if action finished inside the document\n    // if event prevented, or it is current table don't clear focus\n    const path = event.composedPath();\n    if (!path.includes(this.element) &&\n        !(this.element.shadowRoot && path.includes(this.element.shadowRoot))\n      ) {\n      // Perform actions if the click is outside the component\n      await this.clearFocus();\n    }\n  }\n  // #endregion\n\n  // #region Listeners\n  /** Drag events */\n  @Listen('rowdragstartinit') onRowDragStarted(\n    e: CustomEvent<HTMLRevogrOrderEditorElementEventMap['rowdragstartinit']>,\n  ) {\n    const dragStart = this.rowdragstart.emit(e.detail);\n    if (dragStart.defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    this.orderService?.start(this.element, {\n      ...e.detail,\n      ...dragStart.detail,\n    });\n  }\n\n  @Listen('rowdragendinit') onRowDragEnd() {\n    this.orderService?.end();\n  }\n\n  @Listen('roworderchange') onRowOrderChange(e: CustomEvent<HTMLRevogrOrderEditorElementEventMap['roworderchange']>) {\n    this.dataProvider?.changeOrder(e.detail);\n  }\n\n  @Listen('rowdragmoveinit') onRowDrag({ detail }: CustomEvent<PositionItem>) {\n    this.orderService?.move(detail);\n  }\n\n  @Listen('rowdragmousemove') onRowMouseMove(e: CustomEvent<Cell>) {\n    this.orderService?.moveTip(e.detail);\n  }\n\n  @Listen('celleditapply') async onCellEdit(\n    e: CustomEvent<BeforeSaveDataDetails>,\n  ) {\n    const { defaultPrevented, detail } = this.beforeedit.emit(e.detail);\n    await timeout();\n    // apply data\n    if (!defaultPrevented) {\n      this.dataProvider?.setCellData(detail);\n\n      // @feature: incrimental update for cells\n      // this.dataProvider.setCellData(detail, false);\n      // await this.setDataAt({\n      //   row: detail.rowIndex,\n      //   col: detail.colIndex,\n      //   rowType: detail.type,\n      //   colType: detail.colType,\n      // });\n      this.afteredit.emit(detail);\n    }\n  }\n\n  @Listen('rangeeditapply') onRangeEdit(\n    e: CustomEvent<HTMLRevogrOverlaySelectionElementEventMap['rangeeditapply']>,\n  ) {\n    if (!this.dataProvider) {\n      throw new Error('Not connected');\n    }\n    const { defaultPrevented, detail } = this.beforerangeedit.emit(e.detail);\n    if (defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    this.dataProvider.setRangeData(detail.data, detail.type);\n    this.afteredit.emit(detail);\n  }\n\n  @Listen('selectionchangeinit') onRangeChanged(\n    e: CustomEvent<HTMLRevogrOverlaySelectionElementEventMap['selectionchangeinit']>) {\n    const beforeange = this.beforerange.emit(e.detail);\n    if (beforeange.defaultPrevented) {\n      e.preventDefault();\n    }\n    const beforeFill = this.beforeautofill.emit(beforeange.detail);\n    if (beforeFill.defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  @Listen('rowdropinit') onRowDropped(\n    e: CustomEvent<{ from: number; to: number }>,\n  ) {\n    // e.cancelBubble = true;\n    const { defaultPrevented } = this.roworderchanged.emit(e.detail);\n    if (defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  @Listen('beforeheaderclick') onHeaderClick(\n    e: CustomEvent<InitialHeaderClick>,\n  ) {\n    const { defaultPrevented } = this.headerclick.emit({\n      ...e.detail.column,\n      originalEvent: e.detail.originalEvent,\n    });\n    if (defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  @Listen('beforecellfocusinit') onCellFocus(\n    e: CustomEvent<BeforeSaveDataDetails>,\n  ) {\n    const { defaultPrevented } = this.beforecellfocus.emit(e.detail);\n    if (!this.canFocus || defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  // #endregion\n\n  // #region Private Properties\n  @Element() element: HTMLRevoGridElement;\n  extraElements: HTMLRevogrExtraElement['nodes'] = [];\n  /** \n   * Service for rendering extra elements as virtual nodes\n   * Part of extraElements and registerVNode methods\n   */\n  extraService?: HTMLRevogrExtraElement;\n\n  columnProvider?: ColumnDataProvider;\n  dataProvider?: DataProvider;\n  dimensionProvider?: DimensionProvider;\n  viewportProvider?: ViewportProvider;\n  themeService: ThemeService;\n  pluginService = new PluginService();\n  viewport: ViewportService | null = null;\n  isInited = false;\n\n  orderService: OrdererService;\n  selectionStoreConnector?: SelectionStoreConnector;\n  scrollingService: GridScrollingService;\n\n  // #endregion\n\n  // #region Watchers\n  @Watch('columnTypes') columnTypesChanged() {\n    // Column format change will trigger column structure update\n    this.columnChanged(this.columns);\n  }\n\n  @Watch('columns') columnChanged(\n    newVal: (ColumnGrouping | ColumnRegular)[] = [],\n    _prevVal: (ColumnGrouping | ColumnRegular)[] | undefined = undefined,\n    __watchName: string = 'columns',\n    init = false,\n  ) {\n    if (!this.dimensionProvider || !this.columnProvider) {\n      return;\n    }\n    const columnGather = getColumns(\n      newVal,\n      0,\n      this.columnTypes,\n    );\n    const beforeSetEvent = this.beforecolumnsset.emit(columnGather);\n    if (beforeSetEvent.defaultPrevented) {\n      return;\n    }\n    this.dimensionProvider.applyNewColumns(\n      beforeSetEvent.detail.columns,\n      this.disableVirtualX,\n      init,\n    );\n    const beforeApplyEvent = this.beforecolumnapplied.emit(columnGather);\n    if (beforeApplyEvent.defaultPrevented) {\n      return;\n    }\n    const columns = this.columnProvider.setColumns(beforeApplyEvent.detail);\n    this.aftercolumnsset.emit({\n      columns,\n      order: Object.entries(beforeApplyEvent.detail.sort).reduce((acc: SortingOrder, [prop, column]) => {\n        acc[prop] = column.order;\n        return acc;\n      }, {}),\n    });\n  }\n\n  @Watch('disableVirtualX') disableVirtualXChanged(\n    newVal = false,\n    prevVal = false,\n  ) {\n    if (newVal === prevVal) {\n      return;\n    }\n    this.columnChanged(this.columns);\n  }\n\n  @Watch('rowSize') rowSizeChanged(s: number) {\n    if (!this.dimensionProvider) {\n      return;\n    }\n    // clear existing data\n    this.dimensionProvider.setSettings({ originItemSize: s }, 'rgRow');\n    this.rowDefChanged(this.rowDefinitions, this.rowDefinitions, 'rowSize', true);\n  }\n\n  @Watch('theme') themeChanged(\n    t: Theme,\n    _?: Theme,\n    __ = 'theme',\n    init = false,\n  ) {\n    if (!this.dimensionProvider) {\n      return;\n    }\n    this.themeService.register(t);\n    this.dimensionProvider.setSettings(\n      { originItemSize: this.themeService.rowSize },\n      'rgRow',\n    );\n    this.dimensionProvider.setSettings(\n      { originItemSize: this.colSize },\n      'rgCol',\n    );\n    // if theme change we need to reapply row size and reset viewport\n    if (!init) {\n      // clear existing data\n      this.dimensionProvider.setSettings(\n        { originItemSize: this.themeService.rowSize },\n        'rgRow',\n      );\n      this.rowDefChanged(\n        // for cases when some custom size present and not\n        this.rowDefinitions,\n        this.rowDefinitions,\n        'theme',\n        true,\n      );\n    }\n    this.afterthemechanged.emit(t);\n  }\n\n  @Watch('source')\n  @Watch('pinnedBottomSource')\n  @Watch('pinnedTopSource')\n  dataSourceChanged<T extends DataType>(\n    newVal: T[] = [],\n    _: T[] | undefined,\n    watchName: string,\n  ) {\n    if (!this.dataProvider) {\n      return;\n    }\n    let type: DimensionRows = 'rgRow';\n    switch (watchName) {\n      case 'pinnedBottomSource':\n        type = 'rowPinEnd';\n        break;\n      case 'pinnedTopSource':\n        type = 'rowPinStart';\n        break;\n      case 'source':\n        type = 'rgRow';\n        /**\n         * Applied for source only for cross compatability between plugins\n         */\n        const beforesourceset = this.beforesourceset.emit({\n          type,\n          source: newVal,\n        });\n        newVal = beforesourceset.detail.source as T[];\n        break;\n    }\n    const beforesourceset = this.beforeanysource.emit({\n      type,\n      source: newVal,\n    });\n    const newSource = [...beforesourceset.detail.source];\n    this.dataProvider.setData(newSource, type, this.disableVirtualY);\n\n    /** \n     * Applied for source only for cross compatability between plugins\n     */\n    if (watchName === 'source') {\n      this.aftersourceset.emit({\n        type,\n        source: newVal,\n      });\n    }\n    this.afteranysource.emit({\n      type,\n      source: newVal,\n    });\n  }\n\n  @Watch('disableVirtualY') disableVirtualYChanged(\n    newVal = false,\n    prevVal = false,\n  ) {\n    if (newVal === prevVal) {\n      return;\n    }\n    this.dataSourceChanged(this.source, this.source, 'source');\n  }\n\n  @Watch('rowDefinitions') rowDefChanged(\n    after: RowDefinition[],\n    before?: RowDefinition[],\n    _watchName?: string,\n    forceUpdate = true,\n  ) {\n    // in firefox it's triggered before init\n    if (!this.dimensionProvider || !this.dataProvider) {\n      return;\n    }\n    const {\n      detail: { vals: newVal, oldVals: oldVal },\n    } = this.beforerowdefinition.emit({\n      vals: after,\n      oldVals: before,\n    });\n    // apply new values\n    const newRows = rowDefinitionByType(newVal);\n    // clear current defs\n    if (oldVal) {\n      const remove = rowDefinitionRemoveByType(oldVal);\n      // clear all old data and drop sizes\n      for (const t in remove) {\n        if (remove.hasOwnProperty(t)) {\n          const type = t as DimensionRows;\n          const store = this.dataProvider.stores[type];\n          const sourceLength = store.store.get('source').length;\n          this.dimensionProvider.clearSize(type, sourceLength);\n        }\n      }\n    }\n    // set new sizes\n    rowTypes.forEach((t) => {\n      const newSizes = newRows[t];\n      // apply new sizes or force update\n      if (newSizes || forceUpdate) {\n        this.dimensionProvider?.setCustomSizes(t, newSizes?.sizes || {});\n      }\n    });\n  }\n\n  @Watch('trimmedRows') trimmedRowsChanged(\n    newVal: Record<number, boolean> = {},\n  ) {\n    this.addTrimmed(newVal);\n  }\n  /**\n   * Grouping\n   */\n  @Watch('grouping') groupingChanged(newVal: GroupingOptions = {}) {\n    this.pluginService.getByClass(GroupingRowPlugin)?.setGrouping(newVal || {});\n  }\n  /**\n   * Stretch Plugin Apply\n   */\n  @Watch('stretch') applyStretch(isStretch: boolean | string) {\n    if (!this.dimensionProvider || !this.dataProvider || !this.columnProvider || !this.viewportProvider) {\n      return;\n    }\n    if (isStretch === 'false') {\n      isStretch = false;\n    }\n\n    const pluginData = this.getPluginData();\n    if (!pluginData) {\n      return;\n    }\n    const stretch = this.pluginService.getByClass(StretchColumn);\n    if ((typeof isStretch === 'boolean' && isStretch) || isStretch === 'true') {\n      if (!stretch) {\n        this.pluginService.add(new StretchColumn(this.element, pluginData));\n      } else if (isStretchPlugin(stretch)) {\n        stretch.applyStretch(this.columnProvider.getRawColumns());\n      }\n    } else if (stretch) {\n      this.pluginService.remove(stretch);\n    }\n  }\n\n  @Watch('filter') applyFilter(cfg: boolean | ColumnFilterConfig) {\n    this.filterconfigchanged.emit(cfg);\n  }\n\n  @Watch('sorting') applySorting(cfg?: SortingConfig) {\n    this.sortingconfigchanged.emit(cfg);\n  }\n\n  @Watch('rowHeaders') rowHeadersChange(rowHeaders?: RowHeaders | boolean) {\n    this.rowheaderschanged.emit(rowHeaders);\n  }\n\n  /**\n   * Register external VNodes\n   */\n  @Watch('registerVNode') registerOutsideVNodes(elements: HTMLRevogrExtraElement['nodes'] = []) {\n    this.extraElements = elements;\n  }\n\n  @Watch('additionalData') additionalDataChanged(data: any) {\n    this.additionaldatachanged.emit(data);\n  }\n\n  /**\n   * User can add plugins via plugins property\n   */\n  @Watch('plugins') pluginsChanged(plugins: GridPlugin[] = [], prevPlugins?: GridPlugin[]) {\n    this.pluginService.addUserPluginsAndCreate(this.element, plugins, prevPlugins, this.getPluginData());\n \n  }\n  // #endregion\n\n  // #region Plugins\n  private setPlugins() {\n    // remove old plugins if any\n    this.removePlugins();\n    // pass data provider to plugins\n    const pluginData = this.getPluginData();\n    if (!pluginData) {\n      return;\n    }\n\n    // register system plugins\n    this.setCorePlugins(pluginData);\n    // register user plugins\n    this.pluginsChanged(this.plugins);\n  }\n  \n  private setCorePlugins(pluginData: PluginProviders) {\n    if (this.accessible) {\n      this.pluginService.add(new WCAGPlugin(this.element, pluginData));\n    }\n\n    // register auto size plugin\n    if (this.autoSizeColumn) {\n      this.pluginService.add(new AutoSizeColumnPlugin(\n        this.element,\n        pluginData,\n        typeof this.autoSizeColumn === 'object'\n          ? this.autoSizeColumn\n          : undefined,\n      ));\n    }\n\n    // register filter plugin\n    if (this.filter) {\n      this.pluginService.add(\n        new FilterPlugin(\n          this.element,\n          pluginData,\n          typeof this.filter === 'object' ? this.filter : undefined,\n        ),\n      );\n    }\n\n    // register export plugin\n    if (this.exporting) {\n      this.pluginService.add(new ExportFilePlugin(this.element, pluginData));\n    }\n\n    // register sorting plugin\n    this.pluginService.add(new SortingPlugin(this.element, pluginData));\n\n    // register grouping plugin\n    this.pluginService.add(new GroupingRowPlugin(this.element, pluginData));\n    if (this.canMoveColumns) {\n      this.pluginService.add(new ColumnMovePlugin(this.element, pluginData));\n    }\n  }\n\n  getPluginData(): PluginProviders | undefined {\n    if (!this.dimensionProvider || !this.dataProvider || !this.columnProvider || !this.viewportProvider || !this.selectionStoreConnector) {\n      return;\n    }\n\n    // pass data provider to plugins\n    const pluginData: PluginProviders = {\n      data: this.dataProvider,\n      column: this.columnProvider,\n      dimension: this.dimensionProvider,\n      viewport: this.viewportProvider,\n      selection: this.selectionStoreConnector,\n      plugins: this.pluginService,\n    };\n\n    return pluginData;\n  }\n\n  private removePlugins() {\n    this.pluginService.destroy();\n  }\n  // #endregion\n\n\n  // if reconnect to dom we need to set up plugins\n  connectedCallback() {\n    if (this.isInited) {\n      this.setPlugins();\n    }\n    this.created.emit();\n  }\n\n  /**\n   * Called once just after the component is first connected to the DOM.\n   * Since this method is only called once, it's a good place to load data asynchronously and to setup the state\n   * without triggering extra re-renders.\n   * A promise can be returned, that can be used to wait for the first render().\n   */\n  componentWillLoad() {\n    // #region Setup Providers\n    this.viewportProvider = new ViewportProvider();\n    this.themeService = new ThemeService({\n      rowSize: this.rowSize,\n    });\n    this.dimensionProvider = new DimensionProvider(this.viewportProvider, {\n      realSizeChanged: (k: MultiDimensionType) =>\n        this.contentsizechanged.emit(k),\n    });\n    this.columnProvider = new ColumnDataProvider();\n    this.selectionStoreConnector = new SelectionStoreConnector();\n    this.dataProvider = new DataProvider(this.dimensionProvider);\n    // #endregion\n\n    this.registerOutsideVNodes(this.registerVNode);\n\n    // init plugins\n    this.setPlugins();\n\n    // set data\n    this.applyStretch(this.stretch);\n    this.themeChanged(this.theme, undefined, undefined, true);\n    this.columnChanged(this.columns, undefined, undefined, true);\n    this.dataSourceChanged(this.source, undefined, 'source');\n    this.dataSourceChanged(this.pinnedTopSource, undefined, 'pinnedTopSource');\n    this.dataSourceChanged(\n      this.pinnedBottomSource,\n      undefined,\n      'pinnedBottomSource',\n    );\n    if (Object.keys(this.trimmedRows ?? {}).length > 0) {\n      this.trimmedRowsChanged(this.trimmedRows);\n    }\n    this.rowDefChanged(this.rowDefinitions);\n\n    // init grouping\n    if (this.grouping && Object.keys(this.grouping).length > 0) {\n      this.groupingChanged(this.grouping);\n    }\n\n    // init scrolling service\n    this.scrollingService = new GridScrollingService(\n      (e: ViewPortScrollEvent) => {\n        this.dimensionProvider?.setViewPortCoordinate({\n          coordinate: e.coordinate,\n          type: e.dimension,\n        });\n        this.viewportscroll.emit(e);\n      },\n    );\n\n    this.aftergridinit.emit();\n    // set inited flag for connectedCallback\n    this.isInited = true;\n  }\n\n  componentWillRender() {\n    const event = this.beforegridrender.emit();\n    if (event.defaultPrevented) {\n      return false;\n    }\n    return Promise.all(this.jobsBeforeRender);\n  }\n\n  componentDidRender() {\n    this.aftergridrender.emit();\n  }\n\n  render() {\n    if (!this.dimensionProvider || !this.dataProvider || !this.columnProvider || !this.viewportProvider || !this.selectionStoreConnector) {\n      return;\n    }\n    const contentHeight =\n      this.dimensionProvider.stores['rgRow'].store.get('realSize');\n\n    // init viewport service helpers\n    this.viewport = new ViewportService(\n      {\n        columnProvider: this.columnProvider,\n        dataProvider: this.dataProvider,\n        dimensionProvider: this.dimensionProvider,\n        viewportProvider: this.viewportProvider,\n        scrollingService: this.scrollingService,\n        orderService: this.orderService,\n        selectionStoreConnector: this.selectionStoreConnector,\n        disableVirtualX: this.disableVirtualX,\n        disableVirtualY: this.disableVirtualY,\n        resize: c => this.aftercolumnresize.emit(c),\n      },\n      contentHeight,\n    );\n\n    // #region ViewportSections\n    /**\n     * The code renders a viewport divided into sections.\n     * It starts by rendering the pinned start, data, and pinned end sections.\n     * Within each section, it renders columns along with their headers, pinned top, center data, and pinned bottom.\n     * The code iterates over the columns and their data to generate the view port's HTML structure.\n     */\n\n    const viewportSections: (VNode | VNode[])[] = [];\n\n    // Row headers setting\n    if (this.rowHeaders && this.viewport.columns.length) {\n      const anyView = this.viewport.columns[0];\n      viewportSections.push(\n        <revogr-row-headers\n          additionalData={this.additionalData}\n          height={contentHeight}\n          rowClass={this.rowClass}\n          resize={this.resize}\n          dataPorts={anyView.dataPorts}\n          headerProp={anyView.headerProp}\n          jobsBeforeRender={this.jobsBeforeRender}\n          rowHeaderColumn={\n            typeof this.rowHeaders === 'object' ? this.rowHeaders : undefined\n          }\n          onScrollview={({ detail: e }: CustomEvent) =>\n            this.scrollingService.proxyScroll(e, 'headerRow')\n          }\n          onRef={({ detail: e }: CustomEvent) =>\n            this.scrollingService.registerElement(e, 'headerRow')\n          }\n        />,\n      );\n    }\n\n    // Viewport section render\n    const isMobile = isMobileDevice();\n    const viewPortHtml: VNode[] = [];\n\n    // Render viewports column(horizontal sections)\n    for (let view of this.viewport.columns) {\n      const headerProperties: HeaderProperties = {\n        ...view.headerProp,\n        type: view.type,\n        additionalData: this.additionalData,\n        viewportCol: view.viewportCol,\n        selectionStore: view.columnSelectionStore,\n        canResize: this.resize,\n        readonly: this.readonly,\n        columnFilter: !!this.filter,\n      };\n      // Column headers\n      const dataViews: VNode[] = [\n        <revogr-header {...headerProperties} slot={HEADER_SLOT} />,\n      ];\n\n      // Render viewport data (vertical sections)\n      view.dataPorts.forEach(data => {\n        const key = `${data.type}_${view.type}`;\n        const dataView = (\n          <revogr-overlay-selection\n            {...data}\n            canDrag={this.canDrag && data.canDrag}\n            isMobileDevice={isMobile}\n            onSelectall={() => this.selectionStoreConnector?.selectAll()}\n            editors={this.editors}\n            readonly={this.readonly}\n            range={this.range}\n            useClipboard={this.useClipboard}\n            applyChangesOnClose={this.applyOnClose}\n            additionalData={this.additionalData}\n            slot={data.slot}\n            onBeforenextvpfocus={(e) => this.selectionStoreConnector?.beforeNextFocusCell(e.detail)}\n            onCanceledit={() => this.selectionStoreConnector?.setEdit(false)}\n            onSetedit={({ detail }) => {\n              const event = this.beforeeditstart.emit(detail);\n              if (!event.defaultPrevented) {\n                this.selectionStoreConnector?.setEdit(detail.val);\n              }\n            }}\n          >\n            <revogr-data\n              {...data}\n              colType={view.type}\n              key={key}\n              readonly={this.readonly}\n              range={this.range}\n              rowClass={this.rowClass}\n              rowSelectionStore={data.rowSelectionStore}\n              additionalData={this.additionalData}\n              jobsBeforeRender={this.jobsBeforeRender}\n              slot={DATA_SLOT}\n            >\n              <slot name={`data-${view.type}-${data.type}`} />\n            </revogr-data>\n            <revogr-temp-range\n              selectionStore={data.selectionStore}\n              dimensionRow={data.dimensionRow}\n              dimensionCol={data.dimensionCol}\n            />\n            <revogr-focus\n              colData={data.colData}\n              dataStore={data.dataStore}\n              focusTemplate={this.focusTemplate}\n              rowType={data.type}\n              colType={view.type}\n              selectionStore={data.selectionStore}\n              dimensionRow={data.dimensionRow}\n              dimensionCol={data.dimensionCol}\n            >\n              <slot name={`focus-${view.type}-${data.type}`} />\n            </revogr-focus>\n          </revogr-overlay-selection>\n        );\n\n        dataViews.push(dataView);\n      });\n\n      // Add viewport scroll in the end\n      viewPortHtml.push(\n        <revogr-viewport-scroll\n          {...view.prop}\n          ref={el =>\n            this.scrollingService.registerElement(el, `${view.prop.key}`)\n          }\n          onScrollviewport={e =>\n            this.scrollingService.proxyScroll(e.detail, `${view.prop.key}`)\n          }\n          onScrollviewportsilent={e =>\n            this.scrollingService.scrollSilentService(\n              e.detail,\n              `${view.prop.key}`,\n            )\n          }\n        >\n          {dataViews}\n        </revogr-viewport-scroll>,\n      );\n    }\n\n    viewportSections.push(viewPortHtml);\n    // #endregion\n\n    const typeRow: DimensionType = 'rgRow';\n    const typeCol: DimensionType = 'rgCol';\n\n    const viewports = this.viewportProvider.stores;\n    const dimensions = this.dimensionProvider.stores;\n\n    const verticalScroll = (\n      <revogr-scroll-virtual\n        class=\"vertical\"\n        dimension={typeRow}\n        clientSize={viewports[typeRow].store.get('clientSize')}\n        virtualSize={viewports[typeRow].store.get('virtualSize')}\n        realSize={dimensions[typeRow].store.get('realSize')}\n        ref={el => this.scrollingService.registerElement(el, 'rowScroll')}\n        onScrollvirtual={e => this.scrollingService.proxyScroll(e.detail)}\n      />\n    );\n\n    const horizontalScroll = (\n      <revogr-scroll-virtual\n          class=\"horizontal\"\n          dimension={typeCol}\n          clientSize={viewports[typeCol].store.get('clientSize')}\n          virtualSize={viewports[typeCol].store.get('virtualSize')}\n          realSize={dimensions[typeCol].store.get('realSize')}\n          ref={el => this.scrollingService.registerElement(el, 'colScroll')}\n          onScrollvirtual={e => this.scrollingService.proxyScroll(e.detail)}\n        />\n    );\n\n    return (\n      <Host>\n        {this.hideAttribution ? null : (\n          <revogr-attribution class=\"attribution\" />\n        )}\n        <slot name=\"header\" />\n        <div\n          class=\"main-viewport\"\n          onClick={(e: MouseEvent) => {\n            if (e.currentTarget === e.target) {\n              this.viewport?.clearEdit();\n            }\n          }}\n        >\n          <div class=\"viewports\">\n            <slot name=\"viewport\" />\n            {viewportSections}\n            {verticalScroll}\n            <OrderRenderer ref={e => (this.orderService = e)} />\n          </div>\n        </div>\n        {horizontalScroll}\n        <revogr-extra ref={el => (this.extraService = el)} nodes={this.extraElements} />\n        <slot name=\"footer\" />\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    // Remove all plugins, to avoid memory leaks\n    // and unexpected behaviour when the component is removed\n    this.removePlugins();\n  }\n}\n"],"version":3}