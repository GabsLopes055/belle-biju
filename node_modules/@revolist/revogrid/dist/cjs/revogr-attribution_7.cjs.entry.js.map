{"file":"revogr-attribution.revogr-extra.revogr-focus.revogr-overlay-selection.revogr-row-headers.revogr-scroll-virtual.revogr-temp-range.entry.cjs.js","mappings":";;;;;;;;;;;;;;;MAaa,WAAW,GAAA,MAAA;;;;IACtB,MAAM,GAAA;QACJ,QACEA,QAACC,UAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EACHD,OACE,CAAA,GAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,IAAI,EAAC,uCAAuC,EAC5C,MAAM,EAAC,QAAQ,EACf,GAAG,EAAC,qBAAqB,EACzB,KAAK,EAAC,4CAAkC,EACxC,KAAK,EAAC,OAAO,EAAA,EAAA,UAAA,CAGX,CACC;;;;MCAA,aAAa,GAAA,MAAA;AAH1B,IAAA,WAAA,CAAA,OAAA,EAAA;;AAIE;;AAEG;AACK,QAAA,IAAK,CAAA,KAAA,GAGP,EAAE;AACR;;AAEG;AACM,QAAA,IAAM,CAAA,MAAA,GAAG,CAAC;AAmCpB;AAjCC;;;AAGG;AACO,IAAA,MAAM,OAAO,GAAA;AACrB,QAAA,IAAI,CAAC,MAAM,IAAI,EAAE;;IAGnB,MAAM,GAAA;;AACJ,QAAA,OAAO,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,0CAAE,GAAG,CAAC,IAAI,IAAG;;;AAG5B,YAAA,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;gBAC9B,MAAM,MAAM,GAAiC,EAAE;gBAC/C,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,MAAM,EAAA,IAAA,EAAA,CAAA,CAAA,OAAA,CAAA,EAAA,GAAA,MAAM,CAAC,OAAO,MAAI,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,EAAA,EAAE,CAAC,CAAC;AAEpE,gBAAA,QACEA,OAAA,CAAA,cAAA,EAAA,EACE,KAAK,EAAE,QAAQ,EAAE,EACjB,GAAG,EAAE,CAAC,EAA2B,KAAI;wBACnC,IAAI,EAAE,EAAE;;AAEN,4BAAA,MAAM,CAAC,OAAO,GAAG,MAAK;AACpB,gCAAA,EAAE,CAAC,KAAK,GAAG,QAAQ,EAAE;AACvB,6BAAC;;qBAEJ,EAAA,CACD;;AAGN,YAAA,OAAO,IAAI;AACb,SAAC,CAAC;;;;ACxCU,SAAA,oBAAoB,CAClC,IAAgB,EAChB,KAAwD,EAAA;IAExD,MAAM,MAAM,GAAwB,EAAE;AACtC,IAAA,KAAK,IAAI,CAAC,IAAI,IAAI,EAAE;QAClB,MAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;QAChC,MAAM,CAAC,QAAQ,CAAC,GAAGE,+BAAa,CAAC,KAAK,EAAE,QAAQ,CAAC;;AAGnD,IAAA,OAAO,MAAM;AACf;AAEgB,SAAA,wBAAwB,CACtC,CAA0B,EAC1B,IAAe,EAAA;;AAGf,IAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE;AACtB,QAAA,OAAO,IAAI;;;IAIb,MAAM,CAAC,GAAGC,2BAAoB,CAAC,CAAC,EAAE,SAAS,CAAC;IAC5C,MAAM,CAAC,GAAGA,2BAAoB,CAAC,CAAC,EAAE,SAAS,CAAC;;IAG5C,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE;AAC5B,QAAA,OAAO,IAAI;;;AAIb,IAAA,MAAM,SAAS,GAAG,cAAc,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC;;IAEhD,IAAI,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;AACzC,QAAA,OAAO,IAAI;;AAGb,IAAA,OAAO,SAAS;AAClB;AAEA;;AAEG;AACa,SAAA,cAAc,CAC5B,EAAE,CAAC,EAAE,CAAC,EAAQ,EACd,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAA2C,EAAA;;AAG3D,IAAA,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,qBAAqB,EAAE;;AAG/D,IAAA,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG;AACnB,IAAA,IAAI,KAAK,GAAG,CAAC,GAAG,IAAI;;AAGpB,IAAA,IAAI,KAAK,IAAI,MAAM,EAAE;AACnB,QAAA,KAAK,GAAG,MAAM,GAAG,CAAC;;;AAIpB,IAAA,IAAI,KAAK,IAAI,KAAK,EAAE;AAClB,QAAA,KAAK,GAAG,KAAK,GAAG,CAAC;;;IAInB,MAAM,KAAK,GAAGC,mCAAiB,CAAC,IAAI,EAAE,KAAK,CAAC;IAC5C,MAAM,KAAK,GAAGA,mCAAiB,CAAC,IAAI,EAAE,KAAK,CAAC;;AAG5C,IAAA,IAAI,KAAK,CAAC,SAAS,GAAG,CAAC,EAAE;AACvB,QAAA,KAAK,CAAC,SAAS,GAAG,CAAC;;AAGrB,IAAA,IAAI,KAAK,CAAC,SAAS,GAAG,CAAC,EAAE;AACvB,QAAA,KAAK,CAAC,SAAS,GAAG,CAAC;;AAGrB,IAAA,OAAO,EAAE,CAAC,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,EAAE,KAAK,CAAC,SAAS,EAAE;AACnD;AAEM,SAAU,aAAa,CAC3B,KAAgB,EAChB,KAAW,EACX,OAAsB,EACtB,OAAO,GAAG,KAAK,EAAA;IAEf,MAAM,gBAAgB,GAAG,CAAC,CAAa,EAAE,GAAG,GAAG,CAAC,KAAI;AAClD,QAAA,MAAM,KAAK,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE;QACxC,MAAM,GAAG,GAAG,OAAO,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,GAAG,KAAK;AAC1D,QAAA,MAAM,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK;AAC7C,QAAA,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG;AACf,QAAA,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE;AACvB,KAAC;AAED,IAAA,IAAI,OAAO,CAAC,CAAC,EAAE;QACb,OAAO,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;;AAE5C,IAAA,IAAI,OAAO,CAAC,CAAC,EAAE;QACb,OAAO,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;;AAE5C,IAAA,OAAO,IAAI;AACb;AAEA;;;AAGG;AACG,SAAU,WAAW,CAAC,EAAE,CAAC,EAAE,CAAC,EAAQ,EAAE,QAAc,EAAA;IACxD,OAAO,CAAC,IAAI,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC;AAC3C;AAEA;SACgB,aAAa,CAAC,EAAE,CAAC,EAAE,CAAC,EAAQ,EAAA;AAC1C,IAAA,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;AACvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEM,SAAU,gBAAgB,CAAC,MAAiC,EAAA;IAChE,OAAO;AACL,QAAA,IAAI,EAAE,CAAA,EAAG,MAAM,CAAC,IAAI,CAAI,EAAA,CAAA;AACxB,QAAA,GAAG,EAAE,CAAA,EAAG,MAAM,CAAC,GAAG,CAAI,EAAA,CAAA;AACtB,QAAA,KAAK,EAAE,CAAA,EAAG,MAAM,CAAC,KAAK,CAAI,EAAA,CAAA;AAC1B,QAAA,MAAM,EAAE,CAAA,EAAG,MAAM,CAAC,MAAM,CAAI,EAAA,CAAA;KAC7B;AACH;AAEgB,SAAA,OAAO,CACrB,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAa,EAC3B,YAGC,EACD,YAGC,EAAA;IAED,MAAM,GAAG,GAAGC,gCAAc,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,KAAK;IACjD,MAAM,IAAI,GAAGA,gCAAc,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,KAAK;IAClD,MAAM,MAAM,GAAGA,gCAAc,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,GAAG;IACnD,MAAM,KAAK,GAAGA,gCAAc,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,GAAG;IAElD,OAAO;QACL,IAAI;QACJ,KAAK;QACL,GAAG;QACH,MAAM;QACN,KAAK,EAAE,KAAK,GAAG,IAAI;QACnB,MAAM,EAAE,MAAM,GAAG,GAAG;KACrB;AACH;;AC9MA,MAAM,mBAAmB,GAAG,kqMAAkqM;;MCkCjrMC,aAAW,GAAA,iBAAA,CAAA;AAJxB,IAAA,WAAA,CAAA,OAAA,EAAA;;;;;AA8BE;;AAEG;AACK,QAAA,IAAa,CAAA,aAAA,GAA6B,IAAI;AAuB9C,QAAA,IAAW,CAAA,WAAA,GAAgB,IAAI;AA2ExC;IAzEC,kBAAkB,GAAA;;QAChB,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;QACrD,IACE,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,WAAW,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,CAAC,OAAK,YAAY,aAAZ,YAAY,KAAA,MAAA,GAAA,MAAA,GAAZ,YAAY,CAAE,CAAC,CAAA;YACvC,CAAA,MAAA,IAAI,CAAC,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,CAAC,OAAK,YAAY,KAAZ,IAAA,IAAA,YAAY,uBAAZ,YAAY,CAAE,CAAC,CAAA,EACvC;YACA;;AAEF,QAAA,IAAI,CAAC,WAAW,GAAG,YAAY;AAC/B,QAAA,IAAI,YAAY,IAAI,IAAI,CAAC,EAAE,EAAE;AAC3B,YAAA,MAAM,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;AACtE,YAAA,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE;AACpC,gBAAA,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC;AACrB,oBAAA,KAAK,EAAE,SAAS;AAChB,oBAAA,MAAM,EAAE,SAAS;AAClB,iBAAA,CAAC;;AAEJ,YAAA,MAAM,KAAK,GAAGJ,+BAAa,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC;AAC3D,YAAA,MAAM,MAAM,GAAGA,+BAAa,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;AAC1D,YAAA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;gBACnB,KAAK;gBACL,MAAM;gBACN,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,QAAQ,EAAE,YAAY,CAAC,CAAC;gBACxB,QAAQ,EAAE,YAAY,CAAC,CAAC;AACzB,aAAA,CAAC;;;IAIN,MAAM,GAAA;;QACJ,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC;QAChD,IAAI,QAAQ,EAAE;YACZ;;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;QAClD,IAAI,CAAC,SAAS,EAAE;YACd;;AAEF,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;YACxC,KAAK,EACA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,SAAS,CACZ,EAAA,EAAA,EAAE,EAAE,SAAS,CAAC,CAAC,EACf,EAAE,EAAE,SAAS,CAAC,CAAC,EAChB,CAAA;YACD,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,OAAO,EAAE,IAAI,CAAC,OAAO;AACrB,YAAA,YAAY,oBAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAE;AAC5C,YAAA,YAAY,oBAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAE;AAC7C,SAAA,CAAC;AACF,QAAA,IAAI,KAAK,CAAC,gBAAgB,EAAE;AAC1B,YAAA,OAAOF,qBAAQ;;AAEjB,QAAA,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK;QAExB,MAAM,IAAI,GAAG,OAAO,CAClB,MAAM,CAAC,KAAK,EACZ,KAAK,CAAC,MAAM,CAAC,YAAY,EACzB,KAAK,CAAC,MAAM,CAAC,YAAY,CAC1B;AACD,QAAA,MAAM,MAAM,GAAG,gBAAgB,CAAC,IAAI,CAAC;AACrC,QAAA,MAAM,KAAK,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,aAAa,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,IAAA,CAAA,IAAA,EAAGA,OAAC,EAAE,MAAM,CAAC;AAC7C,QAAA,MAAM,KAAK,GAAG;AACZ,YAAA,KAAK,EAAE,EAAE,CAACO,6BAAW,GAAG,IAAI,EAAE;AAC9B,YAAA,KAAK,EAAE,MAAM;SACd;QACD,QACEP,OAAA,CAACC,UAAI,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAK,CAAA,EACbD,OAAQ,CAAA,MAAA,EAAA,IAAA,CAAA,EACP,KAAK,CACD;;;;;;ACnHb,MAAM,eAAe,GAAa;AAChC,IAAAQ,6BAAW,CAAC,GAAG;AACf,IAAAA,6BAAW,CAAC,QAAQ;AACpB,IAAAA,6BAAW,CAAC,UAAU;AACtB,IAAAA,6BAAW,CAAC,UAAU;AACtB,IAAAA,6BAAW,CAAC,WAAW;CACxB;MACY,eAAe,CAAA;AAC1B,IAAA,WAAA,CAAoB,EAAU,EAAA;QAAV,IAAE,CAAA,EAAA,GAAF,EAAE;;AAEtB,IAAA,MAAM,OAAO,CACX,CAAgB,EAChB,QAAiB,EACjB,UAAmB,EACnB,EAAE,KAAK,EAAE,KAAK,EAAgD,EAAA;;QAG9D,IAAI,UAAU,EAAE;AACd,YAAA,QAAQ,CAAC,CAAC,IAAI;gBACZ,KAAKA,6BAAW,CAAC,MAAM;AACrB,oBAAA,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;oBAChB;gBACF,KAAKA,6BAAW,CAAC,GAAG;AAClB,oBAAA,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,QAAQ,CAAC;oBACpC;;YAEJ;;;;QAMF,IAAI,KAAK,IAAIC,kBAAO,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;AAC5B,YAAA,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE;YACnB;;;QAIF,IAAI,CAAC,KAAK,EAAE;YACV;;;AAIF,QAAA,IAAIC,gBAAK,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;AACjB,YAAA,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,QAAQ,CAAC;YACpC;;;AAIF,QAAA,IAAIC,0BAAe,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;AAC1B,YAAA,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YAChB;;;AAIF,QAAA,IAAIC,iBAAM,CAAC,CAAC,CAAC,EAAE;YACb;;;AAIF,QAAA,IAAIC,gBAAK,CAAC,CAAC,CAAC,EAAE;YACZ;;;AAIF,QAAA,IAAIC,kBAAO,CAAC,CAAC,CAAC,EAAE;AACd,YAAA,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE;YACvB;;;AAIF,QAAA,IAAIC,gBAAK,CAAC,CAAC,CAAC,EAAE;YACZ,IAAI,QAAQ,EAAE;AACZ,gBAAA,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;;YAEnB;;;QAIF,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;YACrB;;;QAIF,IAAI,MAAM,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE;YAC9C;;;AAII,IAAA,SAAS,CAAC,CAAgB,EAAA;AAChC,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;AACjD,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;;AAEjD,QAAA,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE;YACpB;;QAEF,CAAC,CAAC,cAAc,EAAE;AAClB,QAAA,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE;;AAGrB,IAAA,MAAM,kBAAkB,CAAC,CAAgB,EAAE,QAAiB,EAAA;QAC1D,MAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,QAAQ,CAAC;QACjD,IAAI,CAAC,IAAI,EAAE;AACT,YAAA,OAAO,KAAK;;;;;AAMd,QAAA,MAAMC,yBAAO,CAACC,iCAAe,GAAG,EAAE,CAAC;AAEnC,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;AACjD,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;AACjD,QAAA,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;;IAGzE,iBAAiB,CACf,OAAsB,EACtB,KAAuB,EACvB,KAAkB,EAClB,OAAO,GAAG,KAAK,EAAA;AAEf,QAAA,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE;AACpB,YAAA,OAAO,KAAK;;AAEd,QAAA,MAAM,IAAI,GAAG,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC;QAC1D,IAAI,CAAC,IAAI,EAAE;AACT,YAAA,OAAO,KAAK;;QAEd,MAAM,KAAK,GAAc,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE;QAC1C,IAAI,OAAO,EAAE;AACX,YAAA,IAAI,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AACtE,gBAAA,OAAO,KAAK;;AAEd,YAAA,MAAM,KAAK,GAAGC,uBAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC;YAC5C,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC;;QAE7B,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAClB,IAAI,CAAC,KAAK,EACV,OAAO,EACP,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ;AACpC,cAAE;AACF,cAAE,aAAa,CAAC,IAAI,CAAC,KAAK;kBACtB;kBACA,CAAC,CACR;;;IAIH,kBAAkB,CAChB,CAAgB,EAChB,QAAiB,EAAA;AAEjB,QAAA,MAAM,OAAO,GAAG,QAAQ,IAAI,CAAC,CAAC,QAAQ;QACtC,IAAI,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;YACpC,CAAC,CAAC,cAAc,EAAE;;AAGpB,QAAA,IAAI,CAAC,CAAC,QAAQ,EAAE;AACd,YAAA,QAAQ,CAAC,CAAC,IAAI;gBACZ,KAAKV,6BAAW,CAAC,GAAG;AAClB,oBAAA,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;;;AAInD,QAAA,QAAQ,CAAC,CAAC,IAAI;YACZ,KAAKA,6BAAW,CAAC,QAAQ;AACvB,gBAAA,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE;YACxC,KAAKA,6BAAW,CAAC,UAAU;gBACzB,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,OAAO,EAAE;YACvC,KAAKA,6BAAW,CAAC,UAAU;AACzB,gBAAA,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE;YACxC,KAAKA,6BAAW,CAAC,GAAG;YACpB,KAAKA,6BAAW,CAAC,WAAW;gBAC1B,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,OAAO,EAAE;;;AAG5C;;MC1KY,eAAe,CAAA;AAU1B,IAAA,WAAA,CAAoB,EAAU,EAAA;QAAV,IAAE,CAAA,EAAA,GAAF,EAAE;QATd,IAAY,CAAA,YAAA,GAAwB,IAAI;QACxC,IAAe,CAAA,eAAA,GAAgB,IAAI;QACnC,IAAa,CAAA,aAAA,GAAgB,IAAI;QACjC,IAAY,CAAA,YAAA,GAAgB,IAAI;;AAQxC;;;;AAIG;AACH,IAAA,cAAc,CAAC,KAAuB,EAAE,cAAoB,EAAE,QAAQ,GAAG,KAAK,EAAA;AAC5E,QAAA,IAAI,YAAY;QAChB,IAAI,KAAK,EAAE;YACT,YAAY,GAAG,OAAO,CACpB,KAAK,EACL,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,EAC1B,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,CAC3B;;aACI;AACL,YAAA,YAAY,GAAG,OAAO,CAEf,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,cAAc,KACjB,EAAE,EAAE,cAAc,CAAC,CAAC,EACpB,EAAE,EAAE,cAAc,CAAC,CAAC,EAEtB,CAAA,EAAA,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,EAC1B,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,CAC3B;;QAEH,QACER,OACE,CAAA,KAAA,EAAA,EAAA,KAAK,EAAE;gBACL,CAACmB,oCAAkB,GAAG,IAAI;gBAC1B,CAACC,8BAAY,GAAG,QAAQ;AACzB,aAAA,EACD,KAAK,EAAE;AACL,gBAAA,IAAI,EAAE,CAAA,EAAG,YAAY,CAAC,KAAK,CAAI,EAAA,CAAA;AAC/B,gBAAA,GAAG,EAAE,CAAA,EAAG,YAAY,CAAC,MAAM,CAAI,EAAA,CAAA;AAChC,aAAA,EACD,WAAW,EAAE,CAAC,CAAa,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EACvD,YAAY,EAAE,CAAC,CAAa,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAA,CACxD;;AAIE,IAAA,eAAe,CACrB,CAA0B,EAC1B,IAAI,GAAwB,UAAA,8BAAA;QAE5B,IAAI,MAAM,GAAmB,IAAI;AACjC,QAAA,IAAI,CAAC,CAAC,MAAM,YAAY,OAAO,EAAE;AAC/B,YAAA,MAAM,GAAG,CAAC,CAAC,MAAM;;QAEnB,IAAI,CAAC,MAAM,EAAE;YACX;;AAEF,QAAA,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC;QACpD,CAAC,CAAC,cAAc,EAAE;;AAGpB,IAAA,IAAI,UAAU,GAAA;AACZ,QAAA,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY;;AAG5B;;AAEG;AACH,IAAA,kBAAkB,CAAC,CAA0B,EAAA;;AAE3C,QAAA,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC7B,IAAI,CAAC,mBAAmB,GAAGC,iBAAQ,CACjC,CAAC,CAA0B,EAAE,IAAe,KAC1C,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAE,IAAI,CAAC,EACnC,CAAC,CACF;;AAEH,QAAA,IAAI,IAAI,CAAC,UAAU,EAAE;AACnB,YAAA,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;;;IAI1C,QAAQ,CAAC,KAAkB,EAAE,KAAuB,EAAA;;AAE1D,QAAA,IAAI,CAAC,KAAK,IAAI,KAAK,EAAE;AACnB,YAAA,KAAK,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE;;QAEpC,OAAO,KAAK,IAAI,IAAI;;AAGtB;;;AAGG;IACK,mBAAmB,CAAC,KAA8B,EAAE,IAAe,EAAA;;AAEzE,QAAA,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB;;QAEF,MAAM,CAAC,GAAGlB,2BAAoB,CAAC,KAAK,EAAE,SAAS,EAAEiB,8BAAY,CAAC;QAC9D,MAAM,CAAC,GAAGjB,2BAAoB,CAAC,KAAK,EAAE,SAAS,EAAEiB,8BAAY,CAAC;;QAE9D,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE;YAC5B;;AAEF,QAAA,MAAM,OAAO,GAAG,cAAc,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC;;AAG9C,QAAA,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;AACtB,YAAA,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;AACtB,gBAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa;;;;QAK1C,IAAI,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;YACvC;;AAEF,QAAA,IAAI,CAAC,YAAY,GAAG,OAAO;QAE3B,MAAM,MAAM,GACV,OAAO,CAAC,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC;YACpC,OAAO,CAAC,CAAC,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC;;QAGtC,IAAI,MAAM,EAAE;AACV,YAAA,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC;;aACrB;AACL,YAAA,MAAM,IAAI,GAAGF,uBAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC;AAC9D,YAAA,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC;gBACnB,IAAI;gBACJ,IAAI,EAAE,IAAI,CAAC,YAAY;AACxB,aAAA,CAAC;;;AAIN;;;;;AAKG;AACH,IAAA,cAAc,CACZ,MAAe,EACf,IAAe,EACf,IAAI,GAAyB,WAAA,+BAAA;;QAG7B,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,qBAAqB,EAAE;AACpD,QAAA,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC;AAC5D,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI;AACxB,QAAA,IAAI,CAAC,aAAa,GAAG,cAAc,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,CAAC;;AAGhE;;AAEG;IACH,sBAAsB,CAAC,KAAkB,EAAE,QAA0B,EAAA;;AAEnE,QAAA,IAAI,IAAI,CAAC,eAAe,EAAE;;YAExB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC;;AAGrD,YAAA,IAAI,IAAI,CAAC,YAAY,KAAA,UAAA,8BAA4B;AAC/C,gBAAA,MAAM,KAAK,GAAGA,uBAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC;;gBAG/D,IAAI,KAAK,EAAE;AACT,oBAAA,MAAM,EACJ,gBAAgB,EAAE,SAAS,EAC3B,MAAM,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,GAC5B,GAAG,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC;wBAC9B,KAAK;AACN,qBAAA,CAAC;;AAGF,oBAAA,IAAI,CAAC,SAAS,IAAI,QAAQ,EAAE;AAC1B,wBAAA,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC;;yBACtC;;AAEL,wBAAA,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC;;;;iBAGzB;;gBAEL,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC;;;;QAKhE,IAAI,CAAC,kBAAkB,EAAE;;AAG3B;;AAEG;IACK,kBAAkB,GAAA;AACxB,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI;AACxB,QAAA,IAAI,CAAC,eAAe,GAAG,IAAI;AAC3B,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI;AACxB,QAAA,IAAI,CAAC,aAAa,GAAG,IAAI;;AAG3B;;AAEG;AACH,IAAA,YAAY,CAAC,OAAmB,EAAE,QAA0B,EAAE,QAA0B,EAAA;AACtF,QAAA,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC;AACrB,YAAA,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC;YACxD,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC;YACnC,QAAQ;YACR;AACD,SAAA,CAAC;AAEF,QAAA,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;;;IAIpB,kBAAkB,CAAC,QAAmB,EAAE,WAAsB,EAAA;AACpE,QAAA,MAAM,SAAS,GAAiB;YAC9B,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC;AACnC,YAAA,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,IAAI;AACnC,YAAA,OAAO,EAAE,EAAE;AACX,YAAA,OAAO,EAAE,EAAE;YACX,QAAQ;AACR,YAAA,QAAQ,EAAE,WAAW;SACtB;QACD,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,YAAY,CAC7D,SAAS,EACT,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,OAAO,CAC9B;AACD,QAAA,SAAS,CAAC,OAAO,GAAG,OAAO;AAC3B,QAAA,SAAS,CAAC,OAAO,GAAG,OAAO;QAC3B,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,SAAS,CAAC;;AAG3C,QAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE;AACtB,YAAA,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC;YAC1B;;QAGF,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC;AAChC,QAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE;AACtB,YAAA,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC1B;;QAEF,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,CAAC;;AAG7D;;;AAGG;IACK,cAAc,CAAC,KAAmB,EAAE,GAAiB,EAAA;;AAE3D,QAAA,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,EAAE;YAClB;;QAGF,MAAM,QAAQ,GAAGA,uBAAQ,CAAC,KAAK,EAAE,GAAG,CAAC;AACrC,QAAA,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;;AAE7B;;ACjUD,MAAM,qBAAqB,GAAG,m9PAAm9P;;MCgEp+P,gBAAgB,GAAA,MAAA;AAJ7B,IAAA,WAAA,CAAA,OAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDE;;AAEG;AACK,QAAA,IAAmB,CAAA,mBAAA,GAAG,KAAK;AAgL3B,QAAA,IAAe,CAAA,eAAA,GAA2B,IAAI;AAC9C,QAAA,IAAe,CAAA,eAAA,GAA2B,IAAI;AAG9C,QAAA,IAAyB,CAAA,yBAAA,GAAmB,EAAE;AAipBvD;;;AA3oBC,IAAA,WAAW,CAAC,CAA0B,EAAA;;QACpC,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YACpC,CAAA,EAAA,GAAA,IAAI,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,kBAAkB,CAAC,CAAC,CAAC;;;AAI/C;;;AAGG;IAIH,SAAS,GAAA;;;;;AAIP,QAAA,CAAA,EAAA,GAAA,IAAI,CAAC,eAAe,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,sBAAsB,CAC1C,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,EAChC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CACjC;;AAGH;;;AAGG;AACsB,IAAA,UAAU,CAAC,CAA8B,EAAA;;;AAEhE,QAAA,CAAA,EAAA,GAAA,IAAI,CAAC,WAAW,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;;AAGvC;;;AAGG;AACsC,IAAA,OAAO,CAAC,CAAgB,EAAA;;QAE/D,IAAI,CAAC,WAAW,CAAC,IAAI,iBAAG,QAAQ,EAAE,CAAC,EAAA,EAAK,IAAI,CAAC,OAAO,EAAE,EAAG;;AAG3D;;;AAGG;AACwC,IAAA,SAAS,CAAC,CAAgB,EAAA;;;QAEnE,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,EAAG,QAAQ,EAAE,CAAC,EAAK,EAAA,IAAI,CAAC,OAAO,EAAE,EAAG;QACzE,IAAI,CAAC,CAAC,gBAAgB,IAAI,KAAK,CAAC,gBAAgB,EAAE;YAChD;;;AAGF,QAAA,CAAA,EAAA,GAAA,IAAI,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,OAAO,CAC3B,CAAC,EACD,IAAI,CAAC,KAAK,EACV,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,EACjC;YACE,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;YACvC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;AACxC,SAAA,CACF;;;AAIH;;AAEG;AACsB,IAAA,mBAAmB,CAC1C,cAA+C,EAAA;;AAG/C,QAAA,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;AAChD,QAAA,IAAI,CAAC,yBAAyB,CAAC,MAAM,GAAG,CAAC;QACzC,IAAI,CAAC,yBAAyB,CAAC,IAAI,CACjC,cAAc,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACnE;AAED,QAAA,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,CAAC;YACzC,cAAc;AACd,YAAA,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC5C,KAAK,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,iBAAiB,KAAI;gBACvC,IAAI,iBAAiB,EAAE;AACrB,oBAAA,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC;AACpC,oBAAA,OAAO,KAAK;;qBACP;oBACL,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC;;aAErC;YACD,MAAM,EAAE,GAAG,IAAG;AACZ,gBAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjB;;AAEF,gBAAA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;aACjB;YACD,MAAM,EAAE,YAAW;;AACjB,gBAAA,OAAM,MAAA,IAAI,CAAC,UAAU,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,aAAa,EAAE,CAAA;gBACtC,IAAI,CAAC,SAAS,EAAE;aACjB;AACD,YAAA,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;AACnD,YAAA,aAAa,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE;AACpE,YAAA,OAAO,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE;YAC7B,SAAS,EAAE,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE;AACvC,SAAA,CAAC;QACF,IAAI,CAAC,qBAAqB,EAAE;;;IAK9B,qBAAqB,GAAA;AACnB,QAAA,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,CAAC;YACzC,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,SAAS,EAAE,IAAI,CAAC,SAAS;AAEzB,YAAA,mBAAmB,EAAE,CAAC,IACpB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACzB,CAAC,CAAA,EACD,IAAI,CAAC,KAAK,CACb,EAAA,EAAA,YAAY,EAAO,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAC,YAAY,CAAC,KAAK,CAAA,EAC1C,YAAY,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAC1C,EAAA,CAAA,CAAA;YACJ,YAAY,EAAE,CAAC,IAAG;AAChB,gBAAA,MAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,+BACjD,SAAS,EAAE,CAAC,EACT,EAAA,IAAI,CAAC,OAAO,EAAE,GACd,IAAI,CAAC,KAAK,CAAA,CACb;AACF,gBAAA,IAAI,cAAc,CAAC,gBAAgB,EAAE;AACnC,oBAAA,OAAO,IAAI;;AAEb,gBAAA,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC;aAC/D;AACD,YAAA,gBAAgB,EAAE,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;AAEnD,YAAA,SAAS,EAAE,CAAC,IAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;AACjD,YAAA,cAAc,EAAE,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;AAEhD,YAAA,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;AAC/C,YAAA,OAAO,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE;AAC9B,SAAA,CAAC;;;IAMJ,gBAAgB,GAAA;;QACd,CAAA,EAAA,GAAA,IAAI,CAAC,aAAa,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,OAAO,EAAE;AAC7B,QAAA,IAAI,CAAC,aAAa,GAAG,IAAII,4BAAa,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC;QACpE,IAAI,CAAC,qBAAqB,EAAE;;IAG9B,iBAAiB,GAAA;QACf,IAAI,CAAC,gBAAgB,EAAE;AACvB,QAAA,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,cAAc,CAAC;;IAG/C,oBAAoB,GAAA;;;AAElB,QAAA,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;AAChD,QAAA,IAAI,CAAC,yBAAyB,CAAC,MAAM,GAAG,CAAC;QACzC,CAAA,EAAA,GAAA,IAAI,CAAC,aAAa,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,OAAO,EAAE;;AAG/B,IAAA,MAAM,mBAAmB,GAAA;;QACvB,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC;QAChD,IAAI,CAAC,QAAQ,EAAE;YACb,OAAM,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,gBAAgB,MAAI,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA;;;AAIvC,IAAA,WAAW,CAAC,KAAgB,EAAA;AAClC,QAAA,MAAM,IAAI,GAAG,OAAO,CAClB,KAAK,EACL,IAAI,CAAC,YAAY,CAAC,KAAK,EACvB,IAAI,CAAC,YAAY,CAAC,KAAK,CACxB;AACD,QAAA,MAAM,MAAM,GAAG,gBAAgB,CAAC,IAAI,CAAC;QACrC,OAAO;YACLtB,OAAA,CAAA,KAAA,EAAA,EAAK,KAAK,EAAEuB,wCAAsB,EAAE,KAAK,EAAE,MAAM,EAAA,EAC9C,IAAI,CAAC,cAAc,KAClBvB,OAAK,CAAA,KAAA,EAAA,EAAA,KAAK,EAAC,gBAAgB,EAAA,EACzBA,OAAM,CAAA,MAAA,EAAA,EAAA,KAAK,EAAEoB,8BAAY,EAAS,CAAA,EAClCpB,OAAA,CAAA,MAAA,EAAA,EAAM,KAAK,EAAEoB,8BAAY,EAAS,CAAA,CAC9B,CACP,CACG;SACP;;IAGK,YAAY,GAAA;;QAElB,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC;;AAEhD,QAAA,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,EAAE;AAC9B,YAAA,OAAO,IAAI;;AAEb,QAAA,MAAM,mBAAmB,GACvB,QAAQ,CAAC,GAAG;AACV,YAAAI,0BAAW,CACT,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAC9D;AACL,QAAA,MAAM,QAAQ,mCACT,QAAQ,CAAA,EACR,IAAI,CAAC,aAAa,CAAC,WAAW,CAC/B,QAAQ,CAAC,CAAC,EACV,QAAQ,CAAC,CAAC,EACV,mBAAmB,CACpB,CACF;AACD,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,+BAC5C,KAAK,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACA,QAAQ,CACX,EAAA,EAAA,EAAE,EAAE,QAAQ,CAAC,CAAC,EACd,EAAE,EAAE,QAAQ,CAAC,CAAC,EAEb,CAAA,EAAA,EAAA,IAAI,CAAC,KAAK,CAAA,EAAA,EACb,YAAY,EAAO,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAC,YAAY,CAAC,KAAK,CAC1C,EAAA,YAAY,oBAAO,IAAI,CAAC,YAAY,CAAC,KAAK,KAC1C;;AAGF,QAAA,IAAI,WAAW,CAAC,gBAAgB,EAAE;AAChC,YAAA,OAAO,IAAI;;QAGb,MAAM,IAAI,GAAG,OAAO,CAClB,WAAW,CAAC,MAAM,CAAC,KAAK,EACxB,WAAW,CAAC,MAAM,CAAC,YAAY,EAC/B,WAAW,CAAC,MAAM,CAAC,YAAY,CAChC;AACD,QAAA,MAAM,MAAM,GAAG,gBAAgB,CAAC,IAAI,CAAC;QACrC,QACExB,OACE,CAAA,aAAA,EAAA,EAAA,KAAK,EAAE,MAAM,EACb,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,EACjC,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,QAAQ,EAAE,QAAQ,EAClB,WAAW,EAAE,IAAI,CAAC,mBAAmB,EACrC,cAAc,EAAE,CAAC,CAAC,KAAI;gBACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;AAClC,aAAC,EACD,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAC/D,MAAM,EAAEyB,4BAAa,CACnB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EACtC,IAAI,CAAC,OAAO,CACb,EAAA,CACD;;AAIE,IAAA,UAAU,CAAC,CAA+B,EAAA;AAChD,QAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE;YACtB;;AAEF,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;AACjD,QAAA,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;AAC5B,YAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC;;;AAI9B,QAAA,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;YAC/B,IAAI,CAAC,SAAS,EAAE;;;IAIpB,MAAM,GAAA;;QACJ,MAAM,KAAK,GAAY,EAAE;AACzB,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,EAAE;;QAGpC,IAAI,QAAQ,EAAE;AACZ,YAAA,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;;aACf;YACL,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;YAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;;YAG9C,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,IAAI,CAAC,YAAY,EAAE;AACzC,gBAAA,KAAK,CAAC,IAAI,CACRzB,OAAA,CAAA,kBAAA,EAAA,EACE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,YAAY,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,EACxC,aAAa,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE,EACvD,GAAG,EAAE,CAAC,KAAK,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,EAC9B,aAAa,EAAE,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,EAAA,CAC1C,CACH;;;YAIH,IAAI,KAAK,EAAE;gBACT,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;;;YAGxC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,EAAE;AACzC,gBAAA,KAAK,CAAC,IAAI,CAAC,MAAA,IAAI,CAAC,eAAe,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,cAAc,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;;;AAIrF,YAAA,IAAI,IAAI,CAAC,OAAO,EAAE;AAChB,gBAAA,KAAK,CAAC,IAAI,CACRA,OAAA,CAAA,qBAAA,EAAA,EACE,GAAG,EAAE,CAAC,KAAK,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAChC,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,YAAY,EAAE,IAAI,CAAC,YAAY,EAC/B,YAAY,EAAE,IAAI,CAAC,YAAY,EAC/B,MAAM,EAAE,IAAI,CAAC,OAAO,EACpB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAC3B,kBAAkB,EAAE,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAA,CAC7C,CACH;;;AAGL,QAAA,QACEA,OAAA,CAACC,UAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EACH,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,cAAc,EAAE,EACtC,UAAU,EAAE,CAAC,CAAa,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EACxD,WAAW,EAAE,CAAC,CAAa,KAAK,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAC1D,YAAY,EAAE,CAAC,CAAa,KAAK,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,IAAI,CAAC,EACjE,WAAW,EAAE,CAAC,CAAmC,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;;AAEvE,YAAA,UAAU,EAAE,CAAC,CAA+B,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAA,EAElE,KAAK,EACND,OAAA,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAM,IAAI,EAAC,MAAM,EAAG,CAAA,CACf;;AAIX;;AAEG;AACK,IAAA,OAAO,CAAC,KAAW,EAAE,GAAS,EAAE,OAAuB,EAAA;;QAE7D,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CACpD,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CACjD;QACD,IAAI,gBAAgB,EAAE;AACpB,YAAA,OAAO,KAAK;;AAEd,QAAA,MAAM,MAAM,GACV,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,KAAK,kCACA,KAAK,CAAA,EAAA,EACR,EAAE,EAAE,GAAG,CAAC,CAAC,EACT,EAAE,EAAE,GAAG,CAAC,CAAC,EAAA,CAAA,EAEX,IAAI,EAAE,OAAO,EACV,EAAA,IAAI,CAAC,KAAK,CAAA,EAAA,EACb,YAAY,EAAO,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAC,YAAY,CAAC,KAAK,CAC1C,EAAA,YAAY,oBAAO,IAAI,CAAC,YAAY,CAAC,KAAK,IAC3C;;QAGD,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;AAC/C,QAAA,IAAI,UAAU,CAAC,gBAAgB,EAAE;AAC/B,YAAA,OAAO,KAAK;;AAEd,QAAA,MAAM,EAAE,KAAK,EAAE,GAAG,UAAU,CAAC,MAAM;;AAGnC,QAAA,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,EACzB,KAAK,EAAE;gBACL,CAAC,EAAE,KAAK,CAAC,CAAC;gBACV,CAAC,EAAE,KAAK,CAAC,CAAC;AACX,aAAA,EACD,GAAG,EAAE;gBACH,CAAC,EAAE,KAAK,CAAC,EAAE;gBACX,CAAC,EAAE,KAAK,CAAC,EAAE;aACZ,EAAA,EACE,UAAU,CAAC,MAAM,CACpB,CAAA,CAAC,gBAAgB;;AAGb,IAAA,iBAAiB,CAAC,KAAgB,EAAA;AACxC,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO;;AAE/B,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAC3C,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,KAAK,EAAO,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAK,CACd,EAAA,EAAA,IAAI,CAAC,KAAK,CAAA,EAAA,EACb,YAAY,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAC1C,EAAA,YAAY,EAAO,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAC,YAAY,CAAC,KAAK,KAC1C;AACF,QAAA,IAAI,UAAU,CAAC,gBAAgB,EAAE;AAC/B,YAAA,OAAO,KAAK;;AAEd,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,0BAA0B,CACxD,UAAU,CAAC,MAAM,CAAC,KAAK,EACvB,IAAI,CAAC,SAAS,CACf;;QAED,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;AACtC,QAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE;AACtB,YAAA,OAAO,KAAK;;;AAGd,QAAA,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,UAAU,CAAC,MAAM,CAAC,KAAK,CAAE,EAAA,EAAA,IAAI,IAAG;AAC5D,QAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE;AACtB,YAAA,OAAO,KAAK;;AAEd,QAAA,OAAO,CAAC,CAAC,CAAC,gBAAgB;;AAG5B;;AAEG;AACK,IAAA,iBAAiB,CAAC,CAAa,EAAA;;AAErC,QAAA,IAAI,CAAC,CAAC,gBAAgB,EAAE;YACtB;;;AAIF,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE;QAC3B,MAAM,SAAS,GAAG,wBAAwB,CAAC,CAAC,EAAE,IAAI,CAAC;QACnD,IAAI,CAAC,SAAS,EAAE;YACd;;QAEF,IAAI,CAAC,MAAM,EAAE;;AAGf;;AAEG;AACK,IAAA,kBAAkB,CAAC,CAA0B,EAAE,KAAK,GAAG,KAAK,EAAA;;;AAElE,QAAA,MAAM,aAAa,GAAG,CAAC,CAAC,MAAiC;;QAEzD,IAAI0B,sBAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE;YACpD;;;AAIF,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE;QAC3B,MAAM,SAAS,GAAG,wBAAwB,CAAC,CAAC,EAAE,IAAI,CAAC;QACnD,IAAI,CAAC,SAAS,EAAE;YACd;;;AAIF,QAAA,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,QAAQ,CAAC;;AAG/C,QAAA,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,aAAa;AACX,iBAAA,CAAA,EAAA,GAAA,IAAI,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAA;;;YAIrE,IAAI,CAAC,KAAK,EAAE;gBACV,CAAC,CAAC,cAAc,EAAE;;AACb,iBAAA,IACLC,wBAAiB,CAAE,CAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAEP,8BAAY,CAAC,EAC7D;;;gBAGA,CAAC,CAAC,cAAc,EAAE;;;;AAKxB;;AAEG;IACO,MAAM,CAAC,GAAG,GAAG,EAAE,EAAA;;AACvB,QAAA,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAClB,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;YAC9C,IAAI,CAAC,KAAK,EAAE;gBACV;;AAEF,YAAA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;AAC7D,YAAA,CAAA,EAAA,GAAA,IAAI,CAAC,OAAO,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,IAAI,iCACb,IAAI,CAAA,EAAA,EACP,GAAG,EAAA,CAAA,CACH;;;AAIN;;;AAGG;IACK,MAAM,SAAS,CAAC,CAAoC,EAAA;AAC1D,QAAA,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;QACtB,IAAI,CAAC,aAAD,CAAC,KAAA,MAAA,GAAA,MAAA,GAAD,CAAC,CAAE,MAAM,EAAE;AACb,YAAA,MAAM,IAAI,CAAC,SAAS,EAAE;;;AAI1B;;;AAGG;AACO,IAAA,QAAQ,CAAC,CAAkB,EAAA;QACnC,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC;AAC1E,QAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC;;IAG7B,SAAS,GAAA;QACf,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;QAC9C,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;QAC5C,IAAI,CAAC,KAAK,EAAE;AACV,YAAA,KAAK,GAAGF,uBAAQ,CAAC,KAAK,EAAE,KAAK,CAAC;;AAEhC,QAAA,OAAO,KAAK;;AAEN,IAAA,MAAM,CAAC,CAAe,EAAA;;AAC5B,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE;QAC9B,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC;AACtD,QAAA,IAAI,YAAY,CAAC,gBAAgB,EAAE;AACjC,YAAA,OAAO,KAAK;;AAEd,QAAA,IAAI,SAAqC;QAEzC,IAAI,KAAK,EAAE;AACT,YAAA,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CACzD,KAAK,EACL,IAAI,CAAC,SAAS,CACf;AACD,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,iBACxC,KAAK;gBACL,IAAI;AACJ,gBAAA,OAAO,EACJ,EAAA,IAAI,CAAC,KAAK,EACb;AACF,YAAA,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;AAC3B,gBAAA,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI;;;AAIjC,QAAA,CAAA,EAAA,GAAA,IAAI,CAAC,SAAS,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC;AACpC,QAAA,OAAO,IAAI;;AAGL,IAAA,OAAO,CAAC,IAAgB,EAAA;;QAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;AAC9C,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,IAAI;AAC1D,QAAA,IAAI,CAAC,KAAK,IAAI,SAAS,EAAE;YACvB;;AAEF,QAAA,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,yBAAyB,CACnE,KAAK,EACL,IAAI,CACL;AACD,QAAA,MAAM,EAAE,gBAAgB,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAClE,MAAA,CAAA,MAAA,CAAA,EAAA,IAAI,EAAE,OAAO,EACb,MAAM,EAAE,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,EACrD,KAAK,EACF,EAAA,IAAI,CAAC,KAAK,EACb;QAEF,IAAI,QAAQ,EAAE;YACZ;;AAEF,QAAA,CAAA,EAAA,GAAA,IAAI,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,YAAY,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC;;AAGnD,IAAA,MAAM,SAAS,GAAA;;AACrB,QAAA,MAAM,QAAQ,GAAG,OAAM,MAAA,IAAI,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,kBAAkB,CAC7D,IAAI,aAAa,CAAC,SAAS,EAAE;YAC3B,IAAI,EAAEV,6BAAW,CAAC,UAAU;AAC7B,SAAA,CAAC,EACF,IAAI,CAAC,KAAK,CACX,CAAA;QACD,IAAI,CAAC,QAAQ,EAAE;YACb,IAAI,CAAC,SAAS,EAAE;;;IAIV,SAAS,GAAA;;QACjB,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;QAC9C,IAAI,KAAK,IAAI,CAACoB,gCAAiB,CAAC,KAAK,CAAC,EAAE;AACtC,YAAA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,KAAK,EAAE,EAAE,CAAC;AAC7D,YAAA,CAAA,EAAA,GAAA,IAAI,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;;AACjD,aAAA,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YACzB,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;YAChD,IAAI,CAAC,OAAO,EAAE;gBACZ;;AAEF,YAAA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,QAAQ,CAAC;gBACZ,KAAK,EAAE,OAAO,CAAC,CAAC;gBAChB,KAAK,EAAE,OAAO,CAAC,CAAC;AAChB,gBAAA,GAAG,EAAE,EAAE;gBACP,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,IAAI,EAAE,IAAI,CAAC,IAAI;AAChB,aAAA,CAAC;;;IAIE,YAAY,CAAC,EAAE,MAAM,EAA6C,EAAA;QACxE,MAAM,CAAC,IAAI,GAAGJ,0BAAW,CACvB,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CACpE;;AAGH;;AAEG;IACO,OAAO,GAAA;;AACf,QAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,YAAA,OAAO,KAAK;;QAEd,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;AAC9C,QAAA,OAAO,KAAK,IAAI,EAAC,MAAA,IAAI,CAAC,aAAa,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAA;;AAGnE,IAAA,IAAI,MAAM,GAAA;QACR,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC;;AAGxC;;AAEG;AACH,IAAA,KAAK,CAAC,IAAW,EAAE,WAAW,GAAG,KAAK,EAAA;AACpC,QAAA,IAAI,CAAC,IAAI;AAAE,YAAA,OAAO,KAAK;QAEvB,MAAM,GAAG,GAAG,IAAI;QAChB,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;AAE9C,QAAA,IAAI,WAAW,IAAI,KAAK,EAAE;YACxB,MAAM,KAAK,GAAGN,uBAAQ,CAAC,KAAK,EAAE,GAAG,CAAC;YAClC,IAAI,KAAK,EAAE;AACT,gBAAA,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;;;QAIxC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;;AAGhC,IAAA,IAAI,KAAK,GAAA;QACP,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC;AACnC,YAAA,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI;SACjC;;AAGH;;AAEG;IACO,OAAO,GAAA;QACf,OAAO;YACL,EAAE,EAAE,IAAI,CAAC,OAAO;AAChB,YAAA,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK;AAC7B,YAAA,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;YACvC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;YACvC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC;SACtC;;;;;;;;;;;;;ACr7BE,MAAM,eAAe,GAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC;;MCqBnE,gBAAgB,GAAA,MAAA;AAD7B,IAAA,WAAA,CAAA,OAAA,EAAA;;;;AAkCE;;;;AAIG;AACK,QAAA,IAAgB,CAAA,gBAAA,GAAmB,EAAE;AAkG9C;IApFC,MAAM,GAAA;QACJ,MAAM,SAAS,GAAkB,EAAE;AACnC,QAAA,MAAM,QAAQ,GAAG,IAAIW,4BAAa,CAAC,aAAa,CAAC;;QAGjD,IAAI,WAAW,GAAG,CAAC;;AAEnB,QAAA,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,EAAE;AAC/B,YAAA,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM;;YAGpD,MAAM,SAAS,GAAG,IAAIC,2BAAS,CAA0B,IAAI,CAAC,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC7D,IAAI,CAAC,SAAS,CAAC,KAAK,EACvB;;AAGF,YAAA,MAAM,OAAO,GAAG,IAAIA,2BAAS,CAC3B,aAAa,CACd;AACD,YAAA,MAAM,MAAM,GAAA,MAAA,CAAA,MAAA,CAAA,EACV,YAAY,EAAE,eAAe,CAAC,WAAW,CAAC,EACvC,EAAA,IAAI,CAAC,eAAe,CACxB;AACD,YAAA,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC;AAC5B,YAAA,SAAS,CAAC,IAAI,CACZ9B,OAAA,CAAA,aAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACM,IAAI,EACR,EAAA,OAAO,EAAC,YAAY,EACpB,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EACvC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,SAAS,EAAE,SAAS,CAAC,KAAK,EAC1B,OAAO,EAAE,OAAO,CAAC,KAAK,EACtB,WAAW,EAAE,QAAQ,CAAC,KAAK,EAC3B,QAAQ,EAAE,IAAI,EACd,KAAK,EAAE,KAAK,EACZ,CAAA,CAAA,CACH;YACD,WAAW,IAAI,SAAS;;QAG1B,MAAM,OAAO,GAAG+B,qCAAsB,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC;QACzE,QAAQ,CAAC,WAAW,CAAC;AACnB,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,WAAW,EAAE,CAAC;AACd,YAAA,KAAK,EAAE;AACL,gBAAA;AACE,oBAAA,IAAI,EAAE,OAAO;AACb,oBAAA,KAAK,EAAE,CAAC;AACR,oBAAA,GAAG,EAAE,OAAO;AACZ,oBAAA,SAAS,EAAE,CAAC;AACb,iBAAA;AACF,aAAA;AACF,SAAA,CAAC;AAEF,QAAA,MAAM,cAAc,GACwC;YAC1D,aAAa,EAAE,IAAI,CAAC,MAAM;AAC1B,YAAA,YAAY,EAAE,CAAC;AACf,YAAA,KAAK,EAAE,EAAE,QAAQ,EAAE,CAAG,EAAA,OAAO,IAAI,EAAE;AACnC,YAAA,OAAO,EAAE,YAAY;AACrB,YAAA,GAAG,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC;AAC1C,YAAA,gBAAgB,EAAE,CAAC,CAAc,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;SACzE;AACD,QAAA,MAAM,cAAc,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACf,IAAI,CAAC,UAAU,CAAA,EAAA;;AAElB,YAAA,MAAM,EAAE,EAAE,EACV,OAAO,EACL,OAAO,IAAI,CAAC,eAAe,KAAK,QAAQ,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,EACxE,WAAW,EAAE,QAAQ,CAAC,KAAK,EAC3B,SAAS,EAAE,KAAK,EAChB,IAAI,EAAEC,iCAAe;;AAErB,YAAA,IAAI,EAAEC;AAAW,SAAA,CAClB;AACD,QAAA,QACEjC,OAAC,CAAAC,UAAI,EAAC,EAAA,KAAK,EAAE,EAAE,CAAC+B,iCAAe,GAAG,IAAI,EAAE,EAAE,GAAG,EAAEA,iCAAe,EAAA,EAC5DhC,OAA4B,CAAA,wBAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EAAA,cAAc,kBAAc,IAAI,EAAA,CAAA,EAC1DA,OAAA,CAAA,eAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EAAmB,cAAc,CAAI,CAAA,EACpC,SAAS,CACa,CACpB;;;;AC9Jb;;AAEG;MACU,oBAAoB,CAAA;AAE/B,IAAA,WAAA,CAAoB,OAAoB,EAAA;QAApB,IAAO,CAAA,OAAA,GAAP,OAAO;QADnB,IAAqB,CAAA,qBAAA,GAAG,CAAC;;AAIjC;;AAEG;AACH,IAAA,aAAa,CAAC,CAAS,EAAA;QACrB,IAAI,CAAC,CAAC,EAAE;YACN,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC;;aACxC;AACL,YAAA,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,UAAU,CAAC;;;AAI5C;;AAEG;AACH,IAAA,WAAW,CAAC,EACV,UAAU,EACV,WAAW,EACX,WAAW,GAKZ,EAAA;AACC,QAAA,MAAM,SAAS,GAAG,WAAW,GAAG,WAAW;AAC3C,QAAA,MAAM,QAAQ,GAAG,CAAC,UAAU,IAAI,SAAS;QACzC,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,EAAE,MAAM,CAAC;AAC5C,YAAA,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,IAAI,CACpC,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,qBAAqB,CAC3B;;;IAIG,IAAI,CAAC,OAAqB,EAAE,OAAgB,EAAA;QAClD,YAAY,CAAC,OAAO,CAAC;AACrB,QAAA,OAAO,MAAM,CACX,UAAU,CAAC,MAAK;YACd,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,MAAA,GAAA,MAAA,GAAA,OAAO,CAAE,eAAe,CAAC,SAAS,CAAC;AACrC,SAAC,EAAE,IAAI,CAAC,CACT;;IAEH,KAAK,GAAA;AACH,QAAA,YAAY,CAAC,IAAI,CAAC,qBAAqB,CAAC;;AAE3C;;ACvDD,MAAM,oBAAoB,GAAG,qiNAAqiN;;MC4BrjN,mBAAmB,GAAA,MAAA;AAJhC,IAAA,WAAA,CAAA,OAAA,EAAA;;;AAKE;;AAEG;AACK,QAAA,IAAS,CAAA,SAAA,GAAkB,OAAO;AAyBlC,QAAA,IAAU,CAAA,UAAA,GAAG,CAAC;AAwHvB;IAnHC,MAAM,SAAS,CAAC,CAAsB,EAAA;;QACpC,IAAI,IAAI,CAAC,SAAS,KAAK,CAAC,CAAC,SAAS,EAAE;YAClC;;QAEF,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,CAAC,SAAS,CAAC;QACrD,CAAA,EAAA,GAAA,IAAI,CAAC,kBAAkB,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,SAAS,CAAC,CAAC,CAAC;AACrC,QAAA,IAAI,CAAC,CAAC,UAAU,EAAE;AAChB,YAAA,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC;gBACpC,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,WAAW,EAAE,IAAI,CAAC,QAAQ;gBAC1B,WAAW,EAAE,IAAI,CAAC,WAAW;AAC9B,aAAA,CAAC;;;AAIN;;AAEG;IAEH,MAAM,YAAY,CAAC,CAAsB,EAAA;AACvC,QAAA,IAAI,CAAC,CAAC,KAAK,EAAE;AACX,YAAA,QAAQ,CAAC,CAAC,SAAS;AACjB,gBAAA,KAAK,OAAO;AACV,oBAAA,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC,KAAK;oBAChD;AACF,gBAAA,KAAK,OAAO;AACV,oBAAA,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK;oBAC/C;;AAEJ,YAAA,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;;AAEnB,QAAA,OAAO,CAAC;;IAGV,iBAAiB,GAAA;QACf,IAAI,CAAC,oBAAoB,GAAG,IAAI,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC;QAClE,IAAI,CAAC,gBAAgB,GAAG,IAAIkC,yBAAgB,CAC1C,cAAc,IAAI,QAAQ,CAAC,eAAe,GAAG,CAAC,GAAG,EAAE,CACpD;AACD,QAAA,IAAI,CAAC,kBAAkB,GAAG,IAAIC,2BAAkB,CAAC;AAC/C,YAAA,SAAS,EAAE,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1C,WAAW,EAAE,CAAC,IAAG;AACf,gBAAA,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC;AACtC,gBAAA,MAAM,IAAI,GAAG,CAAC,CAAC,SAAS,KAAK,OAAO,GAAG,WAAW,GAAG,YAAY;;gBAEjE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,UAAU;aAClC;AACF,SAAA,CAAC;;IAGJ,oBAAoB,GAAA;AAClB,QAAA,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE;;IAGnC,iBAAiB,GAAA;AACf,QAAA,IAAI,CAAC,UAAU,GAAGC,kCAAgB,CAAC,QAAQ,CAAC;;IAG9C,kBAAkB,GAAA;QAChB,IAAI,UAAU,GAAG,CAAC;AAClB,QAAA,IAAI,IAAI,CAAC,SAAS,KAAK,OAAO,EAAE;YAC9B,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC;YACxF,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAA,EAAG,UAAU,CAAA,EAAA,CAAI;;aAC1C;YACL,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC;YACtF,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,GAAG,CAAA,EAAG,UAAU,CAAA,EAAA,CAAI;;AAElD,QAAA,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,UAAU,CAAC;AACnD,QAAA,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAC/B;YACE,WAAW,EAAE,IAAI,CAAC,QAAQ;YAC1B,UAAU,EAAE,IAAI,CAAC,SAAS,KAAK,OAAO,GAAI,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW;YAC9F,WAAW,EAAE,IAAI,CAAC,UAAU;AAC7B,SAAA,EACD,IAAI,CAAC,SAAS,CACf;;AAGH,IAAA,QAAQ,CAAC,CAAa,EAAA;QACpB,IAAI,EAAE,CAAC,CAAC,MAAM,YAAY,OAAO,CAAC,EAAE;YAClC;;AAEF,QAAA,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM;QACvB,IAAI,IAAI,GAA+B,YAAY;AACnD,QAAA,IAAI,IAAI,CAAC,SAAS,KAAK,OAAO,EAAE;YAC9B,IAAI,GAAG,WAAW;;QAGpB,MAAM,SAAS,GAAG,MAAK;;AACrB,YAAA,CAAA,EAAA,GAAA,IAAI,CAAC,kBAAkB,MAAE,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC;AACpE,SAAC;;AAED,QAAA,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE;AAC/D,YAAA,SAAS,EAAE;;aACN;YACL,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,SAAS,EAAE,CAAC;;;IAIxG,MAAM,GAAA;AACJ,QAAA,MAAM,IAAI,GAAGC,uBAAc,CACzB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,SAAS,KAAK,OAAO,GAAI,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAClF,IAAI,CAAC,UAAU,CAChB;AACD,QAAA,QACErC,OAAC,CAAAC,UAAI,EAAC,EAAA,GAAA,EAAA,0CAAA,EAAA,QAAQ,EAAE,CAAC,CAAa,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAA,EACjDD,OAAA,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EACE,KAAK,EAAE;AACL,gBAAA,CAAC,IAAI,CAAC,SAAS,KAAK,OAAO,GAAG,QAAQ,GAAG,OAAO,GAAG,CAAA,EAAG,IAAI,CAAI,EAAA,CAAA;aAC/D,EACD,CAAA,CACG;;;;;;AC9Kb,MAAM,uBAAuB,GAAG,41MAA41M;;MCc/2M,WAAW,GAAA,MAAA;AAJxB,IAAA,WAAA,CAAA,OAAA,EAAA;;AAwBmB,QAAA,IAAA,CAAA,QAAQ,GAAGsC,iBAAQ,CAAC,CAAC,CAAc,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;AAqEhF;AAnES,IAAA,QAAQ,CAAC,CAAc,EAAA;AAC7B,QAAA,CAAC,aAAD,CAAC,KAAA,MAAA,GAAA,MAAA,GAAD,CAAC,CAAE,cAAc,CAAC;AAChB,YAAA,KAAK,EAAE,SAAS;AAChB,YAAA,MAAM,EAAE,SAAS;AAClB,SAAA,CAAC;;IAGJ,kBAAkB,GAAA;AAChB,QAAA,IAAI,IAAI,CAAC,EAAE,EAAE;AACX,YAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;;;IAI1B,MAAM,GAAA;QACJ,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC;QACjD,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,eAAe,CAAC;QACrD,IAAI,CAAC,IAAI,EAAE;YACT;;QAEF,IAAI,UAAU,GAAG,QAAQ;QACzB,IAAI,UAAU,GAAG,OAAO;AACxB,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;QAC7B,IAAI,CAAC,KAAK,EAAE;YACV;;QAEF,IAAI,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE;YACpB,UAAU,GAAG,KAAK;;QAEpB,IAAI,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE;YACpB,UAAU,GAAG,MAAM;;AAErB,QAAA,MAAM,cAAc,GAAG,CAAA,EAAG,UAAU,CAAI,CAAA,EAAA,UAAU,EAAE;AACpD,QAAA,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,EACvB,IAAI,CAAC,YAAY,CAAC,KAAK,EACvB,IAAI,CAAC,YAAY,CAAC,KAAK,CACxB;AACD,QAAA,MAAM,MAAM,GAAG,gBAAgB,CAAC,IAAI,CAAC;AACrC,QAAA,MAAM,KAAK,GAAG;AACZ,YAAA,KAAK,EAAE;gBACL,CAACC,wCAAsB,GAAG,IAAI;AAC9B,gBAAA,CAAC,IAAI,IAAI,EAAE,GAAG,IAAI;AACnB,aAAA;AACD,YAAA,KAAK,EAAE,MAAM;AACb,YAAA,MAAM,EAAE;SACT;AACD,QAAA,QACEvC,OAAA,CAACC,UAAI,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAK,CAAA,EACbD,OAAK,CAAA,KAAA,EAAA,EAAA,KAAK,EAAE,cAAc,EAAE,GAAG,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,EAAA,CAAI,CACpD;;IAIH,QAAQ,GAAA;QACd,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;QAC9C,IAAI,KAAK,EAAE;AACT,YAAA,OAAO,KAAK;;QAEd,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;QAC9C,IAAI,CAAC,KAAK,EAAE;AACV,YAAA,OAAO,IAAI;;QAEb,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KAAK,CAAA,EAAA,EACR,EAAE,EAAE,KAAK,CAAC,CAAC,EACX,EAAE,EAAE,KAAK,CAAC,CAAC,EACX,CAAA;;;;;;;;;;;;;","names":["h","Host","getSourceItem","getPropertyFromEvent","getItemByPosition","getItemByIndex","RevogrFocus","FOCUS_CLASS","codesLetter","isClear","isTab","isEnterKeyValue","isCopy","isCut","isPaste","isAll","timeout","RESIZE_INTERVAL","getRange","CELL_HANDLER_CLASS","MOBILE_CLASS","debounce","ColumnService","SELECTION_BORDER_CLASS","getCellData","getCellEditor","isEditInput","verifyTouchTarget","isRangeSingleCell","ViewportStore","DataStore","calculateRowHeaderSize","ROW_HEADER_TYPE","HEADER_SLOT","LocalScrollTimer","LocalScrollService","getScrollbarSize","getContentSize","throttle","TMP_SELECTION_BG_CLASS"],"sources":["src/components/attribution/revogr-attribution.tsx","src/components/extra/revogr-extra.tsx","src/components/overlay/selection.utils.ts","src/components/selectionFocus/revogr-focus-style.scss?tag=revogr-focus","src/components/selectionFocus/revogr-focus.tsx","src/components/overlay/keyboard.service.ts","src/components/overlay/autofill.service.tsx","src/components/overlay/revogr-overlay-style.scss?tag=revogr-overlay-selection","src/components/overlay/revogr-overlay-selection.tsx","src/components/rowHeaders/row-header-render.tsx","src/components/rowHeaders/revogr-row-headers.tsx","src/components/scrollable/autohide-scroll.plugin.ts","src/components/scrollable/revogr-scroll-style.scss?tag=revogr-scroll-virtual","src/components/scrollable/revogr-scroll-virtual.tsx","src/components/selectionTempRange/revogr-temp-range-style.scss?tag=revogr-temp-range","src/components/selectionTempRange/revogr-temp-range.tsx"],"sourcesContent":["import { Component, Host, h } from '@stencil/core';\n/**\n * If you’re thinking about removing the attribution, we’d like to share a few thoughts first:\n * If you’re using RevoGrid in your organization and it’s helping you make money, we depend on your support to keep improving and maintaining RevoGrid under an MIT License.\n * Before you remove the attribution, please consider how you can support RevoGrid to help keep it running smoothly.\n * Using RevoGrid for a personal project? Awesome! Feel free to remove the attribution. We appreciate your support.\n */\n/**\n * @internal\n */\n@Component({\n  tag: 'revogr-attribution',\n})\nexport class Attribution {\n  render() {\n    return (\n      <Host>\n        <a\n          href=\"https://rv-grid.com/guide/attribution\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          title=\"Made with ❤️ by Revolist OU Team\"\n          class=\"value\"\n        >\n          RevoGrid\n        </a>\n      </Host>\n    );\n  }\n}\n","import { h, Component, Method, Prop, State, VNode } from '@stencil/core';\nimport type { ExtraNodeFuncConfig } from '@type';\n\n/**\n * Contains extra elements for stencil components.\n * Performs rendering and updates for external components.\n * \n * @example\n * In Plugins if you want to add extra elements to grid and use stenciljs vnodes reactivity:\n * function paginationPanel(this: PaginationPlugin, config: { refresh: () => void }) {\n *    // use `config.refresh()` for component to re-render\n *    return h('div')\n * }\n * \n * revogrid.registerVNode = [\n *    ...existingNodes,\n *     paginationPanel.bind(this)\n * ];\n\n\n/**\n * @internal\n */\n@Component({\n  tag: 'revogr-extra',\n})\nexport class RevoGridExtra {\n  /**\n   * Nodes to render\n   */\n  @Prop() nodes: (\n    | VNode\n    | ((c: ExtraNodeFuncConfig) => VNode)\n  )[] = [];\n  /**\n   * Force component to re-render\n   */\n  @State() update = 1;\n\n  /**\n   * Refreshes the extra component. Useful if you want to manually\n   * force the component to re-render.\n   */\n  @Method() async refresh() {\n    this.update *= -1;\n  }\n\n  render() {\n    return this.nodes?.map(node => {\n      // Check if node is a function or a stencil component\n      // If function wrap it in a stencil component with the refresh function\n      if (typeof node === 'function') {\n        const config: Partial<ExtraNodeFuncConfig> = {};\n        const getNodes = () => [node({ refresh: () => config.refresh?.() })];\n\n        return (\n          <revogr-extra\n            nodes={getNodes()}\n            ref={(el?: HTMLRevogrExtraElement) => {\n              if (el) {\n                // Update exclusively for current node\n                config.refresh = () => {\n                  el.nodes = getNodes();\n                };\n              }\n            }}\n          />\n        );\n      }\n      return node;\n    });\n  }\n}\n","import {\n  DimensionIndexInput,\n  DSourceState,\n  getItemByIndex,\n  getItemByPosition,\n  getSourceItem,\n} from '@store';\nimport type {\n  DimensionSettingsState,\n  Cell,\n  RangeArea,\n  RangeAreaCss,\n  DataLookup,\n  DimensionRows,\n  DataType,\n  EditCellStore,\n} from '@type';\nimport { getPropertyFromEvent } from '../../utils/events';\nimport { Observable } from '../../utils';\n\nexport type EventData = {\n  el: HTMLElement;\n  rows: DimensionSettingsState;\n  cols: DimensionSettingsState;\n  lastCell: Cell;\n  focus: Cell | null;\n  range: RangeArea | null;\n  edit: EditCellStore | null;\n};\n\nexport function collectModelsOfRange(\n  data: DataLookup,\n  store: Observable<DSourceState<DataType, DimensionRows>>,\n) {\n  const models: Partial<DataLookup> = {};\n  for (let i in data) {\n    const rowIndex = parseInt(i, 10);\n    models[rowIndex] = getSourceItem(store, rowIndex);\n  }\n\n  return models;\n}\n\nexport function getFocusCellBasedOnEvent(\n  e: MouseEvent | TouchEvent,\n  data: EventData,\n): Cell | null {\n  // If event default is prevented, return\n  if (e.defaultPrevented) {\n    return null;\n  }\n\n  // Get coordinates from event object\n  const x = getPropertyFromEvent(e, 'clientX');\n  const y = getPropertyFromEvent(e, 'clientY');\n\n  // If coordinates are not available, return\n  if (x === null || y === null) {\n    return null;\n  }\n\n  // Get current cell based on coordinates and data\n  const focusCell = getCurrentCell({ x, y }, data);\n  // If current cell is not available, return\n  if (isAfterLast(focusCell, data.lastCell)) {\n    return null;\n  }\n\n  return focusCell;\n}\n\n/**\n * Calculate cell based on x, y position\n */\nexport function getCurrentCell(\n  { x, y }: Cell,\n  { el, rows, cols }: Pick<EventData, 'el' | 'rows' | 'cols'>,\n): Cell {\n  // Get the bounding rectangle of the element\n  const { top, left, height, width } = el.getBoundingClientRect();\n\n  // Calculate the cell position relative to the element\n  let cellY = y - top;\n  let cellX = x - left;\n\n  // Limit the cell position to the element height\n  if (cellY >= height) {\n    cellY = height - 1;\n  }\n\n  // Limit the cell position to the element width\n  if (cellX >= width) {\n    cellX = width - 1;\n  }\n\n  // Get the row and column items based on the cell position\n  const rgRow = getItemByPosition(rows, cellY);\n  const rgCol = getItemByPosition(cols, cellX);\n\n  // Set the row and column index to 0 if they are before the first item\n  if (rgCol.itemIndex < 0) {\n    rgCol.itemIndex = 0;\n  }\n\n  if (rgRow.itemIndex < 0) {\n    rgRow.itemIndex = 0;\n  }\n\n  return { x: rgCol.itemIndex, y: rgRow.itemIndex };\n}\n\nexport function getCoordinate(\n  range: RangeArea,\n  focus: Cell,\n  changes: Partial<Cell>,\n  isMulti = false,\n) {\n  const updateCoordinate = (c: keyof Cell, pos = 0) => {\n    const start = { x: range.x, y: range.y };\n    const end = isMulti ? { x: range.x1, y: range.y1 } : start;\n    const point = end[c] > focus[c] ? end : start;\n    point[c] += pos;\n    return { start, end };\n  };\n\n  if (changes.x) {\n    return updateCoordinate('x', changes['x']);\n  }\n  if (changes.y) {\n    return updateCoordinate('y', changes['y']);\n  }\n  return null;\n}\n\n/**\n * Check if the x coordinate of the cell position is after or equal to the x coordinate of the last cell position\n * or if the y coordinate of the cell position is after or equal to the y coordinate of the last cell position\n */\nexport function isAfterLast({ x, y }: Cell, lastCell: Cell) {\n  return x >= lastCell.x || y >= lastCell.y;\n}\n\n/** check if out of range */\nexport function isBeforeFirst({ x, y }: Cell) {\n  return x < 0 || y < 0;\n}\n\n/** Compare cells, only 1 coordinate difference is possible */\n// export function getDirectionCoordinate(initial: Cell, last: Cell): Partial<Cell> | null {\n//   const c: (keyof Cell)[] = ['x', 'y'];\n//   for (let k of c) {\n//     if (initial[k] !== last[k]) {\n//       return { [k]: 1 };\n//     }\n//   }\n//   return null;\n// }\n\n// export function getLargestAxis(initial: Cell, last: Cell): Partial<Cell> | null {\n//   const cell: Partial<Cell> = {};\n//   const c: (keyof Cell)[] = ['x', 'y'];\n//   for (let k of c) {\n//     cell[k] = Math.abs(initial[k] - last[k]);\n//   }\n//   if (cell.x > cell.y) {\n//     return { x: 1 };\n//   }\n//   if (cell.y > cell.x) {\n//     return { y: 1 };\n//   }\n//   return null;\n// }\n\nexport function styleByCellProps(styles: { [key: string]: number }): RangeAreaCss {\n  return {\n    left: `${styles.left}px`,\n    top: `${styles.top}px`,\n    width: `${styles.width}px`,\n    height: `${styles.height}px`,\n  };\n}\n\nexport function getCell(\n  { x, y, x1, y1 }: RangeArea,\n  dimensionRow: Pick<\n    DimensionIndexInput,\n    'indexToItem' | 'indexes' | 'originItemSize'\n  >,\n  dimensionCol: Pick<\n    DimensionIndexInput,\n    'indexToItem' | 'indexes' | 'originItemSize'\n  >,\n) {\n  const top = getItemByIndex(dimensionRow, y).start;\n  const left = getItemByIndex(dimensionCol, x).start;\n  const bottom = getItemByIndex(dimensionRow, y1).end;\n  const right = getItemByIndex(dimensionCol, x1).end;\n\n  return {\n    left,\n    right,\n    top,\n    bottom,\n    width: right - left,\n    height: bottom - top,\n  };\n}\n","revogr-focus.focused-cell {\n  @include selection(1px);\n\n  position: absolute;\n  pointer-events: none;\n  z-index: 9;\n  display: block !important;\n}\n","import {\n  Component,\n  Prop,\n  h,\n  Host,\n  Event,\n  Element,\n  EventEmitter,\n} from '@stencil/core';\nimport { FOCUS_CLASS } from '../../utils/consts';\nimport { getCell, styleByCellProps } from '../overlay/selection.utils';\nimport { DSourceState, getSourceItem } from '@store';\nimport type {\n  Cell,\n  SelectionStoreState,\n  ColumnRegular,\n  DataType,\n  DimensionSettingsState,\n  FocusRenderEvent,\n  FocusTemplateFunc,\n  DimensionCols,\n  DimensionRows,\n  FocusAfterRenderEvent,\n} from '@type';\nimport type { Observable } from '../../utils';\n\n/**\n * Focus component. Shows focus layer around the cell that is currently in focus.\n * @slot focus-${view.type}-${data.type}. @example focus-rgCol-rgRow\n */\n@Component({\n  tag: 'revogr-focus',\n  styleUrl: 'revogr-focus-style.scss',\n})\nexport class RevogrFocus {\n  /**\n   * Column type\n   */\n  @Prop() colType!: DimensionCols;\n  /**\n   * Row type\n   */\n  @Prop() rowType!: DimensionRows;\n\n  /** Dynamic stores */\n  /** Selection, range, focus for selection */\n  @Prop() selectionStore!: Observable<SelectionStoreState>;\n  /** Dimension settings Y */\n  @Prop() dimensionRow!: Observable<DimensionSettingsState>;\n  /** Dimension settings X */\n  @Prop() dimensionCol!: Observable<DimensionSettingsState>;\n  /**\n   * Data rows source\n   */\n  @Prop() dataStore!: Observable<DSourceState<DataType, DimensionRows>>;\n  /**\n   * Column source\n   */\n  @Prop() colData!: Observable<DSourceState<ColumnRegular, DimensionCols>>;\n\n  /**\n   * Focus template custom function. Can be used to render custom focus layer.\n   */\n  @Prop() focusTemplate: FocusTemplateFunc | null = null;\n\n  /**\n   * Before focus render event.\n   * Can be prevented by event.preventDefault().\n   * If preventDefault used slot will be rendered.\n   */\n  @Event({ eventName: 'beforefocusrender' })\n  beforeFocusRender: EventEmitter<FocusRenderEvent>;\n\n  /**\n   * Before focus changed verify if it's in view and scroll viewport into this view\n   * Can be prevented by event.preventDefault()\n   */\n  @Event({ eventName: 'beforescrollintoview' })\n  beforeScrollIntoView: EventEmitter<{ el: HTMLElement }>;\n  /**\n   * Used to setup properties after focus was rendered\n   */\n  @Event({ eventName: 'afterfocus' })\n  afterFocus: EventEmitter<FocusAfterRenderEvent>;\n\n  @Element() el: HTMLElement;\n  private activeFocus: Cell | null = null;\n\n  componentDidRender() {\n    const currentFocus = this.selectionStore.get('focus');\n    if (\n      this.activeFocus?.x === currentFocus?.x &&\n      this.activeFocus?.y === currentFocus?.y\n    ) {\n      return;\n    }\n    this.activeFocus = currentFocus;\n    if (currentFocus && this.el) {\n      const beforeScrollIn = this.beforeScrollIntoView.emit({ el: this.el });\n      if (!beforeScrollIn.defaultPrevented) {\n        this.el.scrollIntoView({\n          block: 'nearest',\n          inline: 'nearest',\n        });\n      }\n      const model = getSourceItem(this.dataStore, currentFocus.y);\n      const column = getSourceItem(this.colData, currentFocus.x);\n      this.afterFocus.emit({\n        model,\n        column,\n        rowType: this.rowType,\n        colType: this.colType,\n        rowIndex: currentFocus.y,\n        colIndex: currentFocus.x,\n      });\n    }\n  }\n\n  render() {\n    const editCell = this.selectionStore.get('edit');\n    if (editCell) {\n      return;\n    }\n    const focusCell = this.selectionStore.get('focus');\n    if (!focusCell) {\n      return;\n    }\n    const event = this.beforeFocusRender.emit({\n      range: {\n        ...focusCell,\n        x1: focusCell.x,\n        y1: focusCell.y,\n      },\n      rowType: this.rowType,\n      colType: this.colType,\n      rowDimension: { ...this.dimensionRow.state },\n      colDimension: { ...this.dimensionCol.state },\n    });\n    if (event.defaultPrevented) {\n      return <slot />;\n    }\n    const { detail } = event;\n\n    const cell = getCell(\n      detail.range,\n      event.detail.rowDimension,\n      event.detail.colDimension,\n    );\n    const styles = styleByCellProps(cell);\n    const extra = this.focusTemplate?.(h, detail);\n    const props = {\n      class: { [FOCUS_CLASS]: true },\n      style: styles,\n    };\n    return (\n      <Host {...props}>\n        <slot />\n        {extra}\n      </Host>\n    );\n  }\n}\n","import { getRange } from '@store';\nimport {\n  codesLetter,\n  isAll,\n  isClear,\n  isCopy,\n  isCut,\n  isEnterKeyValue,\n  isPaste,\n  isTab,\n  timeout,\n  RESIZE_INTERVAL,\n  type Observable,\n} from '../../utils';\nimport {\n  EventData,\n  getCoordinate,\n  isAfterLast,\n  isBeforeFirst,\n} from './selection.utils';\nimport { Cell, Nullable, RangeArea, SelectionStoreState } from '@type';\n\ntype Config = {\n  selectionStore: Observable<SelectionStoreState>;\n\n  // Apply changes from edit.\n  change(val?: any): void;\n  // Cancels edit. Escape changes.\n  cancel(): void;\n\n  clearCell(): void;\n  focus(\n    focus: Cell,\n    changes: Partial<Cell>,\n    focusNextViewport?: number,\n  ): boolean;\n\n  getData(): any;\n  internalPaste(): void;\n  range(range: RangeArea | null): boolean;\n  selectAll(): void;\n};\n\nconst DIRECTION_CODES: string[] = [\n  codesLetter.TAB,\n  codesLetter.ARROW_UP,\n  codesLetter.ARROW_DOWN,\n  codesLetter.ARROW_LEFT,\n  codesLetter.ARROW_RIGHT,\n];\nexport class KeyboardService {\n  constructor(private sv: Config) {}\n\n  async keyDown(\n    e: KeyboardEvent,\n    canRange: boolean,\n    isEditMode: boolean,\n    { range, focus }: Nullable<Pick<EventData, 'range' | 'focus'>>,\n  ) {\n    // IF EDIT MODE\n    if (isEditMode) {\n      switch (e.code) {\n        case codesLetter.ESCAPE:\n          this.sv.cancel();\n          break;\n        case codesLetter.TAB:\n          this.keyChangeSelection(e, canRange);\n          break;\n      }\n      return;\n    }\n\n    // IF NOT EDIT MODE\n\n    // pressed clear key\n    if (range && isClear(e.code)) {\n      this.sv.clearCell();\n      return;\n    }\n\n    // below works with focus only\n    if (!focus) {\n      return;\n    }\n\n    // tab key means same as arrow right\n    if (isTab(e.code)) {\n      this.keyChangeSelection(e, canRange);\n      return;\n    }\n\n    // pressed enter\n    if (isEnterKeyValue(e.key)) {\n      this.sv.change();\n      return;\n    }\n\n    // copy operation\n    if (isCopy(e)) {\n      return;\n    }\n\n    // cut operation\n    if (isCut(e)) {\n      return;\n    }\n\n    // paste operation\n    if (isPaste(e)) {\n      this.sv.internalPaste();\n      return;\n    }\n\n    // select all\n    if (isAll(e)) {\n      if (canRange) {\n        this.selectAll(e);\n      }\n      return;\n    }\n\n    // pressed letter key\n    if (e.key.length === 1) {\n      this.sv.change(e.key);\n      return;\n    }\n\n    // pressed arrow, change selection position\n    if (await this.keyChangeSelection(e, canRange)) {\n      return;\n    }\n  }\n\n  private selectAll(e: KeyboardEvent) {\n    const range = this.sv.selectionStore.get('range');\n    const focus = this.sv.selectionStore.get('focus');\n    // if no range or focus - do nothing\n    if (!range || !focus) {\n      return;\n    }\n    e.preventDefault();\n    this.sv.selectAll();\n  }\n\n  async keyChangeSelection(e: KeyboardEvent, canRange: boolean) {\n    const data = this.changeDirectionKey(e, canRange);\n    if (!data) {\n      return false;\n    }\n\n    // this interval needed for several cases\n    // grid could be resized before next click\n    // at this case to avoid screen jump we use this interval\n    await timeout(RESIZE_INTERVAL + 30);\n\n    const range = this.sv.selectionStore.get('range');\n    const focus = this.sv.selectionStore.get('focus');\n    return this.keyPositionChange(data.changes, range, focus, data.isMulti);\n  }\n\n  keyPositionChange(\n    changes: Partial<Cell>,\n    range: RangeArea | null,\n    focus: Cell | null,\n    isMulti = false,\n  ) {\n    if (!range || !focus) {\n      return false;\n    }\n    const data = getCoordinate(range, focus, changes, isMulti);\n    if (!data) {\n      return false;\n    }\n    const eData: EventData = this.sv.getData();\n    if (isMulti) {\n      if (isAfterLast(data.end, eData.lastCell) || isBeforeFirst(data.start)) {\n        return false;\n      }\n      const range = getRange(data.start, data.end);\n      return this.sv.range(range);\n    }\n    return this.sv.focus(\n      data.start,\n      changes,\n      isAfterLast(data.start, eData.lastCell)\n        ? 1\n        : isBeforeFirst(data.start)\n          ? -1\n          : 0,\n    );\n  }\n\n  /** Monitor key direction changes */\n  changeDirectionKey(\n    e: KeyboardEvent,\n    canRange: boolean,\n  ): { changes: Partial<Cell>; isMulti?: boolean } | void {\n    const isMulti = canRange && e.shiftKey;\n    if (DIRECTION_CODES.includes(e.code)) {\n      e.preventDefault();\n    }\n\n    if (e.shiftKey) {\n      switch (e.code) {\n        case codesLetter.TAB:\n          return { changes: { x: -1 }, isMulti: false };\n      }\n    }\n\n    switch (e.code) {\n      case codesLetter.ARROW_UP:\n        return { changes: { y: -1 }, isMulti };\n      case codesLetter.ARROW_DOWN:\n        return { changes: { y: 1 }, isMulti };\n      case codesLetter.ARROW_LEFT:\n        return { changes: { x: -1 }, isMulti };\n      case codesLetter.TAB:\n      case codesLetter.ARROW_RIGHT:\n        return { changes: { x: 1 }, isMulti };\n    }\n  }\n}\n","import debounce from 'lodash/debounce';\nimport { DebouncedFunc } from 'lodash';\n\nimport { h } from '@stencil/core';\nimport { CELL_HANDLER_CLASS, MOBILE_CLASS } from '../../utils/consts';\nimport {\n  collectModelsOfRange,\n  EventData,\n  getCell,\n  getCurrentCell,\n  isAfterLast,\n} from './selection.utils';\nimport { DSourceState, getRange } from '@store';\nimport ColumnService from '../data/column.service';\nimport { getPropertyFromEvent } from '../../utils/events';\nimport {\n  DataLookup,\n  DataType,\n  DimensionSettingsState,\n  TempRange,\n  ChangedRange,\n  BeforeRangeSaveDataDetails,\n  RangeArea,\n  Cell,\n  DimensionRows, Nullable,\n} from '@type';\nimport { Observable } from '../../utils';\n\ntype Config = {\n  dimensionRow: Observable<DimensionSettingsState>;\n  dimensionCol: Observable<DimensionSettingsState>;\n  columnService: ColumnService;\n  dataStore: Observable<DSourceState<DataType, DimensionRows>>;\n\n  setTempRange(e: Nullable<TempRange> | null): Event | null;\n  selectionChanged(e: ChangedRange): Event;\n  rangeCopy(e: ChangedRange): Event;\n  rangeDataApply(e: BeforeRangeSaveDataDetails): CustomEvent;\n  setRange(e: RangeArea | null): boolean;\n  clearRangeDataApply(e: { range: RangeArea }): CustomEvent<{\n    range: RangeArea;\n  }>;\n\n  getData(): any;\n};\n\nconst enum AutoFillType {\n  selection = 'Selection',\n  autoFill = 'AutoFill',\n}\n\nexport class AutoFillService {\n  private autoFillType: AutoFillType | null = null;\n  private autoFillInitial: Cell | null = null;\n  private autoFillStart: Cell | null = null;\n  private autoFillLast: Cell | null = null;\n\n  private onMouseMoveAutofill: DebouncedFunc<\n    (e: MouseEvent | TouchEvent, data: EventData) => void\n  >;\n\n  constructor(private sv: Config) {}\n\n  /**\n   * Render autofill box\n   * @param range\n   * @param selectionFocus\n   */\n  renderAutofill(range: RangeArea | null, selectionFocus: Cell, isMobile = false) {\n    let handlerStyle;\n    if (range) {\n      handlerStyle = getCell(\n        range,\n        this.sv.dimensionRow.state,\n        this.sv.dimensionCol.state,\n      );\n    } else {\n      handlerStyle = getCell(\n        {\n          ...selectionFocus,\n          x1: selectionFocus.x,\n          y1: selectionFocus.y,\n        },\n        this.sv.dimensionRow.state,\n        this.sv.dimensionCol.state,\n      );\n    }\n    return (\n      <div\n        class={{\n          [CELL_HANDLER_CLASS]: true,\n          [MOBILE_CLASS]: isMobile,\n        }}\n        style={{\n          left: `${handlerStyle.right}px`,\n          top: `${handlerStyle.bottom}px`,\n        }}\n        onMouseDown={(e: MouseEvent) => this.autoFillHandler(e)}\n        onTouchStart={(e: TouchEvent) => this.autoFillHandler(e)}\n      />\n    );\n  }\n\n  private autoFillHandler(\n    e: MouseEvent | TouchEvent,\n    type = AutoFillType.autoFill,\n  ) {\n    let target: Element | null = null;\n    if (e.target instanceof Element) {\n      target = e.target;\n    }\n    if (!target) {\n      return;\n    }\n    this.selectionStart(target, this.sv.getData(), type);\n    e.preventDefault();\n  }\n\n  get isAutoFill() {\n    return !!this.autoFillType;\n  }\n\n  /**\n   * Process mouse move events\n   */\n  selectionMouseMove(e: MouseEvent | TouchEvent) {\n    // initiate mouse move debounce if not present\n    if (!this.onMouseMoveAutofill) {\n      this.onMouseMoveAutofill = debounce(\n        (e: MouseEvent | TouchEvent, data: EventData) =>\n          this.doAutofillMouseMove(e, data),\n        5,\n      );\n    }\n    if (this.isAutoFill) {\n      this.onMouseMoveAutofill(e, this.sv.getData());\n    }\n  }\n\n  private getFocus(focus: Cell | null, range: RangeArea | null) {\n    // there was an issue that it was taking last cell from range but focus was out\n    if (!focus && range) {\n      focus = { x: range.x, y: range.y };\n    }\n    return focus || null;\n  }\n\n  /**\n   * Autofill logic:\n   * on mouse move apply based on previous direction (if present)\n   */\n  private doAutofillMouseMove(event: MouseEvent | TouchEvent, data: EventData) {\n    // if no initial - not started\n    if (!this.autoFillInitial) {\n      return;\n    }\n    const x = getPropertyFromEvent(event, 'clientX', MOBILE_CLASS);\n    const y = getPropertyFromEvent(event, 'clientY', MOBILE_CLASS);\n    // skip touch\n    if (x === null || y === null) {\n      return;\n    }\n    const current = getCurrentCell({ x, y }, data);\n\n    // first time or direction equal to start(same as first time)\n    if (!this.autoFillLast) {\n      if (!this.autoFillLast) {\n        this.autoFillLast = this.autoFillStart;\n      }\n    }\n\n    // check if not the latest, if latest - do nothing\n    if (isAfterLast(current, data.lastCell)) {\n      return;\n    }\n    this.autoFillLast = current;\n\n    const isSame =\n      current.x === this.autoFillInitial.x &&\n      current.y === this.autoFillInitial.y;\n\n    // if same as initial - clear\n    if (isSame) {\n      this.sv.setTempRange(null);\n    } else {\n      const area = getRange(this.autoFillInitial, this.autoFillLast);\n      this.sv.setTempRange({\n        area,\n        type: this.autoFillType,\n      });\n    }\n  }\n\n  /**\n   * Range selection started\n   * Mode @param type:\n   * Can be triggered from MouseDown selection on element\n   * Or can be triggered on corner square drag\n   */\n  selectionStart(\n    target: Element,\n    data: EventData,\n    type = AutoFillType.selection,\n  ) {\n    /** Get cell by autofill element */\n    const { top, left } = target.getBoundingClientRect();\n    this.autoFillInitial = this.getFocus(data.focus, data.range);\n    this.autoFillType = type;\n    this.autoFillStart = getCurrentCell({ x: left, y: top }, data);\n  }\n\n  /**\n   * Clear current range selection on mouse up and mouse leave events\n   */\n  clearAutoFillSelection(focus: Cell | null, oldRange: RangeArea | null) {\n    // If autofill was active, apply autofill values\n    if (this.autoFillInitial) {\n      // Fetch latest focus\n      this.autoFillInitial = this.getFocus(focus, oldRange);\n\n      // Apply range data if autofill mode is active\n      if (this.autoFillType === AutoFillType.autoFill) {\n        const range = getRange(this.autoFillInitial, this.autoFillLast);\n\n        // If range is present, apply data\n        if (range) {\n          const {\n            defaultPrevented: stopApply,\n            detail: { range: newRange },\n          } = this.sv.clearRangeDataApply({\n            range,\n          });\n\n          // If data apply was not prevented, apply new range\n          if (!stopApply && oldRange) {\n            this.applyRangeWithData(newRange, oldRange);\n          } else {\n            // If data apply was prevented, clear temporary range\n            this.sv.setTempRange(null);\n          }\n        }\n      } else {\n        // If not autofill mode, apply range only\n        this.applyRangeOnly(this.autoFillInitial, this.autoFillLast);\n      }\n    }\n\n    // Reset autofill state\n    this.resetAutoFillState();\n  }\n\n  /**\n   * Reset autofill state\n   */\n  private resetAutoFillState() {\n    this.autoFillType = null;\n    this.autoFillInitial = null;\n    this.autoFillLast = null;\n    this.autoFillStart = null;\n  }\n\n  /**\n   * Trigger range apply events and handle responses\n   */\n  onRangeApply(newData: DataLookup, newRange: RangeArea | null, oldRange: RangeArea | null) {\n    this.sv.rangeDataApply({\n      data: newData,\n      models: collectModelsOfRange(newData, this.sv.dataStore),\n      type: this.sv.dataStore.get('type'),\n      oldRange,\n      newRange\n    });\n\n    this.sv.setRange(newRange);\n  }\n\n  /** Apply range and copy data during range application */\n  private applyRangeWithData(newRange: RangeArea, rangeToCopy: RangeArea) {\n    const rangeData: ChangedRange = {\n      type: this.sv.dataStore.get('type'),\n      colType: this.sv.columnService.type,\n      newData: {},\n      mapping: {},\n      newRange,\n      oldRange: rangeToCopy,\n    };\n    const { mapping, changed } = this.sv.columnService.getRangeData(\n      rangeData,\n      this.sv.columnService.columns,\n    );\n    rangeData.newData = changed;\n    rangeData.mapping = mapping;\n    let e = this.sv.selectionChanged(rangeData);\n\n    // if default prevented - clear range\n    if (e.defaultPrevented) {\n      this.sv.setTempRange(null);\n      return;\n    }\n\n    e = this.sv.rangeCopy(rangeData);\n    if (e.defaultPrevented) {\n      this.sv.setRange(newRange);\n      return;\n    }\n    this.onRangeApply(rangeData.newData, newRange, rangeToCopy);\n  }\n\n  /**\n   * Update range selection only,\n   * no data change (mouse selection)\n   */\n  private applyRangeOnly(start?: Cell | null, end?: Cell | null) {\n    // no changes to apply\n    if (!start || !end) {\n      return;\n    }\n\n    const newRange = getRange(start, end);\n    this.sv.setRange(newRange);\n  }\n}\n","@mixin autofill-handle($handler-size: 14px, $icon-size: 10px) {\n  .autofill-handle {\n    position: absolute;\n    width: $handler-size;\n    height: $handler-size;\n    margin-left: -$handler-size + 1;\n    margin-top: -$handler-size + 1;\n    z-index: 10;\n    cursor: crosshair;\n\n    &::before {\n      content: '';\n      position: absolute;\n      right: 0;\n      bottom: 0;\n      width: $icon-size;\n      height: $icon-size;\n      background: $selection-border;\n      border: 1px solid white;\n      box-sizing: border-box;\n    }\n  }\n}\n\nrevogr-overlay-selection {\n  display: block;\n  position: relative;\n  width: 100%;\n\n\n  @include autofill-handle;\n\n  &.mobile {\n    @include autofill-handle(30px, 12px);\n  }\n\n  .selection-border-range {\n    position: absolute;\n    pointer-events: none;\n    z-index: 9;\n\n    .range-handlers {\n      height: 100%;\n      background-color: transparent;\n      width: calc(50% + (50% / 2));\n      max-width: 50px;\n      min-width: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      position: absolute;\n\n      $btn-size: 20px;\n      $handler-w: 15px;\n      $handler-h: 5px;\n      \n      > span {\n        pointer-events: auto;\n        height: $btn-size;\n        width: $btn-size;\n        position: absolute;\n        left: 50%;\n        transform: translateX(-50%);\n\n\n        &:before, &:after {\n          position: absolute;\n          border-radius: 5px;\n          width: $handler-w;\n          height: $handler-h;\n          left: 50%;\n          transform: translateX(-50%);\n          background-color: rgba(black, 20%);\n        }\n        &:first-child {\n          top: -($handler-h + 2px);\n          &:before{\n            content: '';\n            top: 0;\n          }\n        }\n        &:last-child {\n          bottom: -($handler-h + 2px);\n          &:after{\n            content: '';\n            bottom: 0;\n          }\n        }\n      }\n    }\n    @include selection();\n  }\n\n  revogr-edit {\n    z-index: 10;\n  }\n}\n","import {\n  Component,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n  type VNode,\n  Element,\n  Watch,\n} from '@stencil/core';\nimport ColumnService, { getCellEditor } from '../data/column.service';\nimport { codesLetter } from '../../utils/key.codes';\nimport { MOBILE_CLASS, SELECTION_BORDER_CLASS } from '../../utils/consts';\nimport { type DSourceState, getRange, isRangeSingleCell } from '@store';\nimport {\n  collectModelsOfRange,\n  EventData,\n  getCell,\n  getFocusCellBasedOnEvent,\n  styleByCellProps,\n} from './selection.utils';\nimport { isEditInput } from '../editors/edit.utils';\nimport { KeyboardService } from './keyboard.service';\nimport { AutoFillService } from './autofill.service';\nimport { verifyTouchTarget } from '../../utils/events';\nimport { getCellData, type Observable } from '../../utils';\n\nimport type {\n  SelectionStoreState,\n  DimensionSettingsState,\n  DataType,\n  DimensionRows,\n  ColumnRegular,\n  DimensionCols,\n  DragStartEvent,\n  Cell,\n  MultiDimensionType,\n  Nullable,\n  RangeClipboardCopyEventProps,\n  RangeClipboardPasteEvent,\n  FocusRenderEvent,\n  ApplyFocusEvent,\n  AllDimensionType,\n  DataFormat,\n  Editors,\n  BeforeSaveDataDetails,\n  BeforeEdit,\n  RangeArea,\n  TempRange,\n  ChangedRange,\n  BeforeRangeSaveDataDetails,\n  SaveDataDetails,\n  EditCellStore,\n} from '@type';\n\n/**\n * Component for overlaying the grid with the selection.\n */\n@Component({\n  tag: 'revogr-overlay-selection',\n  styleUrl: 'revogr-overlay-style.scss',\n})\nexport class OverlaySelection {\n  // #region Properties\n  /**\n   * Readonly mode.\n   */\n  @Prop() readonly: boolean;\n  /**\n   * Range selection allowed.\n   */\n  @Prop() range: boolean;\n  /**\n   * Enable revogr-order-editor component (read more in revogr-order-editor component).\n   * Allows D&D.\n   */\n  @Prop() canDrag: boolean;\n\n  /**\n   * Enable revogr-clipboard component (read more in revogr-clipboard component).\n   * Allows copy/paste.\n   */\n  @Prop() useClipboard: boolean;\n\n  /** Stores */\n  /** Selection, range, focus. */\n  @Prop() selectionStore!: Observable<SelectionStoreState>;\n  /** Dimension settings Y. */\n  @Prop() dimensionRow: Observable<DimensionSettingsState>;\n  /** Dimension settings X. */\n  @Prop() dimensionCol!: Observable<DimensionSettingsState>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Static stores, not expected to change during component lifetime\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Row data store.\n   */\n  @Prop() dataStore!: Observable<DSourceState<DataType, DimensionRows>>;\n\n  /**\n   * Column data store.\n   */\n  @Prop() colData!: Observable<DSourceState<ColumnRegular, DimensionCols>>;\n  /**\n   * Last real coordinates positions + 1.\n   */\n  @Prop() lastCell: Cell;\n  /**\n   * Custom editors register.\n   */\n  @Prop() editors: Editors;\n  /**\n   * If true applys changes when cell closes if not Escape.\n   */\n  @Prop() applyChangesOnClose = false;\n  /**\n   * Additional data to pass to renderer.\n   */\n  @Prop() additionalData: any;\n\n  /**\n   * Is mobile view mode.\n   */\n  @Prop() isMobileDevice: boolean;\n\n  // #endregion\n\n  // #region Events\n  /**\n   * Before clipboard copy happened. Validate data before copy.\n   * To prevent the default behavior of editing data and use your own implementation, call `e.preventDefault()`.\n   */\n  @Event({ eventName: 'beforecopyregion', cancelable: true })\n  beforeCopyRegion: EventEmitter;\n  /**\n   * Before region paste happened.\n   */\n  @Event({ eventName: 'beforepasteregion', cancelable: true })\n  beforeRegionPaste: EventEmitter;\n\n  /**\n   * Cell edit apply to the data source.\n   * Triggers datasource edit on the root level.\n   */\n  @Event({ eventName: 'celleditapply', cancelable: true })\n  cellEditApply: EventEmitter<BeforeSaveDataDetails>;\n\n  /**\n   * Before cell focus.\n   */\n  @Event({ eventName: 'beforecellfocusinit', cancelable: true })\n  beforeFocusCell: EventEmitter<BeforeSaveDataDetails>;\n\n  /**\n   * Fired when change of viewport happens.\n   * Usually when we switch between pinned regions.\n   */\n  @Event({ eventName: 'beforenextvpfocus', cancelable: true })\n  beforeNextViewportFocus: EventEmitter<Cell>;\n\n  /**\n   * Set edit cell.\n   */\n  @Event({ eventName: 'setedit' }) setEdit: EventEmitter<BeforeEdit>;\n\n  /**\n   * Before range applied.\n   * First step in triggerRangeEvent.\n   */\n  @Event({ eventName: 'beforeapplyrange' })\n  beforeApplyRange: EventEmitter<FocusRenderEvent>;\n  /**\n   * Before range selection applied.\n   * Second step in triggerRangeEvent.\n   */\n  @Event({ eventName: 'beforesetrange' }) beforeSetRange: EventEmitter;\n\n  /**\n   * Set range.\n   * Third step in triggerRangeEvent.\n   */\n  @Event({ eventName: 'setrange' }) setRange: EventEmitter<\n    RangeArea & { type: MultiDimensionType }\n  >;\n\n  /**\n   * Before editor render.\n   */\n  @Event({ eventName: 'beforeeditrender' })\n  beforeEditRender: EventEmitter<FocusRenderEvent>;\n\n\n  /** Select all cells from keyboard. */\n  @Event({ eventName: 'selectall' }) selectAll: EventEmitter;\n  /**\n   * Cancel edit. Used for editors support when editor close requested.\n   */\n  @Event({ eventName: 'canceledit' }) cancelEdit: EventEmitter;\n\n  /**\n   * Set temp range area during autofill.\n   */\n  @Event({ eventName: 'settemprange' })\n  setTempRange: EventEmitter<Nullable<TempRange> | null>;\n\n  /**\n   * Before set temp range area during autofill.\n   */\n  @Event({ eventName: 'beforesettemprange' })\n  beforeSetTempRange: EventEmitter<\n    { tempRange: Nullable<TempRange> | null } & EventData & AllDimensionType\n  >;\n\n  /**\n   * Before cell get focused.\n   * To prevent the default behavior of applying the edit data, you can call `e.preventDefault()`.\n   */\n  @Event({ eventName: 'applyfocus' })\n  applyFocus: EventEmitter<FocusRenderEvent>;\n\n  /**\n   * Cell get focused.\n   * To prevent the default behavior of applying the edit data, you can call `e.preventDefault()`.\n   */\n  @Event({ eventName: 'focuscell' }) focusCell: EventEmitter<ApplyFocusEvent & FocusRenderEvent>;\n  /** Range data apply. */\n  @Event({ eventName: 'beforerangedataapply' })\n  beforeRangeDataApply: EventEmitter<FocusRenderEvent>;\n  /** Autofill data in range. First step in applyRangeWithData */\n  @Event({ eventName: 'selectionchangeinit', cancelable: true })\n  selectionChange: EventEmitter<ChangedRange>;\n  /** Before range copy. */\n  @Event({ eventName: 'beforerangecopyapply', cancelable: true, bubbles: true })\n  beforeRangeCopyApply: EventEmitter<ChangedRange>;\n\n  /** Range data apply.\n   * Triggers datasource edit on the root level.\n   */\n  @Event({ eventName: 'rangeeditapply', cancelable: true })\n  rangeEditApply: EventEmitter<BeforeRangeSaveDataDetails>;\n  /** Range copy. */\n  @Event({ eventName: 'clipboardrangecopy', cancelable: true })\n  /**\n   * Range copy event.\n   * This event is triggered when data is ready to be copied to the clipboard.\n   * If you want to prevent the default behavior of copying data, you can call `e.preventDefault()`.\n   * If you want to modify the data that will be copied to the clipboard, modify the `data` property of the event object.\n   */\n  rangeClipboardCopy: EventEmitter<RangeClipboardCopyEventProps>;\n\n  /**\n   * Range paste event.\n   */\n  @Event({ eventName: 'clipboardrangepaste', cancelable: true })\n  rangeClipboardPaste: EventEmitter<RangeClipboardPasteEvent>;\n\n  /**\n   * Before key up event proxy, used to prevent key up trigger.\n   * If you have some custom behaviour event, use this event to check if it wasn't processed by internal logic.\n   * Call preventDefault().\n   */\n  @Event({ eventName: 'beforekeydown' })\n  beforeKeyDown: EventEmitter<{ original: KeyboardEvent } & EventData>;\n  /**\n   * Before key down event proxy, used to prevent key down trigger.\n   * If you have some custom behaviour event, use this event to check if it wasn't processed by internal logic.\n   * Call preventDefault().\n   */\n  @Event({ eventName: 'beforekeyup' }) beforeKeyUp: EventEmitter<\n    { original: KeyboardEvent } & EventData\n  >;\n  /**\n   * Runs before cell save.\n   * Can be used to override or cancel original save.\n   */\n  @Event({ eventName: 'beforecellsave', cancelable: true })\n  beforeCellSave: EventEmitter;\n\n  /**\n   * Runs when edit finished save started, first in chain event\n   */\n  @Event({ eventName: 'celledit' }) cellEditDone: EventEmitter<SaveDataDetails>;\n\n  // #endregion\n\n  // #region Private Properties\n  @Element() element: HTMLElement;\n  private clipboard?: HTMLRevogrClipboardElement;\n\n  protected columnService: ColumnService;\n  private keyboardService: KeyboardService | null = null;\n  private autoFillService: AutoFillService | null = null;\n  private orderEditor?: HTMLRevogrOrderEditorElement;\n  private revogrEdit?: HTMLRevogrEditElement;\n  private unsubscribeSelectionStore: { (): void }[] = [];\n  // #endregion\n\n  // #region Listeners\n  @Listen('touchmove', { target: 'document' })\n  @Listen('mousemove', { target: 'document' })\n  onMouseMove(e: MouseEvent | TouchEvent) {\n    if (this.selectionStore.get('focus')) {\n      this.autoFillService?.selectionMouseMove(e);\n    }\n  }\n\n  /**\n   * Action finished inside the document.\n   * Pointer left document, clear any active operation.\n   */\n  @Listen('touchend', { target: 'document' })\n  @Listen('mouseup', { target: 'document' })\n  @Listen('mouseleave', { target: 'document' })\n  onMouseUp() {\n    // Clear autofill selection\n    // when pointer left document,\n    // clear any active operation.\n    this.autoFillService?.clearAutoFillSelection(\n      this.selectionStore.get('focus'),\n      this.selectionStore.get('range'),\n    );\n  }\n\n  /**\n   * Row drag started.\n   * This event is fired when drag action started on cell.\n   */\n  @Listen('dragstartcell') onCellDrag(e: CustomEvent<DragStartEvent>) {\n    // Invoke drag start on order editor.\n    this.orderEditor?.dragStart(e.detail);\n  }\n\n  /**\n   * Get keyboard down from element.\n   * This event is fired when keyboard key is released.\n   */\n  @Listen('keyup', { target: 'document' }) onKeyUp(e: KeyboardEvent) {\n    // Emit before key up event.\n    this.beforeKeyUp.emit({ original: e, ...this.getData() });\n  }\n\n  /**\n   * Get keyboard down from element.\n   * This event is fired when keyboard key is pressed.\n   */\n  @Listen('keydown', { target: 'document' }) onKeyDown(e: KeyboardEvent) {\n    // Emit before key down event and check if default prevention is set.\n    const proxy = this.beforeKeyDown.emit({ original: e, ...this.getData() });\n    if (e.defaultPrevented || proxy.defaultPrevented) {\n      return;\n    }\n    // Invoke key down on keyboard service.\n    this.keyboardService?.keyDown(\n      e,\n      this.range,\n      !!this.selectionStore.get('edit'),\n      {\n        focus: this.selectionStore.get('focus'),\n        range: this.selectionStore.get('range'),\n      },\n    );\n  }\n  // #endregion\n\n  /**\n   * Selection & Keyboard\n   */\n  @Watch('selectionStore') selectionServiceSet(\n    selectionStore: Observable<SelectionStoreState>,\n  ) {\n    // clear subscriptions\n    this.unsubscribeSelectionStore.forEach(v => v());\n    this.unsubscribeSelectionStore.length = 0;\n    this.unsubscribeSelectionStore.push(\n      selectionStore.onChange('nextFocus', v => v && this.doFocus(v, v)),\n    );\n\n    this.keyboardService = new KeyboardService({\n      selectionStore,\n      range: r => !!r && this.triggerRangeEvent(r),\n      focus: (f, changes, focusNextViewport) => {\n        if (focusNextViewport) {\n          this.beforeNextViewportFocus.emit(f);\n          return false;\n        } else {\n          return this.doFocus(f, f, changes);\n        }\n      },\n      change: val => {\n        if (this.readonly) {\n          return;\n        }\n        this.doEdit(val);\n      },\n      cancel: async () => {\n        await this.revogrEdit?.cancelChanges();\n        this.closeEdit();\n      },\n      clearCell: () => !this.readonly && this.clearCell(),\n      internalPaste: () => !this.readonly && this.beforeRegionPaste.emit(),\n      getData: () => this.getData(),\n      selectAll: () => this.selectAll.emit(),\n    });\n    this.createAutoFillService();\n  }\n  /** Autofill */\n  @Watch('dimensionRow')\n  @Watch('dimensionCol')\n  createAutoFillService() {\n    this.autoFillService = new AutoFillService({\n      dimensionRow: this.dimensionRow,\n      dimensionCol: this.dimensionCol,\n      columnService: this.columnService,\n      dataStore: this.dataStore,\n\n      clearRangeDataApply: e =>\n        this.beforeRangeDataApply.emit({\n          ...e,\n          ...this.types,\n          rowDimension: { ...this.dimensionRow.state },\n          colDimension: { ...this.dimensionCol.state },\n        }),\n      setTempRange: e => {\n        const tempRangeEvent = this.beforeSetTempRange.emit({\n          tempRange: e,\n          ...this.getData(),\n          ...this.types,\n        });\n        if (tempRangeEvent.defaultPrevented) {\n          return null;\n        }\n        return this.setTempRange.emit(tempRangeEvent.detail.tempRange);\n      },\n      selectionChanged: e => this.selectionChange.emit(e),\n\n      rangeCopy: e => this.beforeRangeCopyApply.emit(e),\n      rangeDataApply: e => this.rangeEditApply.emit(e),\n\n      setRange: e => !!e && this.triggerRangeEvent(e),\n      getData: () => this.getData(),\n    });\n  }\n\n  /** Columns */\n  @Watch('dataStore')\n  @Watch('colData')\n  columnServiceSet() {\n    this.columnService?.destroy();\n    this.columnService = new ColumnService(this.dataStore, this.colData);\n    this.createAutoFillService();\n  }\n\n  connectedCallback() {\n    this.columnServiceSet();\n    this.selectionServiceSet(this.selectionStore);\n  }\n\n  disconnectedCallback() {\n    // clear subscriptions\n    this.unsubscribeSelectionStore.forEach(v => v());\n    this.unsubscribeSelectionStore.length = 0;\n    this.columnService?.destroy();\n  }\n\n  async componentWillRender() {\n    const editCell = this.selectionStore.get('edit');\n    if (!editCell) {\n      await this.revogrEdit?.beforeDisconnect?.();\n    }\n  }\n\n  private renderRange(range: RangeArea) {\n    const cell = getCell(\n      range,\n      this.dimensionRow.state,\n      this.dimensionCol.state,\n    );\n    const styles = styleByCellProps(cell);\n    return [\n      <div class={SELECTION_BORDER_CLASS} style={styles}>\n        {this.isMobileDevice && (\n          <div class=\"range-handlers\">\n            <span class={MOBILE_CLASS}></span>\n            <span class={MOBILE_CLASS}></span>\n          </div>\n        )}\n      </div>,\n    ];\n  }\n\n  private renderEditor() {\n    // Check if edit access\n    const editCell = this.selectionStore.get('edit');\n    // Readonly or Editor closed\n    if (this.readonly || !editCell) {\n      return null;\n    }\n    const enteredOrModelValue =\n      editCell.val ||\n        getCellData(\n          this.columnService.rowDataModel(editCell.y, editCell.x).value\n        );\n    const editable = {\n      ...editCell,\n      ...this.columnService.getSaveData(\n        editCell.y,\n        editCell.x,\n        enteredOrModelValue,\n      ),\n    };\n    const renderEvent = this.beforeEditRender.emit({\n      range: {\n        ...editCell,\n        x1: editCell.x,\n        y1: editCell.y,\n      },\n      ...this.types,\n      rowDimension: { ...this.dimensionRow.state },\n      colDimension: { ...this.dimensionCol.state },\n    });\n\n    // Render prevented\n    if (renderEvent.defaultPrevented) {\n      return null;\n    }\n\n    const cell = getCell(\n      renderEvent.detail.range,\n      renderEvent.detail.rowDimension,\n      renderEvent.detail.colDimension,\n    );\n    const styles = styleByCellProps(cell);\n    return (\n      <revogr-edit\n        style={styles}\n        ref={el => (this.revogrEdit = el)}\n        additionalData={this.additionalData}\n        editCell={editable}\n        saveOnClose={this.applyChangesOnClose}\n        onCelleditinit={(e) => {\n          this.cellEditDone.emit(e.detail);\n        }}\n        column={this.columnService.rowDataModel(editCell.y, editCell.x)}\n        editor={getCellEditor(\n          this.columnService.columns[editCell.x],\n          this.editors,\n        )}\n      />\n    );\n  }\n\n  private onEditCell(e: CustomEvent<SaveDataDetails>) {\n    if (e.defaultPrevented) {\n      return;\n    }\n    const saveEv = this.beforeCellSave.emit(e.detail);\n    if (!saveEv.defaultPrevented) {\n      this.cellEdit(saveEv.detail);\n    }\n\n    // if not clear navigate to next cell after edit\n    if (!saveEv.detail.preventFocus) {\n      this.focusNext();\n    }\n  }\n\n  render() {\n    const nodes: VNode[] = [];\n    const editCell = this.renderEditor();\n\n    // Editor\n    if (editCell) {\n      nodes.push(editCell);\n    } else {\n      const range = this.selectionStore.get('range');\n      const focus = this.selectionStore.get('focus');\n\n      // Clipboard\n      if ((range || focus) && this.useClipboard) {\n        nodes.push(\n          <revogr-clipboard\n            readonly={this.readonly}\n            onCopyregion={e => this.onCopy(e.detail)}\n            onClearregion={() => !this.readonly && this.clearCell()}\n            ref={e => (this.clipboard = e)}\n            onPasteregion={e => this.onPaste(e.detail)}\n          />,\n        );\n      }\n\n      // Range\n      if (range) {\n        nodes.push(...this.renderRange(range));\n      }\n      // Autofill\n      if (focus && !this.readonly && this.range) {\n        nodes.push(this.autoFillService?.renderAutofill(range, focus, this.isMobileDevice));\n      }\n\n      // Order\n      if (this.canDrag) {\n        nodes.push(\n          <revogr-order-editor\n            ref={e => (this.orderEditor = e)}\n            dataStore={this.dataStore}\n            dimensionRow={this.dimensionRow}\n            dimensionCol={this.dimensionCol}\n            parent={this.element}\n            rowType={this.types.rowType}\n            onRowdragstartinit={e => this.rowDragStart(e)}\n          />,\n        );\n      }\n    }\n    return (\n      <Host\n        class={{ mobile: this.isMobileDevice }}\n        onDblClick={(e: MouseEvent) => this.onElementDblClick(e)}\n        onMouseDown={(e: MouseEvent) => this.onElementMouseDown(e)}\n        onTouchStart={(e: TouchEvent) => this.onElementMouseDown(e, true)}\n        onCloseedit={(e: CustomEvent<boolean | undefined>) => this.closeEdit(e)}\n        // it's done to be able to throw events from different levels, not just from editor\n        onCelledit={(e: CustomEvent<SaveDataDetails>) => this.onEditCell(e)}\n      >\n        {nodes}\n        <slot name=\"data\" />\n      </Host>\n    );\n  }\n\n  /**\n   * Executes the focus operation on the specified range of cells.\n   */\n  private doFocus(focus: Cell, end: Cell, changes?: Partial<Cell>) {\n    // 1. Trigger beforeFocus event\n    const { defaultPrevented } = this.beforeFocusCell.emit(\n      this.columnService.getSaveData(focus.y, focus.x),\n    );\n    if (defaultPrevented) {\n      return false;\n    }\n    const evData: FocusRenderEvent = {\n      range: {\n        ...focus,\n        x1: end.x,\n        y1: end.y,\n      },\n      next: changes,\n      ...this.types,\n      rowDimension: { ...this.dimensionRow.state },\n      colDimension: { ...this.dimensionCol.state },\n    };\n\n    // 2. Trigger apply focus event\n    const applyEvent = this.applyFocus.emit(evData);\n    if (applyEvent.defaultPrevented) {\n      return false;\n    }\n    const { range } = applyEvent.detail;\n\n    // 3. Trigger focus event\n    return !this.focusCell.emit({\n      focus: {\n        x: range.x,\n        y: range.y,\n      },\n      end: {\n        x: range.x1,\n        y: range.y1,\n      },\n      ...applyEvent.detail,\n    }).defaultPrevented;\n  }\n\n  private triggerRangeEvent(range: RangeArea) {\n    const type = this.types.rowType;\n    // 1. Apply range\n    const applyEvent = this.beforeApplyRange.emit({\n      range: { ...range },\n      ...this.types,\n      rowDimension: { ...this.dimensionRow.state },\n      colDimension: { ...this.dimensionCol.state },\n    });\n    if (applyEvent.defaultPrevented) {\n      return false;\n    }\n    const data = this.columnService.getRangeTransformedToProps(\n      applyEvent.detail.range,\n      this.dataStore,\n    );\n    // 2. Before set range\n    let e = this.beforeSetRange.emit(data);\n    if (e.defaultPrevented) {\n      return false;\n    }\n    // 3. Set range\n    e = this.setRange.emit({ ...applyEvent.detail.range, type });\n    if (e.defaultPrevented) {\n      return false;\n    }\n    return !e.defaultPrevented;\n  }\n\n  /**\n   * Open Editor on DblClick\n   */\n  private onElementDblClick(e: MouseEvent) {\n    // DblClick prevented outside - Editor will not open\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    // Get data from the component\n    const data = this.getData();\n    const focusCell = getFocusCellBasedOnEvent(e, data);\n    if (!focusCell) {\n      return;\n    }\n    this.doEdit();\n  }\n\n  /**\n   * Handle mouse down event on Host element\n   */\n  private onElementMouseDown(e: MouseEvent | TouchEvent, touch = false) {\n    // Get the target element from the event object\n    const targetElement = e.target as HTMLElement | undefined;\n    // Ignore focus if clicked input\n    if (isEditInput(targetElement) || e.defaultPrevented) {\n      return;\n    }\n\n    // Get data from the component\n    const data = this.getData();\n    const focusCell = getFocusCellBasedOnEvent(e, data);\n    if (!focusCell) {\n      return;\n    }\n\n    // Set focus on the current cell\n    this.focus(focusCell, this.range && e.shiftKey);\n\n    // Initiate autofill selection\n    if (this.range) {\n      targetElement &&\n        this.autoFillService?.selectionStart(targetElement, this.getData());\n\n      // Prevent default behavior for mouse events,\n      // but only if target element is not a mobile input\n      if (!touch) {\n        e.preventDefault();\n      } else if (\n        verifyTouchTarget((e as TouchEvent).touches[0], MOBILE_CLASS)\n      ) {\n        // Prevent default behavior for touch events\n        // if target element is a mobile input\n        e.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * Start cell editing\n   */\n  protected doEdit(val = '') {\n    if (this.canEdit()) {\n      const focus = this.selectionStore.get('focus');\n      if (!focus) {\n        return;\n      }\n      const data = this.columnService.getSaveData(focus.y, focus.x);\n      this.setEdit?.emit({\n        ...data,\n        val,\n      });\n    }\n  }\n\n  /**\n   * Close editor event triggered\n   * @param details - if it requires focus next\n   */\n  private async closeEdit(e?: CustomEvent<boolean | undefined>) {\n    this.cancelEdit.emit();\n    if (e?.detail) {\n      await this.focusNext();\n    }\n  }\n\n  /**\n   * Edit finished.\n   * Close Editor and save.\n   */\n  protected cellEdit(e: SaveDataDetails) {\n    const dataToSave = this.columnService.getSaveData(e.rgRow, e.rgCol, e.val);\n    this.cellEditApply.emit(dataToSave);\n  }\n\n  private getRegion() {\n    const focus = this.selectionStore.get('focus');\n    let range = this.selectionStore.get('range');\n    if (!range) {\n      range = getRange(focus, focus);\n    }\n    return range;\n  }\n  private onCopy(e: DataTransfer) {\n    const range = this.getRegion();\n    const canCopyEvent = this.beforeCopyRegion.emit(range);\n    if (canCopyEvent.defaultPrevented) {\n      return false;\n    }\n    let rangeData: DataFormat[][] | undefined;\n\n    if (range) {\n      const { data, mapping } = this.columnService.copyRangeArray(\n        range,\n        this.dataStore,\n      );\n      const event = this.rangeClipboardCopy.emit({\n        range,\n        data,\n        mapping,\n        ...this.types,\n      });\n      if (!event.defaultPrevented) {\n        rangeData = event.detail.data;\n      }\n    }\n\n    this.clipboard?.doCopy(e, rangeData);\n    return true;\n  }\n\n  private onPaste(data: string[][]) {\n    const focus = this.selectionStore.get('focus');\n    const isEditing = this.selectionStore.get('edit') !== null;\n    if (!focus || isEditing) {\n      return;\n    }\n    let { changed, range } = this.columnService.getTransformedDataToApply(\n      focus,\n      data,\n    );\n    const { defaultPrevented: canPaste } = this.rangeClipboardPaste.emit({\n      data: changed,\n      models: collectModelsOfRange(changed, this.dataStore),\n      range,\n      ...this.types,\n    });\n\n    if (canPaste) {\n      return;\n    }\n    this.autoFillService?.onRangeApply(changed, range, range);\n  }\n\n  private async focusNext() {\n    const canFocus = await this.keyboardService?.keyChangeSelection(\n      new KeyboardEvent('keydown', {\n        code: codesLetter.ARROW_DOWN,\n      }),\n      this.range,\n    );\n    if (!canFocus) {\n      this.closeEdit();\n    }\n  }\n\n  protected clearCell() {\n    const range = this.selectionStore.get('range');\n    if (range && !isRangeSingleCell(range)) {\n      const data = this.columnService.getRangeStaticData(range, '');\n      this.autoFillService?.onRangeApply(data, range, range);\n    } else if (this.canEdit()) {\n      const focused = this.selectionStore.get('focus');\n      if (!focused) {\n        return;\n      }\n      const cell = this.columnService.getSaveData(focused.y, focused.x);\n      this.cellEdit({\n        rgRow: focused.y,\n        rgCol: focused.x,\n        val: '',\n        type: cell.type,\n        prop: cell.prop,\n      });\n    }\n  }\n\n  private rowDragStart({ detail }: CustomEvent<{ cell: Cell; text: string }>) {\n    detail.text = getCellData(\n      this.columnService.rowDataModel(detail.cell.y, detail.cell.x).value\n    );\n  }\n\n  /**\n   * Verify if edit allowed.\n   */\n  protected canEdit() {\n    if (this.readonly) {\n      return false;\n    }\n    const focus = this.selectionStore.get('focus');\n    return focus && !this.columnService?.isReadOnly(focus.y, focus.x);\n  }\n\n  get edited(): EditCellStore | null {\n    return this.selectionStore.get('edit');\n  }\n\n  /**\n   * Sets the focus on a cell and optionally edits a range.\n   */\n  focus(cell?: Cell, isRangeEdit = false) {\n    if (!cell) return false;\n\n    const end = cell;\n    const start = this.selectionStore.get('focus');\n\n    if (isRangeEdit && start) {\n      const range = getRange(start, end);\n      if (range) {\n        return this.triggerRangeEvent(range);\n      }\n    }\n\n    return this.doFocus(cell, end);\n  }\n\n  get types(): AllDimensionType {\n    return {\n      rowType: this.dataStore.get('type'),\n      colType: this.columnService.type,\n    };\n  }\n\n  /**\n   * Collect data\n   */\n  protected getData(): EventData {\n    return {\n      el: this.element,\n      rows: this.dimensionRow.state,\n      cols: this.dimensionCol.state,\n      lastCell: this.lastCell,\n      focus: this.selectionStore.get('focus'),\n      range: this.selectionStore.get('range'),\n      edit: this.selectionStore.get('edit'),\n    };\n  }\n}\n","import type { VNode } from '@stencil/core';\nimport type { HyperFunc } from '@type';\n\ntype HeaderRender = {\n  (start: number): (h: HyperFunc<VNode>, e: { rowIndex: number }) => number;\n};\nexport const RowHeaderRender: HeaderRender = s => (__, { rowIndex: i }) => s + i;\n","import { h, Host, Component, Prop, Event, EventEmitter } from '@stencil/core';\nimport type { JSXBase } from '@stencil/core/internal';\n\nimport { ViewportStore, DataStore } from '@store';\nimport type {\n  RowHeaders,\n  ViewPortScrollEvent,\n  DataType,\n  ColumnRegular,\n  ViewportData,\n  ElementScroll,\n  DimensionRows,\n  DimensionCols,\n} from '@type';\n\nimport { ROW_HEADER_TYPE } from '../../utils/consts';\nimport { RowHeaderRender } from './row-header-render';\nimport { calculateRowHeaderSize } from '../../utils/row-header-utils';\nimport { HEADER_SLOT } from '../revoGrid/viewport.helpers';\nimport { type JSX } from '../../components';\n\n/**\n * Row headers component\n * Visible on the left side of the table\n */\n\n@Component({ tag: 'revogr-row-headers' })\nexport class RevogrRowHeaders {\n  // #region Properties\n  /**\n   * Header height to setup row headers\n   */\n  @Prop() height: number;\n\n  /**\n   * Viewport data\n   */\n  @Prop() dataPorts: ViewportData[];\n  /**\n   * Header props\n   */\n  @Prop() headerProp: Record<string, any>;\n\n  /**\n   * Row class\n   */\n  @Prop() rowClass: string;\n\n  /**\n   * Enable resize\n   */\n  @Prop() resize: boolean;\n  /**\n   * Row header column\n   */\n  @Prop() rowHeaderColumn: RowHeaders;\n  /**\n   * Additional data to pass to renderer\n   */\n  @Prop() additionalData: any;\n  /**\n   * Prevent rendering until job is done.\n   * Can be used for initial rendering performance improvement.\n   * When several plugins require initial rendering this will prevent double initial rendering.\n   */\n  @Prop() jobsBeforeRender: Promise<any>[] = [];\n  // #endregion\n\n  /**\n   * Scroll viewport\n   */\n  @Event({ eventName: 'scrollview', bubbles: false })\n  scrollViewport: EventEmitter<ViewPortScrollEvent>;\n  /**\n   * Register element to scroll\n   */\n  @Event({ eventName: 'ref', bubbles: false })\n  elementToScroll: EventEmitter<ElementScroll>;\n\n  render() {\n    const dataViews: HTMLElement[] = [];\n    const viewport = new ViewportStore('colPinStart');\n\n    /** render viewports rows */\n    let totalLength = 1;\n    // todo: this part could be optimized to avoid to often re-render dataPorts can be cached\n    for (let data of this.dataPorts) {\n      const itemCount = data.dataStore.get('items').length;\n\n      // initiate row data\n      const dataStore = new DataStore<DataType, DimensionRows>(data.type, {\n        ...data.dataStore.state,\n      });\n\n      // initiate column data\n      const colData = new DataStore<ColumnRegular, DimensionCols>(\n        'colPinStart',\n      );\n      const column: ColumnRegular = {\n        cellTemplate: RowHeaderRender(totalLength),\n        ...this.rowHeaderColumn,\n      };\n      colData.updateData([column]);\n      dataViews.push(\n        <revogr-data\n          {...data}\n          colType=\"rowHeaders\"\n          jobsBeforeRender={this.jobsBeforeRender}\n          rowClass={this.rowClass}\n          dataStore={dataStore.store}\n          colData={colData.store}\n          viewportCol={viewport.store}\n          readonly={true}\n          range={false}\n        />,\n      );\n      totalLength += itemCount;\n    }\n\n    const colSize = calculateRowHeaderSize(totalLength, this.rowHeaderColumn);\n    viewport.setViewport({\n      realCount: 1,\n      virtualSize: 0,\n      items: [\n        {\n          size: colSize,\n          start: 0,\n          end: colSize,\n          itemIndex: 0,\n        },\n      ],\n    });\n\n    const viewportScroll: JSX.RevogrViewportScroll &\n      JSXBase.HTMLAttributes<HTMLRevogrViewportScrollElement> = {\n      contentHeight: this.height,\n      contentWidth: 0,\n      style: { minWidth: `${colSize}px` },\n      colType: 'rowHeaders',\n      ref: (el) => this.elementToScroll.emit(el),\n      onScrollviewport: (e: CustomEvent) => this.scrollViewport.emit(e.detail),\n    };\n    const viewportHeader: JSX.RevogrHeader & { slot: string } = {\n      ...this.headerProp,\n      // groups not present on row headers\n      groups: [],\n      colData:\n        typeof this.rowHeaderColumn === 'object' ? [this.rowHeaderColumn] : [],\n      viewportCol: viewport.store,\n      canResize: false,\n      type: ROW_HEADER_TYPE,\n      // parent,\n      slot: HEADER_SLOT,\n    };\n    return (\n      <Host class={{ [ROW_HEADER_TYPE]: true }} key={ROW_HEADER_TYPE}>\n        <revogr-viewport-scroll {...viewportScroll} row-header={true}>\n          <revogr-header {...viewportHeader} />\n          {dataViews}\n        </revogr-viewport-scroll>\n      </Host>\n    );\n  }\n}\n","\n\n/**\n * Autohide scroll for MacOS when scroll is visible only for 1 sec\n */\nexport class AutohideScrollPlugin {\n  private autohideScrollTimeout = 0;\n  constructor(private element: HTMLElement) {\n  }\n\n  /**\n   * When scroll size updates set it up for autohide\n   */\n  setScrollSize(s: number) {\n    if (!s) {\n      this.element.setAttribute('autohide', 'true');\n    } else {\n      this.element.removeAttribute('autohide');\n    }\n  }\n\n  /**\n   * On each scroll check if it's time to show\n   */\n  checkScroll({\n    scrollSize,\n    contentSize,\n    virtualSize,\n  }: {\n    scrollSize: number;\n    contentSize: number;\n    virtualSize: number;\n  }) {\n    const hasScroll = contentSize > virtualSize;\n    const isHidden = !scrollSize && hasScroll;\n    if (isHidden) {\n      this.element.setAttribute('visible', 'true');\n      this.autohideScrollTimeout = this.show(\n        this.element,\n        this.autohideScrollTimeout,\n      );\n    }\n  }\n\n  private show(element?: HTMLElement, timeout?: number): number {\n    clearTimeout(timeout);\n    return Number(\n      setTimeout(() => {\n        element?.removeAttribute('visible');\n      }, 1000),\n    );\n  }\n  clear() {\n    clearTimeout(this.autohideScrollTimeout);\n  }\n}\n","revogr-scroll-virtual {\n  $min-size: 20px;\n\n  // show scroll only for 1 sec\n  &[autohide] {\n    position: absolute;\n    z-index: 100 !important;\n\n    &.vertical {\n      top: 0;\n      right: 0;\n\n      &[visible] {\n        min-width: $min-size !important;\n      }\n    }\n\n    &.horizontal {\n      bottom: 0;\n      left: 0;\n\n      &[visible] {\n        min-height: $min-size !important;\n      }\n    }\n  }\n\n  &.vertical {\n    overflow-y: auto;\n    overflow-x: hidden;\n    height: 100%;\n\n    > div {\n      width: 1px;\n    }\n  }\n\n  &.horizontal {\n    overflow-x: auto;\n    overflow-y: hidden;\n    width: 100%;\n\n    > div {\n      height: 1px;\n    }\n  }\n}\n","import {\n  Component,\n  Element as StencilElement,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n} from '@stencil/core';\nimport LocalScrollService, {\n  getContentSize,\n} from '../../services/local.scroll.service';\nimport type {\n  DimensionType,\n  ViewPortScrollEvent,\n} from '@type';\nimport { AutohideScrollPlugin } from './autohide-scroll.plugin';\nimport { LocalScrollTimer } from '../../services/local.scroll.timer';\nimport { getScrollbarSize } from '../../utils';\n\n/**\n * Virtual scroll component\n */\n@Component({\n  tag: 'revogr-scroll-virtual',\n  styleUrl: 'revogr-scroll-style.scss',\n})\nexport class RevogrScrollVirtual {\n  /**\n   * Scroll dimension (`X` - `rgCol` or `Y` - `rgRow`)\n   */\n  @Prop() dimension: DimensionType = 'rgRow';\n\n  /**\n   * Dimensions\n   */\n  @Prop() realSize!: number;\n\n  /**\n   * Virtual size\n   */\n  @Prop() virtualSize!: number;\n\n  /**\n   * Client size\n   */\n  @Prop() clientSize!: number;\n\n  /**\n   * Scroll event\n   */\n  @Event({ eventName: 'scrollvirtual' })\n  scrollVirtual: EventEmitter<ViewPortScrollEvent>;\n\n  @StencilElement() element: HTMLElement;\n  private autohideScrollPlugin: AutohideScrollPlugin;\n  private scrollSize = 0;\n  private localScrollService: LocalScrollService;\n  private localScrollTimer: LocalScrollTimer;\n\n  @Method()\n  async setScroll(e: ViewPortScrollEvent): Promise<void> {\n    if (this.dimension !== e.dimension) {\n      return;\n    }\n    this.localScrollTimer.latestScrollUpdate(e.dimension);\n    this.localScrollService?.setScroll(e);\n    if (e.coordinate) {\n      this.autohideScrollPlugin.checkScroll({\n        scrollSize: this.scrollSize,\n        contentSize: this.realSize,\n        virtualSize: this.virtualSize,\n      });\n    }\n  }\n\n  /**\n   * Update if `delta` exists in case we don't know current position or if it's external change\n   */\n  @Method()\n  async changeScroll(e: ViewPortScrollEvent): Promise<ViewPortScrollEvent> {\n    if (e.delta) {\n      switch (e.dimension) {\n        case 'rgCol':\n          e.coordinate = this.element.scrollLeft + e.delta;\n          break;\n        case 'rgRow':\n          e.coordinate = this.element.scrollTop + e.delta;\n          break;\n      }\n      this.setScroll(e);\n    }\n    return e;\n  }\n\n  connectedCallback() {\n    this.autohideScrollPlugin = new AutohideScrollPlugin(this.element);\n    this.localScrollTimer = new LocalScrollTimer(\n      'ontouchstart' in document.documentElement ? 0 : 10,\n    );\n    this.localScrollService = new LocalScrollService({\n      runScroll: e => this.scrollVirtual.emit(e),\n      applyScroll: e => {\n        this.localScrollTimer.setCoordinate(e);\n        const type = e.dimension === 'rgRow' ? 'scrollTop' : 'scrollLeft';\n        // this will trigger on scroll event\n        this.element[type] = e.coordinate;\n      },\n    });\n  }\n\n  disconnectedCallback() {\n    this.autohideScrollPlugin.clear();\n  }\n\n  componentWillLoad() {\n    this.scrollSize = getScrollbarSize(document);\n  }\n\n  componentDidRender() {\n    let scrollSize = 0;\n    if (this.dimension === 'rgRow') {\n      scrollSize = this.element.scrollHeight > this.element.clientHeight ? this.scrollSize : 0;\n      this.element.style.minWidth = `${scrollSize}px`;\n    } else {\n      scrollSize = this.element.scrollWidth > this.element.clientWidth ? this.scrollSize : 0;\n      this.element.style.minHeight = `${scrollSize}px`;\n    }\n    this.autohideScrollPlugin.setScrollSize(scrollSize);\n    this.localScrollService.setParams(\n      {\n        contentSize: this.realSize,\n        clientSize: this.dimension === 'rgRow' ?  this.element.clientHeight : this.element.clientWidth,\n        virtualSize: this.clientSize,\n      },\n      this.dimension,\n    );\n  }\n\n  onScroll(e: MouseEvent) {\n    if (!(e.target instanceof Element)) {\n      return;\n    }\n    const target = e.target;\n    let type: 'scrollLeft' | 'scrollTop' = 'scrollLeft';\n    if (this.dimension === 'rgRow') {\n      type = 'scrollTop';\n    }\n\n    const setScroll = () => {\n      this.localScrollService?.scroll(target[type] || 0, this.dimension);\n    };\n    // apply after throttling\n    if (this.localScrollTimer.isReady(this.dimension, target[type])) {\n      setScroll();\n    } else {\n      this.localScrollTimer.throttleLastScrollUpdate(this.dimension, target[type] || 0, () => setScroll());\n    }\n  }\n\n  render() {\n    const size = getContentSize(\n      this.realSize,\n      this.dimension === 'rgRow' ?  this.element.clientHeight : this.element.clientWidth,\n      this.clientSize, // content viewport size\n    );\n    return (\n      <Host onScroll={(e: MouseEvent) => this.onScroll(e)}>\n        <div\n          style={{\n            [this.dimension === 'rgRow' ? 'height' : 'width']: `${size}px`,\n          }}\n        />\n      </Host>\n    );\n  }\n}\n",".temp-bg-range {\n  display: block !important;\n  position: absolute;\n  pointer-events: none;\n  z-index: 9;\n  border: 1px solid rgb(255, 94, 0);\n  box-sizing: border-box;\n\n  &.Selection {\n    border: 1px dashed gray;\n  }\n\n  > div {\n    width: 1px;\n    height: 1px;\n    position: absolute;\n\n    &.top {\n      top: -1px;\n    }\n\n    &.bottom {\n      bottom: -1px;\n    }\n\n    &.left {\n      left: -1px;\n    }\n\n    &.right {\n      right: -1px;\n    }\n  }\n}\n","import { Component, Prop, h, Host } from '@stencil/core';\nimport throttle from 'lodash/throttle';\nimport { TMP_SELECTION_BG_CLASS } from '../../utils/consts';\nimport { getCell, styleByCellProps } from '../overlay/selection.utils';\nimport { DimensionSettingsState, SelectionStoreState, RangeArea } from '@type';\nimport type { Observable } from '../../utils';\n\n/**\n * Temporary range selection component. Shows temporary range selection.\n */\n@Component({\n  tag: 'revogr-temp-range',\n  styleUrl: 'revogr-temp-range-style.scss',\n})\nexport class RevogrFocus {\n  /**\n   * Dynamic stores\n   */\n\n  /**\n   * Selection store, shows current selection and focus\n   */\n  @Prop() selectionStore: Observable<SelectionStoreState>;\n\n  /**\n   * Dimension row store\n   */\n  @Prop() dimensionRow: Observable<DimensionSettingsState>;\n  /**\n   * Dimension column store\n   */\n  @Prop() dimensionCol: Observable<DimensionSettingsState>;\n\n  el?: HTMLElement;\n  private readonly onChange = throttle((e: HTMLElement) => this.doChange(e), 300);\n\n  private doChange(e: HTMLElement) {\n    e?.scrollIntoView({\n      block: 'nearest',\n      inline: 'nearest',\n    });\n  }\n\n  componentDidRender() {\n    if (this.el) {\n      this.onChange(this.el);\n    }\n  }\n\n  render() {\n    const data = this.selectionStore.get('tempRange');\n    const type = this.selectionStore.get('tempRangeType');\n    if (!data) {\n      return;\n    }\n    let directionY = 'bottom';\n    let derectionX = 'right';\n    const range = this.getRange();\n    if (!range) {\n      return;\n    }\n    if (data.y < range.y) {\n      directionY = 'top';\n    }\n    if (data.x < range.x) {\n      derectionX = 'left';\n    }\n    const directionClass = `${derectionX} ${directionY}`;\n    const cell = getCell(data,\n      this.dimensionRow.state,\n      this.dimensionCol.state\n    );\n    const styles = styleByCellProps(cell);\n    const props = {\n      class: {\n        [TMP_SELECTION_BG_CLASS]: true,\n        [type || '']: true,\n      },\n      style: styles,\n      hidden: false\n    };\n    return (\n      <Host {...props}>\n        <div class={directionClass} ref={(e) => (this.el = e)} />\n      </Host>\n    );\n  }\n\n  private getRange(): RangeArea | null {\n    const range = this.selectionStore.get('range');\n    if (range) {\n      return range;\n    }\n    const focus = this.selectionStore.get('focus');\n    if (!focus) {\n      return null;\n    }\n    return {\n      ...focus,\n      x1: focus.x,\n      y1: focus.y,\n    };\n  }\n}\n"],"version":3}