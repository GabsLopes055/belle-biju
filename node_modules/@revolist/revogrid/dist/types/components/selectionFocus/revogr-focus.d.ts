import { EventEmitter } from '../../stencil-public-runtime';
import { DSourceState } from "../../store/index";
import type { SelectionStoreState, ColumnRegular, DataType, DimensionSettingsState, FocusRenderEvent, FocusTemplateFunc, DimensionCols, DimensionRows, FocusAfterRenderEvent } from "../../types/index";
import type { Observable } from '../../utils';
/**
 * Focus component. Shows focus layer around the cell that is currently in focus.
 * @slot focus-${view.type}-${data.type}. @example focus-rgCol-rgRow
 */
export declare class RevogrFocus {
    /**
     * Column type
     */
    colType: DimensionCols;
    /**
     * Row type
     */
    rowType: DimensionRows;
    /** Dynamic stores */
    /** Selection, range, focus for selection */
    selectionStore: Observable<SelectionStoreState>;
    /** Dimension settings Y */
    dimensionRow: Observable<DimensionSettingsState>;
    /** Dimension settings X */
    dimensionCol: Observable<DimensionSettingsState>;
    /**
     * Data rows source
     */
    dataStore: Observable<DSourceState<DataType, DimensionRows>>;
    /**
     * Column source
     */
    colData: Observable<DSourceState<ColumnRegular, DimensionCols>>;
    /**
     * Focus template custom function. Can be used to render custom focus layer.
     */
    focusTemplate: FocusTemplateFunc | null;
    /**
     * Before focus render event.
     * Can be prevented by event.preventDefault().
     * If preventDefault used slot will be rendered.
     */
    beforeFocusRender: EventEmitter<FocusRenderEvent>;
    /**
     * Before focus changed verify if it's in view and scroll viewport into this view
     * Can be prevented by event.preventDefault()
     */
    beforeScrollIntoView: EventEmitter<{
        el: HTMLElement;
    }>;
    /**
     * Used to setup properties after focus was rendered
     */
    afterFocus: EventEmitter<FocusAfterRenderEvent>;
    el: HTMLElement;
    private activeFocus;
    componentDidRender(): void;
    render(): any;
}
