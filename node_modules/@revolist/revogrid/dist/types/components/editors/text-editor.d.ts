import { type VNode, h as createElement } from '../../stencil-public-runtime';
import type { EditCell, EditorBase, ColumnDataSchemaModel } from "../../types/index";
/**
 * Represents a cell editor in a grid.
 *
 * It's a good place to start with your own editor.
 * It manages the editing of cells by handling events, saving data, rendering the editor UI, and managing the lifecycle of the editor instance.
 */
/**
 * Callback triggered on cell editor save
 * Closes editor when called
 * @param preventFocus - if true editor will not be closed and next cell will not be focused
 */
export type SaveCallback = (value: any, preventFocus: boolean) => void;
export declare class TextEditor implements EditorBase {
    data: ColumnDataSchemaModel;
    private saveCallback?;
    editInput: HTMLInputElement | null;
    element: Element | null;
    editCell?: EditCell;
    constructor(data: ColumnDataSchemaModel, saveCallback?: SaveCallback | undefined);
    /**
     * Callback triggered on cell editor render
     */
    componentDidRender(): Promise<void>;
    onKeyDown(e: KeyboardEvent): void;
    /**
     * IMPORTANT: Prevent scroll glitches when editor is closed and focus is on current input element.
     */
    beforeDisconnect(): void;
    /**
     * Get value from input
     */
    getValue(): string | undefined;
    /**
     * Render method for Editor plugin.
     * Renders input element with passed data from cell.
     * @param {Function} h - h function from stencil render.
     * @param {Object} _additionalData - additional data from plugin.
     * @returns {VNode} - input element.
     */
    render(h: typeof createElement, _additionalData: any): VNode | VNode[];
}
