import { EventEmitter } from '../../stencil-public-runtime';
import { ColumnDataSchemaModel } from "../../types/index";
import { EditCell, EditorCtr, SaveDataDetails } from "../../types/index";
/**
 * Represents a cell editor in a grid.
 * It manages the editing of cells by handling events, saving data, rendering the editor UI,
 * and managing the lifecycle of the editor instance.
 */
export declare class RevoEdit {
    /**
     * Cell to edit data.
     */
    editCell: EditCell;
    /**
     * Column data for editor.
     */
    column: ColumnDataSchemaModel | null;
    /**
     * Custom editors register
     */
    editor: EditorCtr | null;
    /**
     * Save on editor close. Defines if data should be saved on editor close.
     */
    saveOnClose: boolean;
    /**
     * Additional data to pass to renderer
     */
    additionalData: any;
    /**
     * Cell edit event
     */
    cellEdit: EventEmitter<SaveDataDetails>;
    /**
     * Close editor event
     * pass true if requires focus next
     */
    closeEdit: EventEmitter<boolean | undefined>;
    /** Edit session editor */
    element: HTMLElement;
    private currentEditor;
    private preventSaveOnClose;
    /**
     * Cancel pending changes flag. Editor will be closed without autosave.
     */
    cancelChanges(): Promise<void>;
    /**
     * Before editor got disconnected.
     * Can be triggered multiple times before actual disconnect.
     */
    beforeDisconnect(): Promise<void>;
    onAutoSave(): void;
    /**
     * Callback triggered when cell editor saved.
     * Closes editor when called.
     * @param preventFocus - if true, editor will not be closed & next cell will not be focused.
     */
    onSave(val?: any, preventFocus?: boolean): void;
    componentWillRender(): void;
    componentDidRender(): void;
    disconnectedCallback(): void;
    render(): any;
}
