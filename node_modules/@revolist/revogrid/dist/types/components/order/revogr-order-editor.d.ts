import { EventEmitter } from '../../stencil-public-runtime';
import { type DSourceState } from "../../store/index";
import type { DimensionRows, DataType, DimensionSettingsState, DragStartEvent, PositionItem, Cell, RowDragStartDetails } from "../../types/index";
import type { Observable } from '../../utils';
/**
 * Component for handling row order editor.
 */
export declare class OrderEditor {
    /** Parent element */
    parent: HTMLElement;
    /** Dimension settings Y */
    dimensionRow: Observable<DimensionSettingsState>;
    /** Dimension settings X */
    dimensionCol: Observable<DimensionSettingsState>;
    /** Static stores, not expected to change during component lifetime */
    dataStore: Observable<DSourceState<DataType, DimensionRows>>;
    rowType: DimensionRows;
    /** Row drag started */
    rowDragStart: EventEmitter<RowDragStartDetails>;
    /** Row drag ended started */
    rowDragEnd: EventEmitter<{
        rowType: DimensionRows;
    }>;
    /** Row move started */
    rowDrag: EventEmitter<PositionItem & {
        rowType: DimensionRows;
    }>;
    /** Row mouse move started */
    rowMouseMove: EventEmitter<Cell & {
        rowType: DimensionRows;
    }>;
    /** Row dragged, new range ready to be applied */
    rowDropped: EventEmitter<{
        from: number;
        to: number;
        rowType: DimensionRows;
    }>;
    /** Row drag ended finished. Time to apply data */
    rowOrderChange: EventEmitter<{
        from: number;
        to: number;
        rowType: DimensionRows;
    }>;
    private rowOrderService;
    private events;
    private rowMoveFunc;
    dragStart(e: DragStartEvent): Promise<void>;
    endOrder(e: MouseEvent): Promise<void>;
    clearOrder(): Promise<void>;
    move({ x, y }: {
        x: number;
        y: number;
    }): void;
    connectedCallback(): void;
    private getData;
}
