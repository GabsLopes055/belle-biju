import { EventData } from './selection.utils';
import { DSourceState } from "../../store/index";
import ColumnService from '../data/column.service';
import { DataLookup, DataType, DimensionSettingsState, TempRange, ChangedRange, BeforeRangeSaveDataDetails, RangeArea, Cell, DimensionRows, Nullable } from "../../types/index";
import { Observable } from '../../utils';
type Config = {
    dimensionRow: Observable<DimensionSettingsState>;
    dimensionCol: Observable<DimensionSettingsState>;
    columnService: ColumnService;
    dataStore: Observable<DSourceState<DataType, DimensionRows>>;
    setTempRange(e: Nullable<TempRange> | null): Event | null;
    selectionChanged(e: ChangedRange): Event;
    rangeCopy(e: ChangedRange): Event;
    rangeDataApply(e: BeforeRangeSaveDataDetails): CustomEvent;
    setRange(e: RangeArea | null): boolean;
    clearRangeDataApply(e: {
        range: RangeArea;
    }): CustomEvent<{
        range: RangeArea;
    }>;
    getData(): any;
};
declare const enum AutoFillType {
    selection = "Selection",
    autoFill = "AutoFill"
}
export declare class AutoFillService {
    private sv;
    private autoFillType;
    private autoFillInitial;
    private autoFillStart;
    private autoFillLast;
    private onMouseMoveAutofill;
    constructor(sv: Config);
    /**
     * Render autofill box
     * @param range
     * @param selectionFocus
     */
    renderAutofill(range: RangeArea | null, selectionFocus: Cell, isMobile?: boolean): any;
    private autoFillHandler;
    get isAutoFill(): boolean;
    /**
     * Process mouse move events
     */
    selectionMouseMove(e: MouseEvent | TouchEvent): void;
    private getFocus;
    /**
     * Autofill logic:
     * on mouse move apply based on previous direction (if present)
     */
    private doAutofillMouseMove;
    /**
     * Range selection started
     * Mode @param type:
     * Can be triggered from MouseDown selection on element
     * Or can be triggered on corner square drag
     */
    selectionStart(target: Element, data: EventData, type?: AutoFillType): void;
    /**
     * Clear current range selection on mouse up and mouse leave events
     */
    clearAutoFillSelection(focus: Cell | null, oldRange: RangeArea | null): void;
    /**
     * Reset autofill state
     */
    private resetAutoFillState;
    /**
     * Trigger range apply events and handle responses
     */
    onRangeApply(newData: DataLookup, newRange: RangeArea | null, oldRange: RangeArea | null): void;
    /** Apply range and copy data during range application */
    private applyRangeWithData;
    /**
     * Update range selection only,
     * no data change (mouse selection)
     */
    private applyRangeOnly;
}
export {};
