import { DimensionIndexInput, DSourceState } from "../../store/index";
import type { DimensionSettingsState, Cell, RangeArea, RangeAreaCss, DataLookup, DimensionRows, DataType, EditCellStore } from "../../types/index";
import { Observable } from '../../utils';
export type EventData = {
    el: HTMLElement;
    rows: DimensionSettingsState;
    cols: DimensionSettingsState;
    lastCell: Cell;
    focus: Cell | null;
    range: RangeArea | null;
    edit: EditCellStore | null;
};
export declare function collectModelsOfRange(data: DataLookup, store: Observable<DSourceState<DataType, DimensionRows>>): Partial<DataLookup>;
export declare function getFocusCellBasedOnEvent(e: MouseEvent | TouchEvent, data: EventData): Cell | null;
/**
 * Calculate cell based on x, y position
 */
export declare function getCurrentCell({ x, y }: Cell, { el, rows, cols }: Pick<EventData, 'el' | 'rows' | 'cols'>): Cell;
export declare function getCoordinate(range: RangeArea, focus: Cell, changes: Partial<Cell>, isMulti?: boolean): {
    start: {
        x: number;
        y: number;
    };
    end: {
        x: number;
        y: number;
    };
} | null;
/**
 * Check if the x coordinate of the cell position is after or equal to the x coordinate of the last cell position
 * or if the y coordinate of the cell position is after or equal to the y coordinate of the last cell position
 */
export declare function isAfterLast({ x, y }: Cell, lastCell: Cell): boolean;
/** check if out of range */
export declare function isBeforeFirst({ x, y }: Cell): boolean;
/** Compare cells, only 1 coordinate difference is possible */
export declare function styleByCellProps(styles: {
    [key: string]: number;
}): RangeAreaCss;
export declare function getCell({ x, y, x1, y1 }: RangeArea, dimensionRow: Pick<DimensionIndexInput, 'indexToItem' | 'indexes' | 'originItemSize'>, dimensionCol: Pick<DimensionIndexInput, 'indexToItem' | 'indexes' | 'originItemSize'>): {
    left: number;
    right: number;
    top: number;
    bottom: number;
    width: number;
    height: number;
};
