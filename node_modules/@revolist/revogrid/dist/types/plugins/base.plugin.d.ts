import { h } from '../stencil-public-runtime';
import type { PluginProviders, PluginBaseComponent } from '../types';
export type WatchConfig = {
    immediate: boolean;
};
/**
 * Base layer for plugins
 * Provide minimal starting core for plugins to work
 * Extend this class to create plugin
 */
export declare class BasePlugin implements PluginBaseComponent {
    revogrid: HTMLRevoGridElement;
    providers: PluginProviders;
    readonly h: typeof h;
    readonly subscriptions: Record<string, (...args: any[]) => void>;
    constructor(revogrid: HTMLRevoGridElement, providers: PluginProviders);
    /**
     *
     * @param eventName - event name to subscribe to in revo-grid component (e.g. 'beforeheaderclick')
     * @param callback - callback function for event
     */
    addEventListener<K extends keyof HTMLRevoGridElementEventMap>(eventName: K, callback: (this: BasePlugin, e: CustomEvent<HTMLRevoGridElementEventMap[K]>) => void): void;
    /**
     * Subscribe to property change in revo-grid component
     * You can return false in callback to prevent default value set
     *
     * @param prop - property name
     * @param callback - callback function
     * @param immediate - trigger callback immediately with current value
     */
    watch<T extends any>(prop: string, callback: (arg: T) => boolean | void, { immediate }?: Partial<WatchConfig>): void;
    /**
     * Remove event listener
     * @param eventName
     */
    removeEventListener(eventName: string): void;
    /**
     * Emit event from revo-grid component
     * Event can be cancelled by calling event.preventDefault() in callback
     */
    emit<T = any>(eventName: string, detail?: T): CustomEvent<T>;
    /**
     * Clear all subscriptions
     */
    clearSubscriptions(): void;
    /**
     * Destroy plugin and clear all subscriptions
     */
    destroy(): void;
}
export type GridPlugin = (typeof BasePlugin);
