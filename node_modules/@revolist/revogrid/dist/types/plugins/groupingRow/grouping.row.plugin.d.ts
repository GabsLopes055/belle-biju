import { type DSourceState } from "../../store/index";
import { BasePlugin } from '../base.plugin';
import type { GroupingOptions, OnExpandEvent } from './grouping.row.types';
import type { DataType, DimensionRows, PluginProviders } from "../../types/index";
import type { Observable } from '../../utils';
declare global {
    interface HTMLRevoGridElementEventMap {
        groupexpandclick: OnExpandEvent;
    }
}
export declare class GroupingRowPlugin extends BasePlugin {
    revogrid: HTMLRevoGridElement;
    providers: PluginProviders;
    private options;
    getStore(type?: DimensionRows): Observable<DSourceState<DataType, DimensionRows>>;
    constructor(revogrid: HTMLRevoGridElement, providers: PluginProviders);
    private onFocus;
    private onExpand;
    private setColumnGrouping;
    private setColumns;
    private onDrag;
    private beforeTrimmedApply;
    private isSortingRunning;
    private subscribe;
    /**
     * Starts global source update with group clearing and applying new one
     * Initiated when need to reapply grouping
     */
    private doSourceUpdate;
    /**
     * Apply grouping on data set
     * Clear grouping from source
     * If source came from other plugin
     */
    private onDataSet;
    /**
     * Externam call to apply grouping. Called by revogrid when prop changed.
     */
    setGrouping(options: GroupingOptions): void;
    clearGrouping(): void;
    private updateTrimmed;
}
