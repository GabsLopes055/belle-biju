import { DataStore } from "../store/index";
import type { ColumnProp, ColumnRegular, DimensionCols } from "../types/index";
import { ColumnCollection } from '../utils/column.utils';
export type ColumnDataSources = Record<DimensionCols, DataStore<ColumnRegular, DimensionCols>>;
type Sorting = Record<ColumnProp, ColumnRegular>;
type SortingOrder = Record<ColumnProp, 'asc' | 'desc' | undefined>;
export default class ColumnDataProvider {
    readonly dataSources: ColumnDataSources;
    sorting: Sorting | null;
    collection: ColumnCollection | null;
    get order(): SortingOrder;
    get stores(): ColumnDataSources;
    constructor();
    column(c: number, type?: DimensionCols): ColumnRegular | undefined;
    getColumn(virtualIndex: number, type: DimensionCols): ColumnRegular | undefined;
    getRawColumns(): Record<DimensionCols, ColumnRegular[]>;
    getColumns(type?: DimensionCols | 'all'): ColumnRegular[];
    getColumnIndexByProp(prop: ColumnProp, type: DimensionCols): number;
    getColumnByProp(prop: ColumnProp): ColumnRegular[] | undefined;
    refreshByType(type: DimensionCols): void;
    /**
     * Main method to set columns
     */
    setColumns(data: ColumnCollection): ColumnCollection;
    /**
     * Used in plugins
     * Modify columns in store
     */
    updateColumns(updatedColumns: ColumnRegular[]): void;
    updateColumn(column: ColumnRegular, index: number): void;
    updateColumnSorting(column: ColumnRegular, index: number, sorting: 'asc' | 'desc' | undefined, additive: boolean): ColumnRegular;
    clearSorting(): void;
}
export {};
