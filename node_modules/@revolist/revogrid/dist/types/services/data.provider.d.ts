import { DataStore, Groups, Trimmed } from "../store/index";
import DimensionProvider from './dimension.provider';
import type { GroupLabelTemplateFunc } from '../plugins/groupingRow/grouping.row.types';
import type { DataLookup, DimensionRows, DataType, BeforeSaveDataDetails } from "../types/index";
export type RowDataSources = {
    [T in DimensionRows]: DataStore<DataType, DimensionRows>;
};
/**
 * Data source provider
 *
 * @dependsOn DimensionProvider
 */
export declare class DataProvider {
    private dimensionProvider;
    readonly stores: RowDataSources;
    constructor(dimensionProvider: DimensionProvider);
    setData(data: DataType[], type?: DimensionRows, disableVirtualRows?: boolean, grouping?: {
        depth: number;
        groups?: Groups;
        customRenderer?: GroupLabelTemplateFunc;
    }, silent?: boolean): DataType[];
    getModel(virtualIndex: number, type?: DimensionRows): DataType;
    changeOrder({ rowType, from, to }: {
        rowType: DimensionRows;
        from: number;
        to: number;
    }): void;
    setCellData({ type, rowIndex, prop, val }: Pick<BeforeSaveDataDetails, 'type' | 'rowIndex' | 'prop' | 'val'>, mutate?: boolean): void;
    setRangeData(data: DataLookup, type: DimensionRows): void;
    refresh(type?: DimensionRows | 'all'): void;
    refreshItems(type?: DimensionRows): void;
    setGrouping({ depth }: {
        depth: number;
    }, type?: DimensionRows): void;
    setTrimmed(trimmed: Trimmed, type?: DimensionRows): void;
}
