{"file":"revogr-scroll-virtual2.js","mappings":"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","names":[],"sources":["src/components/scrollable/autohide-scroll.plugin.ts","src/components/scrollable/revogr-scroll-style.scss?tag=revogr-scroll-virtual","src/components/scrollable/revogr-scroll-virtual.tsx"],"sourcesContent":["\n\n/**\n * Autohide scroll for MacOS when scroll is visible only for 1 sec\n */\nexport class AutohideScrollPlugin {\n  private autohideScrollTimeout = 0;\n  constructor(private element: HTMLElement) {\n  }\n\n  /**\n   * When scroll size updates set it up for autohide\n   */\n  setScrollSize(s: number) {\n    if (!s) {\n      this.element.setAttribute('autohide', 'true');\n    } else {\n      this.element.removeAttribute('autohide');\n    }\n  }\n\n  /**\n   * On each scroll check if it's time to show\n   */\n  checkScroll({\n    scrollSize,\n    contentSize,\n    virtualSize,\n  }: {\n    scrollSize: number;\n    contentSize: number;\n    virtualSize: number;\n  }) {\n    const hasScroll = contentSize > virtualSize;\n    const isHidden = !scrollSize && hasScroll;\n    if (isHidden) {\n      this.element.setAttribute('visible', 'true');\n      this.autohideScrollTimeout = this.show(\n        this.element,\n        this.autohideScrollTimeout,\n      );\n    }\n  }\n\n  private show(element?: HTMLElement, timeout?: number): number {\n    clearTimeout(timeout);\n    return Number(\n      setTimeout(() => {\n        element?.removeAttribute('visible');\n      }, 1000),\n    );\n  }\n  clear() {\n    clearTimeout(this.autohideScrollTimeout);\n  }\n}\n","revogr-scroll-virtual {\n  $min-size: 20px;\n\n  // show scroll only for 1 sec\n  &[autohide] {\n    position: absolute;\n    z-index: 100 !important;\n\n    &.vertical {\n      top: 0;\n      right: 0;\n\n      &[visible] {\n        min-width: $min-size !important;\n      }\n    }\n\n    &.horizontal {\n      bottom: 0;\n      left: 0;\n\n      &[visible] {\n        min-height: $min-size !important;\n      }\n    }\n  }\n\n  &.vertical {\n    overflow-y: auto;\n    overflow-x: hidden;\n    height: 100%;\n\n    > div {\n      width: 1px;\n    }\n  }\n\n  &.horizontal {\n    overflow-x: auto;\n    overflow-y: hidden;\n    width: 100%;\n\n    > div {\n      height: 1px;\n    }\n  }\n}\n","import {\n  Component,\n  Element as StencilElement,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n} from '@stencil/core';\nimport LocalScrollService, { getContentSize } from '../../services/local.scroll.service';\nimport type {\n  DimensionType,\n  ViewportState,\n  DimensionSettingsState,\n  ViewPortScrollEvent,\n} from '@type';\nimport { AutohideScrollPlugin } from './autohide-scroll.plugin';\nimport { LocalScrollTimer } from '../../services/local.scroll.timer';\nimport { type Observable, getScrollbarSize } from '../../utils';\n\n/**\n * Virtual scroll component\n */\n@Component({\n  tag: 'revogr-scroll-virtual',\n  styleUrl: 'revogr-scroll-style.scss',\n})\nexport class RevogrScrollVirtual {\n  /**\n   * Scroll dimension (`X` - `rgCol` or `Y` - `rgRow`)\n   */\n  @Prop() dimension: DimensionType = 'rgRow';\n\n  /**\n   * Viewport\n   */\n  @Prop() viewportStore!: Observable<ViewportState>;\n  /**\n   * Dimensions\n   */\n  @Prop() dimensionStore!: Observable<DimensionSettingsState>;\n\n  /**\n   * Scroll event\n   */\n  @Event({ eventName: 'scrollvirtual' })\n  scrollVirtual: EventEmitter<ViewPortScrollEvent>;\n\n  @StencilElement() element: HTMLElement;\n  private autohideScrollPlugin: AutohideScrollPlugin;\n  private scrollSize = 0;\n  private localScrollService: LocalScrollService;\n  private localScrollTimer: LocalScrollTimer;\n\n  @Method()\n  async setScroll(e: ViewPortScrollEvent): Promise<void> {\n    if (this.dimension !== e.dimension) {\n      return;\n    }\n    this.localScrollTimer.latestScrollUpdate(e.dimension);\n    this.localScrollService?.setScroll(e);\n    if (e.coordinate) {\n      this.autohideScrollPlugin.checkScroll({\n        scrollSize: this.scrollSize,\n        contentSize: this.dimensionStore.get('realSize'),\n        virtualSize: this.viewportStore.get('virtualSize'),\n      });\n    }\n  }\n\n  /**\n   * Update if `delta` exists in case we don't know current position or if it's external change\n   */\n  @Method()\n  async changeScroll(e: ViewPortScrollEvent): Promise<ViewPortScrollEvent> {\n    if (e.delta) {\n      switch (e.dimension) {\n        case 'rgCol':\n          e.coordinate = this.element.scrollLeft + e.delta;\n          break;\n        case 'rgRow':\n          e.coordinate = this.element.scrollTop + e.delta;\n          break;\n      }\n      this.setScroll(e);\n    }\n    return e;\n  }\n\n  set size(s: number) {\n    this.autohideScrollPlugin.setScrollSize(s);\n    if (this.dimension === 'rgRow') {\n      this.element.style.minWidth = `${s}px`;\n      return;\n    }\n    this.element.style.minHeight = `${s}px`;\n  }\n\n  get size(): number {\n    if (this.dimension === 'rgRow') {\n      return this.element.clientHeight;\n    }\n    return this.element.clientWidth;\n  }\n\n  connectedCallback() {\n    this.autohideScrollPlugin = new AutohideScrollPlugin(this.element);\n    this.localScrollTimer = new LocalScrollTimer('ontouchstart' in document.documentElement ? 0 : 10);\n    this.localScrollService = new LocalScrollService({\n      runScroll: e => this.scrollVirtual.emit(e),\n      applyScroll: e => {\n        this.localScrollTimer.setCoordinate(e);\n        const type = e.dimension === 'rgRow' ? 'scrollTop' : 'scrollLeft';\n        // this will trigger on scroll event\n        this.element[type] = e.coordinate;\n      },\n    });\n  }\n\n  disconnectedCallback() {\n    this.autohideScrollPlugin.clear();\n  }\n\n  componentWillLoad() {\n    this.scrollSize = getScrollbarSize(document);\n  }\n\n  componentDidRender() {\n    const type = this.dimension === 'rgRow' ? 'scrollHeight' : 'scrollWidth';\n    if (this.element[type] > this.size) {\n      this.size = this.scrollSize;\n    } else {\n      this.size = 0;\n    }\n    this.localScrollService.setParams(\n      {\n        contentSize: this.dimensionStore.get('realSize'),\n        clientSize: this.size,\n        virtualSize: this.viewportStore.get('clientSize'),\n      },\n      this.dimension,\n    );\n  }\n\n  onScroll(e: MouseEvent) {\n    if (!(e.target instanceof Element)) {\n      return;\n    }\n    const target = e.target;\n    let type: 'scrollLeft' | 'scrollTop' = 'scrollLeft';\n    if (this.dimension === 'rgRow') {\n      type = 'scrollTop';\n    }\n    // apply after throttling\n    if (this.localScrollTimer.isReady(this.dimension, target[type] || 0)) {\n      this.localScrollService?.scroll(target[type] || 0, this.dimension);\n    }\n  }\n\n  render() {\n    const sizeType = this.dimension === 'rgRow' ? 'height' : 'width';\n    const size = getContentSize(\n      this.dimensionStore.get('realSize'),\n      this.size,\n      this.viewportStore.get('clientSize') // content viewport size\n    );\n    return (\n      <Host onScroll={(e: MouseEvent) => this.onScroll(e)}>\n        <div\n          style={{\n            [sizeType]: `${size}px`,\n          }}\n        />\n      </Host>\n    );\n  }\n}\n"],"version":3}