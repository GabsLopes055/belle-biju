{"file":"revogr-viewport-scroll2.js","mappings":"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","names":[],"sources":["src/components/revoGrid/viewport.helpers.ts","src/utils/resize-observer.polifill.ts","src/components/revoGrid/viewport.resize.service.ts","src/components/scroll/revogr-viewport-scroll-style.scss?tag=revogr-viewport-scroll","src/components/scroll/revogr-viewport-scroll.tsx"],"sourcesContent":["/**\n * Collects data for pinned columns in the required @ViewportProps format.\n */\n\nimport { DimensionRows, MultiDimensionType, SlotType, Cell, ViewportColumn } from '@type';\n\n/**\n * Represents the slot names for the viewport slots.\n */\nexport const HEADER_SLOT = 'header'; // Slot name for the header slot\nexport const FOOTER_SLOT = 'footer'; // Slot name for the footer slot\nexport const CONTENT_SLOT = 'content'; // Slot name for the content slot\nexport const DATA_SLOT = 'data'; // Slot name for the data slot\n\n/**\n * Returns the last visible cell in the viewport for a given row type.\n * Coordinates are not zero-based and are relative to the viewport.\n * If needed to be zero-based they can be adjusted by subtracting 1.\n */\nexport function getLastCell(\n  data: ViewportColumn,\n  rowType: MultiDimensionType,\n): Cell {\n  // Get the last visible column count from the viewport column data.\n  const lastVisibleColumnCount = data.viewports[data.colType].store.get('realCount');\n\n  // Get the last visible row count for the given row type from the viewport column data.\n  const lastVisibleRowCount = data.viewports[rowType].store.get('realCount');\n\n  // Return the last visible cell with the last visible column count and row count.\n  return {\n    x: lastVisibleColumnCount,\n    y: lastVisibleRowCount,\n  };\n}\n\n\nexport function viewportDataPartition(\n  data: ViewportColumn,\n  type: DimensionRows,\n  slot: SlotType,\n  fixed?: boolean,\n) {\n  return {\n    colData: data.colStore,\n    viewportCol: data.viewports[data.colType].store,\n    viewportRow: data.viewports[type].store,\n    // lastCell is the last real coordinate + 1\n    lastCell: getLastCell(data, type),\n    slot,\n    type,\n    canDrag: !fixed,\n    position: data.position,\n    dataStore: data.rowStores[type].store,\n    dimensionCol: data.dimensions[data.colType].store,\n    dimensionRow: data.dimensions[type].store,\n    style: fixed\n      ? { height: `${data.dimensions[type].store.get('realSize')}px` }\n      : undefined,\n  };\n}\n\nexport type VPPartition = ReturnType<typeof viewportDataPartition>;","export async function resizeObserver() {\n  if (!('ResizeObserver' in window)) {\n    const module = await import('@juggle/resize-observer');\n    (window as Window & typeof globalThis).ResizeObserver = (module.ResizeObserver as unknown) as typeof ResizeObserver;\n  }\n}\n","import throttle from 'lodash/throttle';\nimport { resizeObserver } from '../../utils/resize-observer.polifill';\ninterface Events {\n  resize(entries: ReadonlyArray<ResizeObserverEntry>, observer: ResizeObserver): void;\n}\nexport default class GridResizeService {\n  private resizeObserver: ResizeObserver | null = null;\n  private resize = throttle((e: ReadonlyArray<ResizeObserverEntry>, o: ResizeObserver) => this.events?.resize(e, o), 10);\n  constructor(el: HTMLElement, private events: Events) {\n    this.init(el);\n  }\n\n  async init(el: HTMLElement): Promise<void> {\n    await resizeObserver();\n    this.resizeObserver = new ResizeObserver(this.resize);\n    this.resizeObserver?.observe(el);\n  }\n\n  public destroy() {\n    this.resizeObserver?.disconnect();\n    this.resizeObserver = null;\n  }\n}\n","@mixin noScroll {\n  /* Hide scrollbar for IE and Edge */\n  -ms-overflow-style: none;\n  scrollbar-width: none; /* Firefox */\n  /* Hide scrollbar for Chrome, Safari and Opera */\n  &::-webkit-scrollbar {\n    display: none;\n    -webkit-appearance: none;\n  }\n}\n\n.rowHeaders {\n  z-index: 2;\n  font-size: 10px;\n  display: flex;\n  height: 100%;\n\n  revogr-data .rgCell {\n    text-align: center;\n  }\n\n  .rgCell {\n    padding: 0 1em !important;\n    min-width: 100%;\n  }\n}\n\nrevogr-viewport-scroll {\n  @include noScroll;\n\n  overflow-x: auto;\n  overflow-y: hidden;\n  position: relative;\n  z-index: 1;\n  height: 100%;\n\n  &.colPinStart,\n  &.colPinEnd {\n    z-index: 2;\n  }\n\n  // make sure it would work\n  &.colPinEnd:has(.active) {\n    overflow: visible;\n  }\n\n  &.rgCol {\n    flex-grow: 1;\n  }\n\n  .content-wrapper {\n    overflow: hidden;\n  }\n\n  .inner-content-table {\n    display: flex;\n    flex-direction: column;\n    max-height: 100%;\n    width: 100%;\n    min-width: 100%;\n    position: relative;\n    z-index: 0;\n  }\n\n  .vertical-inner {\n    overflow-y: auto;\n    position: relative;\n    width: 100%;\n    flex-grow: 1;\n    outline: none; // avoid accessibility focus issue\n    @include noScroll;\n\n    revogr-data,\n    revogr-overlay-selection {\n      height: 100%;\n    }\n  }\n}\n","import {\n  Component,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Element,\n  Prop,\n  Host,\n  Listen,\n} from '@stencil/core';\n\nimport GridResizeService from '../revoGrid/viewport.resize.service';\nimport LocalScrollService from '../../services/local.scroll.service';\nimport { LocalScrollTimer } from '../../services/local.scroll.timer';\nimport {\n  CONTENT_SLOT,\n  FOOTER_SLOT,\n  HEADER_SLOT,\n} from '../revoGrid/viewport.helpers';\nimport type {\n  DimensionCols,\n  DimensionType,\n  ElementScroll,\n  ScrollCoordinateEvent,\n  ViewPortResizeEvent,\n  ViewPortScrollEvent\n} from '@type';\n\ntype Delta = 'deltaX' | 'deltaY';\ntype LocalScrollEvent = {\n  preventDefault(): void;\n} & { [x in Delta]: number };\n\n/**\n * Viewport scroll component for RevoGrid\n * @slot - content\n * @slot header - header\n * @slot footer - footer\n */\n@Component({\n  tag: 'revogr-viewport-scroll',\n  styleUrl: 'revogr-viewport-scroll-style.scss',\n})\nexport class RevogrViewportScroll implements ElementScroll {\n  /**\n   * Enable row header\n  */\n  @Prop() readonly rowHeader: boolean;\n\n  /**\n   * Width of inner content\n   */\n  @Prop() contentWidth = 0;\n  /**\n   * Height of inner content\n   */\n  @Prop() contentHeight = 0;\n\n  @Prop() colType!: DimensionCols | 'rowHeaders';\n\n  /**\n   * Before scroll event\n   */\n  @Event({ eventName: 'scrollviewport', bubbles: true }) scrollViewport: EventEmitter<ViewPortScrollEvent>;\n  /**\n   * Viewport resize\n   */\n  @Event({ eventName: 'resizeviewport' }) resizeViewport: EventEmitter<ViewPortResizeEvent>;\n\n  /**\n   * Triggered on scroll change, can be used to get information about scroll visibility\n   */\n  @Event() scrollchange: EventEmitter<{\n    type: DimensionType;\n    hasScroll: boolean;\n  }>;\n\n  /**\n   * Silently scroll to coordinate\n   * Made to align negative coordinates for mobile devices\n  */\n  @Event({ eventName: 'scrollviewportsilent' }) silentScroll: EventEmitter<ViewPortScrollEvent>;\n\n  @Element() horizontalScroll: HTMLElement;\n\n  private verticalScroll?: HTMLElement;\n  private header?: HTMLElement;\n  private footer?: HTMLElement;\n\n  /**\n   * Static functions to bind wheel change\n   */\n  private horizontalMouseWheel: (e: Partial<LocalScrollEvent>) => void;\n  private verticalMouseWheel: (e: Partial<LocalScrollEvent>) => void;\n\n  private resizeService?: GridResizeService;\n  private localScrollService: LocalScrollService;\n  private localScrollTimer: LocalScrollTimer;\n\n\n  @Method() async setScroll(e: ViewPortScrollEvent) {\n    this.localScrollTimer.latestScrollUpdate(e.dimension);\n    this.localScrollService?.setScroll(e);\n  }\n\n  /**\n   * update on delta in case we don't know existing position or external change\n   * @param e\n   */\n  @Method() async changeScroll(\n    e: ViewPortScrollEvent,\n    silent = false,\n  ) {\n    if (silent) {\n      if (e.coordinate && this.verticalScroll) {\n        switch (e.dimension) {\n          // for mobile devices to skip negative scroll loop. only on vertical scroll\n          case 'rgRow':\n            this.verticalScroll.style.transform = `translateY(${-1 * e.coordinate}px)`;\n            break;\n        }\n      }\n      return;\n    }\n    if (e.delta) {\n      switch (e.dimension) {\n        case 'rgCol':\n          e.coordinate = this.horizontalScroll.scrollLeft + e.delta;\n          break;\n        case 'rgRow':\n          e.coordinate = (this.verticalScroll?.scrollTop ?? 0) + e.delta;\n          break;\n      }\n      this.setScroll(e);\n    }\n    return e;\n  }\n\n  /**\n   * Dispatch this event to trigger vertical mouse wheel from plugins\n   */\n  @Listen('mousewheel-vertical') mousewheelVertical({\n    detail: e,\n  }: CustomEvent<LocalScrollEvent>) {\n    this.verticalMouseWheel(e);\n  }\n  /**\n   * Dispatch this event to trigger horizontal mouse wheel from plugins\n   */\n  @Listen('mousewheel-horizontal') mousewheelHorizontal({\n    detail: e,\n  }: CustomEvent<LocalScrollEvent>) {\n    this.horizontalMouseWheel(e);\n  }\n  /**\n   * Allows to use outside listener\n   */\n  @Listen('scroll-coordinate') scrollApply({\n    detail: { type, coordinate },\n  }: CustomEvent<ScrollCoordinateEvent>) {\n    this.applyOnScroll(type, coordinate, true);\n  }\n\n  connectedCallback() {\n    /**\n     * Bind scroll functions for farther usage\n     */\n    // allow mousewheel for all devices including mobile\n    this.verticalMouseWheel = this.onVerticalMouseWheel.bind(\n      this,\n      'rgRow',\n      'deltaY',\n    );\n    this.horizontalMouseWheel = this.onHorizontalMouseWheel.bind(\n      this,\n      'rgCol',\n      'deltaX',\n    );\n    this.localScrollTimer = new LocalScrollTimer('ontouchstart' in document.documentElement ? 0 : 10);\n    /**\n     * Create local scroll service\n     */\n    this.localScrollService = new LocalScrollService({\n      // to improve safari smoothnes on scroll\n      // skipAnimationFrame: isSafariDesktop(),\n      runScroll: e => this.scrollViewport.emit(e),\n      applyScroll: e => {\n        this.localScrollTimer.setCoordinate(e);\n        switch (e.dimension) {\n          case 'rgCol':\n            // this will trigger on scroll event\n            this.horizontalScroll.scrollLeft = e.coordinate;\n            break;\n          case 'rgRow':\n            if (this.verticalScroll) {\n              // this will trigger on scroll event\n              this.verticalScroll.scrollTop = e.coordinate;\n              // for mobile devices to skip negative scroll loop. only on vertical scroll\n              if (this.verticalScroll.style.transform) {\n                this.verticalScroll.style.transform = '';\n              }\n            }\n            break;\n        }\n      },\n    });\n  }\n\n  componentDidLoad() {\n    // track horizontal viewport resize\n    this.resizeService = new GridResizeService(this.horizontalScroll, {\n      resize: entries => {\n        let height = entries[0]?.contentRect.height || 0;\n        if (height) {\n          height -= (this.header?.clientHeight ?? 0) + (this.footer?.clientHeight ?? 0);\n        }\n        const els = {\n          rgRow: {\n            size: height,\n            contentSize: this.contentHeight,\n            scroll: this.verticalScroll?.scrollTop,\n            noScroll: false,\n          },\n          rgCol: {\n            size: entries[0]?.contentRect.width || 0,\n            contentSize: this.contentWidth,\n            scroll: this.horizontalScroll.scrollLeft,\n            noScroll: this.colType !== 'rgCol',\n          },\n        };\n        for (const [dim, item] of Object.entries(els)) {\n          const dimension = dim as DimensionType;\n          this.resizeViewport.emit({ dimension, size: item.size, rowHeader: this.rowHeader });\n          if (item.noScroll) {\n            continue;\n          }\n          this.localScrollService?.scroll(item.scroll ?? 0, dimension, true);\n          // track scroll visibility on outer element change\n          this.setScrollVisibility(dimension, item.size, item.contentSize);\n        }\n      },\n    });\n  }\n\n  /**\n   * Check if scroll present or not per type\n   * Trigger this method on inner content size change or on outer element size change\n   * If inner content bigger then outer size then scroll is present and mousewheel binding required\n   * @param type - dimension type 'rgRow/y' or 'rgCol/x'\n   * @param size - outer content size\n   * @param innerContentSize - inner content size\n   */\n  setScrollVisibility(\n    type: DimensionType,\n    size: number,\n    innerContentSize: number,\n  ) {\n    // test if scroll present\n    const hasScroll = size < innerContentSize;\n    let el: HTMLElement | undefined;\n    // event reference for binding\n    switch (type) {\n      case 'rgCol':\n        el = this.horizontalScroll;\n        break;\n      case 'rgRow':\n        el = this.verticalScroll;\n        break;\n    }\n    // based on scroll visibility assign or remove class and event\n    if (hasScroll) {\n      el?.classList.add(`scroll-${type}`);\n    } else {\n      el?.classList.remove(`scroll-${type}`);\n    }\n    this.scrollchange.emit({ type, hasScroll });\n  }\n\n  disconnectedCallback() {\n    this.resizeService?.destroy();\n  }\n\n  async componentDidRender() {\n    this.localScrollService.setParams(\n      {\n        contentSize: this.contentHeight,\n        clientSize: this.verticalScroll?.clientHeight ?? 0,\n        virtualSize: 0,\n      },\n      'rgRow',\n    );\n\n    this.localScrollService.setParams(\n      {\n        contentSize: this.contentWidth,\n        clientSize: this.horizontalScroll.clientWidth,\n        virtualSize: 0,\n      },\n      'rgCol',\n    );\n    this.setScrollVisibility(\n      'rgRow',\n      this.verticalScroll?.clientHeight ?? 0,\n      this.contentHeight,\n    );\n    this.setScrollVisibility(\n      'rgCol',\n      this.horizontalScroll.clientWidth,\n      this.contentWidth,\n    );\n  }\n\n  render() {\n    return (\n      <Host\n        onWheel={this.horizontalMouseWheel}\n        onScroll={(e: UIEvent) => this.applyScroll('rgCol', e)}\n      >\n        <div\n          class=\"inner-content-table\"\n          style={{ width: `${this.contentWidth}px` }}\n        >\n          <div class=\"header-wrapper\" ref={e => (this.header = e)}>\n            <slot name={HEADER_SLOT} />\n          </div>\n          <div\n            class=\"vertical-inner\"\n            ref={el => (this.verticalScroll = el)}\n            onWheel={this.verticalMouseWheel}\n            onScroll={(e: MouseEvent) => this.applyScroll('rgRow', e)}\n          >\n            <div\n              class=\"content-wrapper\"\n              style={{ height: `${this.contentHeight}px` }}\n            >\n              <slot name={CONTENT_SLOT} />\n            </div>\n          </div>\n          <div class=\"footer-wrapper\" ref={e => (this.footer = e)}>\n            <slot name={FOOTER_SLOT} />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n  /**\n   * Extra layer for scroll event monitoring, where MouseWheel event is not passing\n   * We need to trigger scroll event in case there is no mousewheel event\n   */\n  @Method() async applyScroll(type: DimensionType, e: UIEvent) {\n    if (!(e.target instanceof HTMLElement)) {\n      return;\n    }\n    let scroll = 0;\n    switch (type) {\n      case 'rgCol':\n        scroll = e.target.scrollLeft;\n        break;\n      case 'rgRow':\n        scroll = e.target.scrollTop;\n        break;\n    }\n\n    // for mobile devices to skip negative scroll loop\n    if (scroll < 0) {\n      this.silentScroll.emit({ dimension: type, coordinate: scroll });\n      return;\n    }\n    this.applyOnScroll(type, scroll);\n  }\n\n  /**\n   * Applies change on scroll event only if mousewheel event happened some time ago\n   */\n  private applyOnScroll(\n    type: DimensionType,\n    coordinate: number,\n    outside = false,\n  ) {\n    // apply after throttling\n    if (this.localScrollTimer.isReady(type, coordinate)) {\n      this.localScrollService?.scroll(\n        coordinate,\n        type,\n        undefined,\n        undefined,\n        outside,\n      );\n    }\n  }\n\n  /**\n   * On vertical mousewheel event\n   * @param type\n   * @param delta\n   * @param e\n   */\n  private onVerticalMouseWheel(\n    type: DimensionType,\n    delta: Delta,\n    e: LocalScrollEvent,\n  ) {\n    const scrollTop = this.verticalScroll?.scrollTop ?? 0;\n    const clientHeight = this.verticalScroll?.clientHeight ?? 0;\n    const scrollHeight = this.verticalScroll?.scrollHeight ?? 0;\n\n    // Detect if the user has reached the bottom\n    const atBottom = (scrollTop + clientHeight >= scrollHeight) && e.deltaY > 0;\n    const atTop = scrollTop === 0 && e.deltaY < 0;\n    if (!atBottom && !atTop) {\n      e.preventDefault?.();\n    }\n    const pos = scrollTop + e[delta];\n    this.localScrollService?.scroll(pos, type, undefined, e[delta]);\n    this.localScrollTimer.latestScrollUpdate(type);\n  }\n\n  /**\n   * On horizontal mousewheel event\n   * @param type\n   * @param delta\n   * @param e\n   */\n  private onHorizontalMouseWheel(\n    type: DimensionType,\n    delta: Delta,\n    e: LocalScrollEvent,\n  ) {\n    if (!e.deltaX) {\n      return;\n    }\n    const { scrollLeft, scrollWidth, clientWidth } = this.horizontalScroll;\n\n    // Detect if the user has reached the right end\n    const atRight = (scrollLeft + clientWidth >= scrollWidth) && e.deltaX > 0;\n\n    // Detect if the user has reached the left end\n    const atLeft = scrollLeft === 0 && e.deltaX < 0;\n    if (!atRight && !atLeft) {\n      e.preventDefault?.();\n    }\n    const pos = scrollLeft + e[delta];\n    this.localScrollService?.scroll(pos, type, undefined, e[delta]);\n    this.localScrollTimer.latestScrollUpdate(type);\n  }\n}\n"],"version":3}